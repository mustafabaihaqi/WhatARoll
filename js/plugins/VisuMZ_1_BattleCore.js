//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.85;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.85] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 *   - This is NOT used for filtering out who the player can or cannot select.
 *   - This determines a final result.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0xabeb6b=_0x29aa;(function(_0x3ade2f,_0x14163e){const _0x46927c=_0x29aa,_0xa684d1=_0x3ade2f();while(!![]){try{const _0x43001a=-parseInt(_0x46927c(0x7f2))/0x1+parseInt(_0x46927c(0x212))/0x2+parseInt(_0x46927c(0x240))/0x3*(-parseInt(_0x46927c(0xba0))/0x4)+parseInt(_0x46927c(0x87f))/0x5+-parseInt(_0x46927c(0x342))/0x6*(-parseInt(_0x46927c(0x94c))/0x7)+-parseInt(_0x46927c(0x2ee))/0x8+parseInt(_0x46927c(0x138))/0x9;if(_0x43001a===_0x14163e)break;else _0xa684d1['push'](_0xa684d1['shift']());}catch(_0x53f581){_0xa684d1['push'](_0xa684d1['shift']());}}}(_0x382d,0xb2a0f));var label=_0xabeb6b(0x553),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0xabeb6b(0x959)](function(_0x4019e9){const _0x19fc34=_0xabeb6b;return _0x4019e9[_0x19fc34(0x94a)]&&_0x4019e9['description'][_0x19fc34(0x5d8)]('['+label+']');})[0x0];VisuMZ[label][_0xabeb6b(0x78f)]=VisuMZ[label]['Settings']||{},VisuMZ[_0xabeb6b(0x410)]=function(_0x2d8d1c,_0x55537d){const _0x5bf147=_0xabeb6b;for(const _0x462a28 in _0x55537d){if(_0x462a28['match'](/(.*):(.*)/i)){const _0x4f5b80=String(RegExp['$1']),_0x4c4a6c=String(RegExp['$2'])[_0x5bf147(0xf8)]()[_0x5bf147(0xd3)]();let _0x4c0cdc,_0x5ec3e6,_0x323fe7;switch(_0x4c4a6c){case _0x5bf147(0x63c):_0x4c0cdc=_0x55537d[_0x462a28]!==''?Number(_0x55537d[_0x462a28]):0x0;break;case'ARRAYNUM':_0x5ec3e6=_0x55537d[_0x462a28]!==''?JSON[_0x5bf147(0x3ef)](_0x55537d[_0x462a28]):[],_0x4c0cdc=_0x5ec3e6[_0x5bf147(0x614)](_0x201bbf=>Number(_0x201bbf));break;case'EVAL':_0x4c0cdc=_0x55537d[_0x462a28]!==''?eval(_0x55537d[_0x462a28]):null;break;case'ARRAYEVAL':_0x5ec3e6=_0x55537d[_0x462a28]!==''?JSON[_0x5bf147(0x3ef)](_0x55537d[_0x462a28]):[],_0x4c0cdc=_0x5ec3e6[_0x5bf147(0x614)](_0xb6e009=>eval(_0xb6e009));break;case _0x5bf147(0x497):_0x4c0cdc=_0x55537d[_0x462a28]!==''?JSON[_0x5bf147(0x3ef)](_0x55537d[_0x462a28]):'';break;case _0x5bf147(0x595):_0x5ec3e6=_0x55537d[_0x462a28]!==''?JSON[_0x5bf147(0x3ef)](_0x55537d[_0x462a28]):[],_0x4c0cdc=_0x5ec3e6[_0x5bf147(0x614)](_0x37ec92=>JSON[_0x5bf147(0x3ef)](_0x37ec92));break;case _0x5bf147(0x320):_0x4c0cdc=_0x55537d[_0x462a28]!==''?new Function(JSON['parse'](_0x55537d[_0x462a28])):new Function(_0x5bf147(0x8e3));break;case _0x5bf147(0xa36):_0x5ec3e6=_0x55537d[_0x462a28]!==''?JSON[_0x5bf147(0x3ef)](_0x55537d[_0x462a28]):[],_0x4c0cdc=_0x5ec3e6[_0x5bf147(0x614)](_0x2b57f9=>new Function(JSON[_0x5bf147(0x3ef)](_0x2b57f9)));break;case _0x5bf147(0x425):_0x4c0cdc=_0x55537d[_0x462a28]!==''?String(_0x55537d[_0x462a28]):'';break;case _0x5bf147(0x880):_0x5ec3e6=_0x55537d[_0x462a28]!==''?JSON['parse'](_0x55537d[_0x462a28]):[],_0x4c0cdc=_0x5ec3e6[_0x5bf147(0x614)](_0x3fa2b3=>String(_0x3fa2b3));break;case'STRUCT':_0x323fe7=_0x55537d[_0x462a28]!==''?JSON['parse'](_0x55537d[_0x462a28]):{},_0x2d8d1c[_0x4f5b80]={},VisuMZ[_0x5bf147(0x410)](_0x2d8d1c[_0x4f5b80],_0x323fe7);continue;case'ARRAYSTRUCT':_0x5ec3e6=_0x55537d[_0x462a28]!==''?JSON[_0x5bf147(0x3ef)](_0x55537d[_0x462a28]):[],_0x4c0cdc=_0x5ec3e6[_0x5bf147(0x614)](_0x99d367=>VisuMZ['ConvertParams']({},JSON[_0x5bf147(0x3ef)](_0x99d367)));break;default:continue;}_0x2d8d1c[_0x4f5b80]=_0x4c0cdc;}}return _0x2d8d1c;},(_0x39a525=>{const _0x30b0ab=_0xabeb6b,_0x357248=_0x39a525[_0x30b0ab(0x6e8)];for(const _0x198964 of dependencies){if(!Imported[_0x198964]){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x30b0ab(0x782)](_0x357248,_0x198964)),SceneManager[_0x30b0ab(0x9d8)]();break;}}const _0x373e16=_0x39a525[_0x30b0ab(0x84f)];if(_0x373e16['match'](/\[Version[ ](.*?)\]/i)){const _0x542280=Number(RegExp['$1']);_0x542280!==VisuMZ[label]['version']&&(alert(_0x30b0ab(0x5f4)[_0x30b0ab(0x782)](_0x357248,_0x542280)),SceneManager['exit']());}if(_0x373e16[_0x30b0ab(0xef)](/\[Tier[ ](\d+)\]/i)){const _0x7d70e4=Number(RegExp['$1']);_0x7d70e4<tier?(alert(_0x30b0ab(0xa47)[_0x30b0ab(0x782)](_0x357248,_0x7d70e4,tier)),SceneManager['exit']()):tier=Math[_0x30b0ab(0xb72)](_0x7d70e4,tier);}VisuMZ['ConvertParams'](VisuMZ[label][_0x30b0ab(0x78f)],_0x39a525[_0x30b0ab(0x631)]);})(pluginData),VisuMZ[_0xabeb6b(0x6b6)]=function(_0x9b5c43){const _0x2bd44b=_0xabeb6b;let _0x5e8214=[];for(const _0x1eef81 of _0x9b5c43){_0x5e8214=_0x5e8214[_0x2bd44b(0x5e0)](VisuMZ[_0x2bd44b(0x56d)](_0x1eef81));}return _0x5e8214[_0x2bd44b(0x959)](_0x4e9a07=>_0x4e9a07);},VisuMZ[_0xabeb6b(0x56d)]=function(_0x11f2b3){const _0x18fd07=_0xabeb6b,_0x2a2571=BattleManager[_0x18fd07(0xb9a)]()[_0x18fd07(0x959)](_0x4a745d=>_0x4a745d&&_0x4a745d['isAppeared']()),_0x39ae54=BattleManager[_0x18fd07(0x4ee)],_0x112dfb=BattleManager['_target'],_0x33036e=BattleManager[_0x18fd07(0x4fa)]?BattleManager[_0x18fd07(0x4fa)][_0x18fd07(0x4e7)](0x0):_0x2a2571;_0x11f2b3=_0x11f2b3['toLowerCase']()[_0x18fd07(0xd3)]();if(_0x11f2b3===_0x18fd07(0xacf))return[_0x39ae54];else{if(_0x11f2b3===_0x18fd07(0x9c2))return[_0x112dfb];else{if(_0x11f2b3===_0x18fd07(0x39c)){if(_0x112dfb){const _0x3daeac=_0x33036e['indexOf'](_0x112dfb);return _0x3daeac>=0x0?[_0x33036e[_0x3daeac-0x1]||_0x112dfb]:[_0x112dfb];}}else{if(_0x11f2b3===_0x18fd07(0x6b0)){if(_0x112dfb){const _0x8ed6d=_0x33036e['indexOf'](_0x112dfb);return _0x8ed6d>=0x0?[_0x33036e[_0x8ed6d+0x1]||_0x112dfb]:[_0x112dfb];}}else{if(_0x11f2b3==='all\x20targets')return _0x33036e;else{if(_0x11f2b3==='focus')return[_0x39ae54][_0x18fd07(0x5e0)](_0x33036e);else{if(_0x11f2b3==='not\x20focus')return _0x2a2571[_0x18fd07(0x959)](_0x369735=>_0x369735!==_0x39ae54&&!_0x33036e[_0x18fd07(0x5d8)](_0x369735)&&_0x369735[_0x18fd07(0x250)]());else{if(_0x11f2b3===_0x18fd07(0x609))return[VisuMZ[_0x18fd07(0x122)]()];else{if(_0x11f2b3['match'](/SPECIAL (.*)>/i)){const _0x51539c=String(RegExp['$1'])[_0x18fd07(0x8e9)](',')[_0x18fd07(0x614)](_0x3e1b37=>_0x3e1b37[_0x18fd07(0xd3)]());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x51539c)];}}}}}}}}}if(_0x39ae54){if(_0x11f2b3===_0x18fd07(0x93e))return _0x39ae54['friendsUnit']()['aliveMembers']();else{if(_0x11f2b3===_0x18fd07(0x160))return _0x39ae54[_0x18fd07(0xa4a)]()[_0x18fd07(0x120)]()[_0x18fd07(0x959)](_0x1e5689=>_0x1e5689!==_0x39ae54);else{if(_0x11f2b3==='alive\x20friends\x20not\x20target')return _0x39ae54['friendsUnit']()[_0x18fd07(0x120)]()[_0x18fd07(0x959)](_0xeca262=>_0xeca262!==_0x112dfb);else{if(_0x11f2b3===_0x18fd07(0x109))return _0x39ae54[_0x18fd07(0xa4a)]()[_0x18fd07(0x35f)]();else{if(_0x11f2b3['match'](/FRIEND INDEX (\d+)/i)){const _0x3c9d41=Number(RegExp['$1']);return[_0x39ae54[_0x18fd07(0xa4a)]()[_0x18fd07(0x85a)]()[_0x3c9d41]];}}}}}if(_0x11f2b3===_0x18fd07(0x107))return _0x39ae54['opponentsUnit']()[_0x18fd07(0x120)]();else{if(_0x11f2b3===_0x18fd07(0x60c))return _0x39ae54[_0x18fd07(0xb00)]()['aliveMembers']()['filter'](_0x2e57a0=>_0x2e57a0!==_0x112dfb);else{if(_0x11f2b3===_0x18fd07(0x7dd))return _0x39ae54[_0x18fd07(0xb00)]()['deadMembers']();else{if(_0x11f2b3[_0x18fd07(0xef)](/OPPONENT INDEX (\d+)/i)){const _0x35d726=Number(RegExp['$1']);return[_0x39ae54['opponentsUnit']()[_0x18fd07(0x85a)]()[_0x35d726]];}}}}}if(_0x11f2b3==='alive\x20actors')return $gameParty[_0x18fd07(0x120)]();else{if(_0x11f2b3===_0x18fd07(0xb17))return $gameParty[_0x18fd07(0x120)]()[_0x18fd07(0x959)](_0xde7ddd=>_0xde7ddd!==_0x39ae54);else{if(_0x11f2b3===_0x18fd07(0x2a4))return $gameParty[_0x18fd07(0x120)]()['filter'](_0x331e8a=>_0x331e8a!==_0x112dfb);else{if(_0x11f2b3===_0x18fd07(0x373))return $gameParty[_0x18fd07(0x35f)]();else{if(_0x11f2b3[_0x18fd07(0xef)](/ACTOR INDEX (\d+)/i)){const _0x1c2c01=Number(RegExp['$1']);return[$gameParty['members']()[_0x1c2c01]];}else{if(_0x11f2b3['match'](/ACTOR ID (\d+)/i)){const _0x108a35=Number(RegExp['$1']);return[$gameActors[_0x18fd07(0x70a)](_0x108a35)];}}}}}}if(_0x11f2b3==='alive\x20enemies')return $gameTroop['aliveMembers']();else{if(_0x11f2b3===_0x18fd07(0x162))return $gameTroop[_0x18fd07(0x120)]()[_0x18fd07(0x959)](_0xa8a3d8=>_0xa8a3d8!==_0x39ae54);else{if(_0x11f2b3===_0x18fd07(0x78e))return $gameTroop[_0x18fd07(0x120)]()['filter'](_0x330232=>_0x330232!==_0x112dfb);else{if(_0x11f2b3===_0x18fd07(0x356))return $gameTroop[_0x18fd07(0x35f)]();else{if(_0x11f2b3[_0x18fd07(0xef)](/ENEMY INDEX (\d+)/i)){const _0xa1c26c=Number(RegExp['$1']);return[$gameTroop[_0x18fd07(0x85a)]()[_0xa1c26c]];}else{if(_0x11f2b3[_0x18fd07(0xef)](/ENEMY ID (\d+)/i)){const _0x47c2cc=Number(RegExp['$1']);return $gameTroop[_0x18fd07(0x120)]()[_0x18fd07(0x959)](_0xcf1fd0=>_0xcf1fd0[_0x18fd07(0x2e1)]()===_0x47c2cc);}}}}}}if(_0x11f2b3===_0x18fd07(0x619))return _0x2a2571[_0x18fd07(0x959)](_0x1bb711=>_0x1bb711['isAlive']());else{if(_0x11f2b3===_0x18fd07(0x991))return _0x2a2571[_0x18fd07(0x959)](_0x3d6e9e=>_0x3d6e9e[_0x18fd07(0x946)]()&&_0x3d6e9e!==_0x39ae54);else{if(_0x11f2b3===_0x18fd07(0x274))return _0x2a2571[_0x18fd07(0x959)](_0x85d083=>_0x85d083[_0x18fd07(0x946)]()&&_0x85d083!==_0x112dfb);else{if(_0x11f2b3===_0x18fd07(0xa43))return _0x2a2571['filter'](_0x37c844=>_0x37c844[_0x18fd07(0x69e)]());}}}return[];},VisuMZ[_0xabeb6b(0x122)]=function(){const _0x2b2425=_0xabeb6b;return BattleManager[_0x2b2425(0x84d)];},VisuMZ[_0xabeb6b(0x55d)]=function(_0x2d54c7){const _0x71803f=_0xabeb6b;return BattleManager[_0x71803f(0x84d)];},PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xb4b),_0x599506=>{const _0x516426=_0xabeb6b;if(!SceneManager[_0x516426(0x87a)]())return;VisuMZ[_0x516426(0x410)](_0x599506,_0x599506);const _0x4cf601=$gameTemp[_0x516426(0x653)](),_0x29e807=BattleManager['_action'],_0x5a835d=BattleManager[_0x516426(0x4ee)],_0x20fd68=BattleManager['_allTargets']?BattleManager[_0x516426(0x4fa)][_0x516426(0x4e7)](0x0):[],_0x4cca41=BattleManager['_logWindow'];if(!_0x4cf601||!_0x29e807||!_0x5a835d)return;if(!_0x29e807['item']())return;if(_0x599506[_0x516426(0x2a3)])_0x4cca41[_0x516426(0x25e)](_0x5a835d,_0x29e807[_0x516426(0xb39)]());_0x599506['ApplyImmortal']&&_0x4cca41[_0x516426(0x5cb)](_0x516426(0x68e),_0x5a835d,_0x20fd68,!![]);if(_0x599506[_0x516426(0x9d5)])_0x4cca41[_0x516426(0x5cb)]('performActionStart',_0x5a835d,_0x29e807);if(_0x599506[_0x516426(0xbbb)])_0x4cca41['push']('waitForMovement');if(_0x599506['CastAnimation'])_0x4cca41[_0x516426(0x5cb)](_0x516426(0x8e6),_0x5a835d,_0x29e807);if(_0x599506[_0x516426(0x282)])_0x4cca41[_0x516426(0x5cb)](_0x516426(0x380));_0x4cf601['setWaitMode'](_0x516426(0x555));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xb7e),_0x5f539c=>{const _0x8f2b8e=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x8f2b8e(0x410)](_0x5f539c,_0x5f539c);const _0x48809a=$gameTemp[_0x8f2b8e(0x653)](),_0x50986f=BattleManager[_0x8f2b8e(0x984)],_0x3b09db=BattleManager[_0x8f2b8e(0x4ee)],_0xc29ffc=BattleManager['_allTargets']?BattleManager[_0x8f2b8e(0x4fa)]['slice'](0x0):[],_0x21b0c6=BattleManager[_0x8f2b8e(0x6c2)],_0x189e9f=_0x5f539c[_0x8f2b8e(0x893)]??![];if(!_0x48809a||!_0x50986f||!_0x3b09db)return;if(!_0x50986f[_0x8f2b8e(0xb39)]())return;let _0x11a980=_0x189e9f?_0x21b0c6[_0x8f2b8e(0x6f1)](_0x3b09db):0x1;for(let _0x58b889=0x0;_0x58b889<_0x11a980;_0x58b889++){_0x189e9f&&_0x3b09db['isActor']()&&_0x21b0c6['push'](_0x8f2b8e(0x4dc),_0x3b09db,_0x58b889);if(_0x5f539c['PerformAction'])_0x21b0c6[_0x8f2b8e(0x5cb)](_0x8f2b8e(0x402),_0x3b09db,_0x50986f);if(_0x5f539c[_0x8f2b8e(0x677)]>0x0)_0x21b0c6[_0x8f2b8e(0x5cb)](_0x8f2b8e(0x2c4),_0x5f539c['WaitCount']);if(_0x5f539c[_0x8f2b8e(0xb90)])_0x21b0c6[_0x8f2b8e(0x5cb)]('showAnimation',_0x3b09db,_0xc29ffc,_0x50986f[_0x8f2b8e(0xb39)]()[_0x8f2b8e(0x43e)]);if(_0x5f539c[_0x8f2b8e(0x282)])_0x21b0c6['push'](_0x8f2b8e(0x380));for(const _0x4dfe56 of _0xc29ffc){if(!_0x4dfe56)continue;if(_0x5f539c[_0x8f2b8e(0x481)])_0x21b0c6[_0x8f2b8e(0x5cb)](_0x8f2b8e(0xac6),_0x3b09db,_0x4dfe56);}}_0x189e9f&&_0x3b09db[_0x8f2b8e(0xb6a)]()&&_0x21b0c6[_0x8f2b8e(0x5cb)](_0x8f2b8e(0x7ca),_0x3b09db);if(_0x5f539c['ApplyImmortal'])_0x21b0c6[_0x8f2b8e(0x5cb)]('applyImmortal',_0x3b09db,_0xc29ffc,![]);_0x48809a[_0x8f2b8e(0xa1d)](_0x8f2b8e(0x555));}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x6c5),_0x386c36=>{const _0x49b143=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x386c36,_0x386c36);const _0x5eaa7f=$gameTemp[_0x49b143(0x653)](),_0x20b99d=BattleManager[_0x49b143(0x984)],_0x3cb243=BattleManager['_subject'],_0x314fce=BattleManager[_0x49b143(0x4fa)]?BattleManager[_0x49b143(0x4fa)]['slice'](0x0):[],_0x4b7ff7=BattleManager[_0x49b143(0x6c2)],_0x22d68d=_0x386c36['DualWield']??![];if(!_0x5eaa7f||!_0x20b99d||!_0x3cb243)return;if(!_0x20b99d[_0x49b143(0xb39)]())return;let _0x30faa3=_0x22d68d?_0x4b7ff7['getDualWieldTimes'](_0x3cb243):0x1;for(let _0x1db54f=0x0;_0x1db54f<_0x30faa3;_0x1db54f++){for(const _0x416ae8 of _0x314fce){if(!_0x416ae8)continue;_0x22d68d&&_0x3cb243[_0x49b143(0xb6a)]()&&_0x4b7ff7['push'](_0x49b143(0x4dc),_0x3cb243,_0x1db54f);if(_0x386c36['PerformAction'])_0x4b7ff7[_0x49b143(0x5cb)](_0x49b143(0x402),_0x3cb243,_0x20b99d);if(_0x386c36[_0x49b143(0xbbe)]>0x0)_0x4b7ff7[_0x49b143(0x5cb)](_0x49b143(0x2c4),_0x386c36['WaitCount1']);if(_0x386c36[_0x49b143(0xb90)])_0x4b7ff7['push'](_0x49b143(0x8f6),_0x3cb243,[_0x416ae8],_0x20b99d[_0x49b143(0xb39)]()[_0x49b143(0x43e)]);if(_0x386c36['WaitCount2']>0x0)_0x4b7ff7['push'](_0x49b143(0x2c4),_0x386c36['WaitCount2']);if(_0x386c36['ActionEffect'])_0x4b7ff7[_0x49b143(0x5cb)](_0x49b143(0xac6),_0x3cb243,_0x416ae8);}}_0x22d68d&&_0x3cb243['isActor']()&&_0x4b7ff7[_0x49b143(0x5cb)]('clearActiveWeaponSet',_0x3cb243);if(_0x386c36[_0x49b143(0x964)])_0x4b7ff7[_0x49b143(0x5cb)](_0x49b143(0x68e),_0x3cb243,_0x314fce,![]);_0x5eaa7f[_0x49b143(0xa1d)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Set_FinishAction',_0x11ab9f=>{const _0x27836a=_0xabeb6b;if(!SceneManager[_0x27836a(0x87a)]())return;VisuMZ[_0x27836a(0x410)](_0x11ab9f,_0x11ab9f);const _0x22c5e1=$gameTemp[_0x27836a(0x653)](),_0x5db7f7=BattleManager[_0x27836a(0x984)],_0x4b0bf4=BattleManager[_0x27836a(0x4ee)],_0x1c8453=BattleManager[_0x27836a(0x4fa)]?BattleManager['_allTargets'][_0x27836a(0x4e7)](0x0):[],_0x5d21a7=BattleManager[_0x27836a(0x6c2)];if(!_0x22c5e1||!_0x5db7f7||!_0x4b0bf4)return;if(!_0x5db7f7[_0x27836a(0xb39)]())return;if(_0x11ab9f['ApplyImmortal'])_0x5d21a7[_0x27836a(0x5cb)]('applyImmortal',_0x4b0bf4,_0x1c8453,![]);if(_0x11ab9f['WaitForNewLine'])_0x5d21a7[_0x27836a(0x5cb)](_0x27836a(0x2bb));if(_0x11ab9f[_0x27836a(0x811)])_0x5d21a7[_0x27836a(0x5cb)](_0x27836a(0x328));if(_0x11ab9f[_0x27836a(0xa7d)])_0x5d21a7[_0x27836a(0x5cb)](_0x27836a(0x500));if(_0x11ab9f[_0x27836a(0xbae)])_0x5d21a7['push']('performActionEnd',_0x4b0bf4);if(_0x11ab9f[_0x27836a(0xbbb)])_0x5d21a7['push'](_0x27836a(0x19d));_0x22c5e1[_0x27836a(0xa1d)](_0x27836a(0x555));}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xaa4),_0x1c30f4=>{const _0x10972f=_0xabeb6b;if(!SceneManager[_0x10972f(0x87a)]())return;if(!Imported[_0x10972f(0x510)])return;VisuMZ[_0x10972f(0x410)](_0x1c30f4,_0x1c30f4);const _0x4d2b47=$gameTemp['getLastPluginCommandInterpreter'](),_0x7783d3=_0x1c30f4[_0x10972f(0x844)];if(!_0x4d2b47)return;$gameScreen['setBattleAngle'](_0x1c30f4[_0x10972f(0xb26)],_0x1c30f4['Duration'],_0x1c30f4[_0x10972f(0x93d)]);if(_0x7783d3)_0x4d2b47[_0x10972f(0xa1d)](_0x10972f(0x568));}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x114),_0x134c21=>{const _0x1d89d6=_0xabeb6b;if(!SceneManager[_0x1d89d6(0x87a)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1d89d6(0x410)](_0x134c21,_0x134c21);const _0x29111a=$gameTemp[_0x1d89d6(0x653)](),_0x434cea=_0x134c21[_0x1d89d6(0x844)];if(!_0x29111a)return;$gameScreen[_0x1d89d6(0x17f)](0x0,_0x134c21[_0x1d89d6(0xa45)],_0x134c21['EasingType']);if(_0x434cea)_0x29111a[_0x1d89d6(0xa1d)](_0x1d89d6(0x568));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x327),_0x16c23e=>{const _0x29919c=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0xcbb758=$gameTemp[_0x29919c(0x653)]();if(!_0xcbb758)return;_0xcbb758[_0x29919c(0xa1d)](_0x29919c(0x568));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x118),_0x5ba526=>{const _0x441315=_0xabeb6b;if(!SceneManager[_0x441315(0x87a)]())return;VisuMZ[_0x441315(0x410)](_0x5ba526,_0x5ba526);const _0x3ebfcc=$gameTemp['getLastPluginCommandInterpreter'](),_0x56e430=BattleManager['_action'],_0x1b2ffa=BattleManager['_subject'],_0x487daf=VisuMZ['CreateActionSequenceTargets'](_0x5ba526[_0x441315(0x78b)]),_0x179fd0=_0x5ba526['Mirror'],_0x2c06e6=BattleManager[_0x441315(0x6c2)];if(!_0x3ebfcc||!_0x56e430||!_0x1b2ffa)return;if(!_0x56e430['item']())return;let _0xf19d71=_0x56e430[_0x441315(0xb39)]()['animationId'];if(_0xf19d71<0x0)_0xf19d71=_0x1b2ffa[_0x441315(0xbc9)]();$gameTemp[_0x441315(0x6d5)](_0x487daf,_0xf19d71,_0x179fd0),_0x5ba526[_0x441315(0x282)]&&_0x3ebfcc[_0x441315(0xa1d)]('battleAnimation');}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0xab9),_0x57e786=>{const _0x291d36=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x291d36(0x410)](_0x57e786,_0x57e786);const _0x4777d4=$gameTemp['getLastPluginCommandInterpreter'](),_0x130be3=BattleManager[_0x291d36(0x4ee)],_0x769a5=VisuMZ[_0x291d36(0x6b6)](_0x57e786[_0x291d36(0x78b)]),_0x50578a=_0x57e786[_0x291d36(0x65d)],_0x1fbdf8=BattleManager['_logWindow'];if(!_0x4777d4||!_0x130be3)return;const _0x39de75=_0x130be3[_0x291d36(0xbc9)]();$gameTemp[_0x291d36(0x6d5)](_0x769a5,_0x39de75,_0x50578a),_0x57e786[_0x291d36(0x282)]&&_0x4777d4[_0x291d36(0xa1d)]('battleAnimation');}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Animation_AttackAnimation2',_0x3f26e7=>{const _0x369dc3=_0xabeb6b;if(!SceneManager[_0x369dc3(0x87a)]())return;VisuMZ[_0x369dc3(0x410)](_0x3f26e7,_0x3f26e7);const _0x415de8=_0x300973[_0x369dc3(0x8f5)](_0x3f26e7['Slot']);if(_0x415de8<=0x0)return;const _0x148f98=$gameTemp[_0x369dc3(0x653)](),_0x300973=BattleManager[_0x369dc3(0x4ee)],_0x4dbda8=VisuMZ[_0x369dc3(0x6b6)](_0x3f26e7[_0x369dc3(0x78b)]),_0x4f380d=_0x3f26e7[_0x369dc3(0x65d)],_0x538ad5=BattleManager[_0x369dc3(0x6c2)];if(!_0x148f98||!_0x300973)return;$gameTemp['requestAnimation'](_0x4dbda8,_0x415de8,_0x4f380d),_0x3f26e7[_0x369dc3(0x282)]&&_0x148f98[_0x369dc3(0xa1d)](_0x369dc3(0x5f9));}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x415),_0x394e1f=>{const _0x3e5429=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3e5429(0x410)](_0x394e1f,_0x394e1f);const _0x45e82f=$gameTemp['getLastPluginCommandInterpreter'](),_0x56952d=VisuMZ[_0x3e5429(0x6b6)](_0x394e1f['Targets']),_0x583305=_0x394e1f['Balloon'];let _0x1f47f9=0x0;switch(_0x583305[_0x3e5429(0xf8)]()[_0x3e5429(0xd3)]()){case'!':case _0x3e5429(0x259):_0x1f47f9=0x1;break;case'?':case _0x3e5429(0x46b):_0x1f47f9=0x2;break;case'MUSIC':case _0x3e5429(0x3af):case'MUSIC\x20NOTE':case'MUSIC-NOTE':case _0x3e5429(0x249):_0x1f47f9=0x3;break;case _0x3e5429(0x9db):case'LOVE':_0x1f47f9=0x4;break;case _0x3e5429(0x4c2):case'ANGER':_0x1f47f9=0x5;break;case _0x3e5429(0x59b):_0x1f47f9=0x6;break;case _0x3e5429(0xb77):case _0x3e5429(0x9a7):case _0x3e5429(0x133):_0x1f47f9=0x7;break;case'SILENCE':case'...':_0x1f47f9=0x8;break;case _0x3e5429(0xac9):case _0x3e5429(0x47e):case _0x3e5429(0x315):case _0x3e5429(0x102):case'LIGHTBULB':_0x1f47f9=0x9;break;case'Z':case'ZZ':case _0x3e5429(0x96e):case'SLEEP':_0x1f47f9=0xa;break;case _0x3e5429(0xee):_0x1f47f9=0xb;break;case _0x3e5429(0x6f0):_0x1f47f9=0xc;break;case _0x3e5429(0x8e4):_0x1f47f9=0xd;break;case'USER-DEFINED\x204':_0x1f47f9=0xe;break;case _0x3e5429(0x579):_0x1f47f9=0xf;break;}for(const _0xa702a6 of _0x56952d){if(!_0xa702a6)continue;$gameTemp['requestBattleBalloon'](_0xa702a6,_0x1f47f9);}_0x394e1f[_0x3e5429(0x77b)]&&_0x45e82f&&(_0x45e82f[_0x3e5429(0x269)](0x1),_0x45e82f['setWaitMode'](_0x3e5429(0x836)));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x77c),_0x472186=>{const _0x148503=_0xabeb6b;if(!SceneManager[_0x148503(0x87a)]())return;if(!Imported[_0x148503(0x81d)])return;VisuMZ[_0x148503(0x410)](_0x472186,_0x472186);const _0x271dd9=$gameTemp[_0x148503(0x653)](),_0x4a42de=VisuMZ[_0x148503(0x6b6)](_0x472186[_0x148503(0x78b)]),_0x586857=_0x472186['IconIndex'];for(const _0xe7bfe9 of _0x4a42de){if(!_0xe7bfe9)continue;$gameTemp[_0x148503(0x7b9)](_0xe7bfe9,[_0x586857]);}_0x472186[_0x148503(0x77b)]&&_0x271dd9&&(_0x271dd9['wait'](0x1),_0x271dd9[_0x148503(0xa1d)](_0x148503(0x836)));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Animation_BalloonIconRange',_0x5eb149=>{const _0x4b2d58=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4b2d58(0x81d)])return;VisuMZ[_0x4b2d58(0x410)](_0x5eb149,_0x5eb149);const _0x1102e3=$gameTemp[_0x4b2d58(0x653)](),_0x269ad5=VisuMZ[_0x4b2d58(0x6b6)](_0x5eb149['Targets']),_0x5ec71b=Math[_0x4b2d58(0x1be)](Number(_0x5eb149[_0x4b2d58(0x3a8)]||0x0),Number(_0x5eb149['endIcon']||0x0)),_0x669d37=Math['max'](Number(_0x5eb149['startIcon']||0x0),Number(_0x5eb149['endIcon']||0x0)),_0x334b71=[];for(let _0x4c1981=_0x5ec71b;_0x4c1981<=_0x669d37;_0x4c1981++){_0x334b71[_0x4b2d58(0x5cb)](_0x4c1981);}for(const _0x1c6d81 of _0x269ad5){if(!_0x1c6d81)continue;$gameTemp['requestBattleBalloon'](_0x1c6d81,_0x334b71);}_0x5eb149[_0x4b2d58(0x77b)]&&_0x1102e3&&(_0x1102e3['wait'](0x1),_0x1102e3[_0x4b2d58(0xa1d)](_0x4b2d58(0x836)));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x287),_0x27ad52=>{const _0x25782f=_0xabeb6b;if(!SceneManager[_0x25782f(0x87a)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ[_0x25782f(0x410)](_0x27ad52,_0x27ad52);const _0xf1e4fd=$gameTemp[_0x25782f(0x653)](),_0x340046=VisuMZ[_0x25782f(0x6b6)](_0x27ad52[_0x25782f(0x78b)]),_0x5a4d6e=_0x27ad52[_0x25782f(0x53c)];for(const _0x43d9ac of _0x340046){if(!_0x43d9ac)continue;$gameTemp[_0x25782f(0x7b9)](_0x43d9ac,_0x5a4d6e);}_0x27ad52[_0x25782f(0x77b)]&&_0xf1e4fd&&(_0xf1e4fd[_0x25782f(0x269)](0x1),_0xf1e4fd[_0x25782f(0xa1d)]('battleBalloon'));}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xa1b),_0x3ca46d=>{const _0x4f06a3=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4f06a3(0x410)](_0x3ca46d,_0x3ca46d);const _0x3b620f=$gameTemp['getLastPluginCommandInterpreter'](),_0x47e7c8=BattleManager[_0x4f06a3(0x984)],_0x3721b2=_0x3ca46d[_0x4f06a3(0x65d)],_0x426a0b=VisuMZ[_0x4f06a3(0x6b6)](_0x3ca46d[_0x4f06a3(0x78b)]);if(!_0x3b620f||!_0x47e7c8)return;if(!_0x47e7c8['item']())return;for(const _0x57ecb9 of _0x426a0b){if(!_0x57ecb9)continue;_0x57ecb9[_0x4f06a3(0x8e6)](_0x47e7c8,_0x3721b2);}if(_0x3ca46d[_0x4f06a3(0x282)])_0x3b620f['setWaitMode'](_0x4f06a3(0x5f9));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x18c),_0x3ffd94=>{const _0x2e1d8e=_0xabeb6b;VisuMZ[_0x2e1d8e(0x410)](_0x3ffd94,_0x3ffd94);const _0x1f5fa7=$gameTemp['getLastPluginCommandInterpreter'](),_0x151434=VisuMZ['CreateActionSequenceTargets'](_0x3ffd94['Targets']),_0x2793ef=_0x3ffd94[_0x2e1d8e(0x7c6)];if(!_0x2793ef)return;for(const _0x4afa0c of _0x151434){if(!_0x4afa0c)continue;if(!_0x4afa0c[_0x2e1d8e(0xb6a)]())continue;_0x4afa0c[_0x2e1d8e(0x3fa)](_0x2793ef);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Animation_ChangeBattlePortrait_JS',_0x1ac378=>{const _0x244bef=_0xabeb6b;VisuMZ[_0x244bef(0x410)](_0x1ac378,_0x1ac378);const _0x593cb6=_0x1ac378['ActorJS'](),_0x1a8093=$gameActors[_0x244bef(0x70a)](_0x593cb6)||null;if(!_0x1a8093){console[_0x244bef(0x339)](_0x244bef(0x951));return;}const _0xfeac67=_0x1ac378['FilenameJS']();_0x1a8093[_0x244bef(0x3fa)](_0xfeac67);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x8ff),_0xd3c1f0=>{const _0x3860be=_0xabeb6b;if(!SceneManager[_0x3860be(0x87a)]())return;VisuMZ['ConvertParams'](_0xd3c1f0,_0xd3c1f0);const _0x41444e=$gameTemp['getLastPluginCommandInterpreter'](),_0x359635=BattleManager[_0x3860be(0x4ee)],_0x7d518f=VisuMZ[_0x3860be(0x6b6)](_0xd3c1f0[_0x3860be(0x78b)]),_0x496ee4=_0xd3c1f0[_0x3860be(0x65d)];if(!_0x41444e||!_0x359635)return;const _0x7ceb76=$dataSkilles[_0x359635[_0x3860be(0x3de)]()],_0x20847e=_0x7ceb76[_0x3860be(0x43e)];$gameTemp['requestAnimation'](_0x7d518f,_0x20847e,_0x496ee4),_0xd3c1f0[_0x3860be(0x282)]&&_0x41444e['setWaitMode'](_0x3860be(0x5f9));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Animation_ItemAnimation',_0x28880e=>{const _0x319d68=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x319d68(0x410)](_0x28880e,_0x28880e);const _0x2cedea=$gameTemp[_0x319d68(0x653)](),_0x5d5ce5=VisuMZ[_0x319d68(0x6b6)](_0x28880e[_0x319d68(0x78b)]),_0x47aa6d=Number(_0x28880e[_0x319d68(0xbb6)]||0x1),_0x4f5c2d=$dataItems[_0x47aa6d],_0x1dfb23=_0x28880e[_0x319d68(0x65d)];if(!_0x2cedea)return;if(!_0x4f5c2d)return;let _0x47d984=_0x4f5c2d[_0x319d68(0x43e)];$gameTemp[_0x319d68(0x6d5)](_0x5d5ce5,_0x47d984,_0x1dfb23),_0x28880e[_0x319d68(0x282)]&&_0x2cedea[_0x319d68(0xa1d)](_0x319d68(0x5f9));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Animation_PlayAtCoordinate',_0x480a56=>{const _0x55a57e=_0xabeb6b;if(!SceneManager[_0x55a57e(0x483)])return;if(!SceneManager['_scene'][_0x55a57e(0x754)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x55a57e(0x410)](_0x480a56,_0x480a56);const _0x4014c5=$gameTemp['getLastPluginCommandInterpreter'](),_0x3a91c7=Math[_0x55a57e(0xb36)](_0x480a56[_0x55a57e(0x57d)]),_0x4e8527=Math[_0x55a57e(0xb36)](_0x480a56[_0x55a57e(0xa57)]);$gameTemp[_0x55a57e(0x602)](_0x3a91c7,_0x4e8527,_0x480a56['AnimationID'],_0x480a56[_0x55a57e(0x65d)],_0x480a56[_0x55a57e(0x48b)]),_0x480a56[_0x55a57e(0x77b)]&&_0x4014c5&&(SceneManager[_0x55a57e(0x483)][_0x55a57e(0x754)]['updatePointAnimations'](),_0x4014c5['setWaitMode']('battleAnimation'));}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x61d),_0x245a67=>{const _0x23e75f=_0xabeb6b;if(!SceneManager[_0x23e75f(0x87a)]())return;VisuMZ[_0x23e75f(0x410)](_0x245a67,_0x245a67);const _0x3915e4=$gameTemp[_0x23e75f(0x653)](),_0x2a9b94=VisuMZ[_0x23e75f(0x6b6)](_0x245a67[_0x23e75f(0x78b)]),_0x248ff8=_0x245a67[_0x23e75f(0x6af)],_0x94202c=_0x245a67['Mirror'];if(!_0x3915e4)return;$gameTemp['requestAnimation'](_0x2a9b94,_0x248ff8,_0x94202c);if(_0x245a67[_0x23e75f(0x282)])_0x3915e4[_0x23e75f(0xa1d)](_0x23e75f(0x5f9));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xa8b),_0xe6bbde=>{const _0x2671fd=_0xabeb6b;if(!SceneManager[_0x2671fd(0x87a)]())return;VisuMZ['ConvertParams'](_0xe6bbde,_0xe6bbde);const _0x4e3dc9=$gameTemp['getLastPluginCommandInterpreter'](),_0x27fe7d=VisuMZ[_0x2671fd(0x6b6)](_0xe6bbde[_0x2671fd(0x78b)]),_0x441ac4=Number(_0xe6bbde[_0x2671fd(0x6af)])||0x1,_0x2245a1=_0xe6bbde['Mirror'];if(!_0x4e3dc9)return;$gameTemp[_0x2671fd(0x6d5)](_0x27fe7d,_0x441ac4,_0x2245a1);if(_0xe6bbde[_0x2671fd(0x282)])_0x4e3dc9['setWaitMode'](_0x2671fd(0x5f9));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Animation_SkillAnimation',_0x253eb9=>{const _0x63a9f2=_0xabeb6b;if(!SceneManager[_0x63a9f2(0x87a)]())return;VisuMZ[_0x63a9f2(0x410)](_0x253eb9,_0x253eb9);const _0x2308d5=$gameTemp[_0x63a9f2(0x653)](),_0x957c8a=VisuMZ['CreateActionSequenceTargets'](_0x253eb9[_0x63a9f2(0x78b)]),_0x1b15a9=Number(_0x253eb9[_0x63a9f2(0x663)]||0x1),_0x44e909=$dataSkills[_0x1b15a9],_0x231329=_0x253eb9[_0x63a9f2(0x65d)];if(!_0x2308d5)return;if(!_0x44e909)return;let _0x4ae2ca=_0x44e909[_0x63a9f2(0x43e)];$gameTemp[_0x63a9f2(0x6d5)](_0x957c8a,_0x4ae2ca,_0x231329),_0x253eb9[_0x63a9f2(0x282)]&&_0x2308d5[_0x63a9f2(0xa1d)]('battleAnimation');}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xb8b),_0x573c35=>{const _0xb56454=_0xabeb6b;if(!SceneManager[_0xb56454(0x87a)]())return;const _0x361292=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x361292)return;_0x361292['setWaitMode'](_0xb56454(0x5f9));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x40c),_0x580391=>{const _0x2bc9b5=_0xabeb6b;if(!SceneManager[_0x2bc9b5(0x87a)]())return;VisuMZ[_0x2bc9b5(0x410)](_0x580391,_0x580391);const _0x10fb89=BattleManager[_0x2bc9b5(0x6c2)],_0x497e86=_0x580391[_0x2bc9b5(0x76a)]&&Imported[_0x2bc9b5(0x8a2)];_0x10fb89[_0x2bc9b5(0x8dc)](_0x580391[_0x2bc9b5(0x494)]),_0x497e86&&Imported[_0x2bc9b5(0x8a2)]&&$gameSystem['addTextToCombatLog'](_0x580391[_0x2bc9b5(0x494)]||'',_0x580391[_0x2bc9b5(0x15f)]||0x0);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xbca),_0x1b0015=>{const _0x4c574f=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;const _0x133cbc=BattleManager[_0x4c574f(0x6c2)];_0x133cbc[_0x4c574f(0x500)]();}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x703),_0x15f21e=>{const _0x17524a=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;const _0x30aebb=$gameTemp[_0x17524a(0x653)](),_0xf37c7c=BattleManager[_0x17524a(0x984)],_0x449d91=BattleManager[_0x17524a(0x4ee)],_0x4f43f1=BattleManager[_0x17524a(0x6c2)];if(!_0x30aebb||!_0xf37c7c||!_0x449d91)return;if(!_0xf37c7c['item']())return;_0x4f43f1[_0x17524a(0x25e)](_0x449d91,_0xf37c7c[_0x17524a(0xb39)]()),_0x30aebb[_0x17524a(0xa1d)](_0x17524a(0x555));}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x3d1),_0x16ed7f=>{const _0x16a8a5=_0xabeb6b;if(!SceneManager[_0x16a8a5(0x87a)]())return;const _0x121565=BattleManager[_0x16a8a5(0x6c2)];_0x121565[_0x16a8a5(0x9ba)]();}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x5e6),_0x5cf4b7=>{const _0x573639=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;const _0x558eab=BattleManager['_logWindow'];_0x558eab[_0x573639(0x404)]();}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x2bf),_0x56262b=>{const _0x525d14=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;const _0x424eb9=BattleManager[_0x525d14(0x6c2)];_0x424eb9[_0x525d14(0x9f5)]();}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],'ActSeq_BattleLog_UI',_0x17624c=>{const _0xe073d1=_0xabeb6b;if(!SceneManager[_0xe073d1(0x87a)]())return;VisuMZ[_0xe073d1(0x410)](_0x17624c,_0x17624c),SceneManager[_0xe073d1(0x483)][_0xe073d1(0x2b2)](_0x17624c[_0xe073d1(0x398)]);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x111),_0xa0a0ca=>{const _0x39d926=_0xabeb6b;if(!SceneManager[_0x39d926(0x87a)]())return;const _0x18497f=$gameTemp[_0x39d926(0x653)]();_0x18497f[_0x39d926(0xa1d)](_0x39d926(0x555));}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],'ActSeq_BattleLog_WaitForNewLine',_0x101856=>{const _0x13e48e=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;const _0x8c7824=$gameTemp[_0x13e48e(0x653)](),_0x16662d=BattleManager['_logWindow'];_0x16662d[_0x13e48e(0x2bb)](),_0x8c7824[_0x13e48e(0xa1d)](_0x13e48e(0x555));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xa86),_0x25d2e2=>{const _0x1194c7=_0xabeb6b;if(!SceneManager[_0x1194c7(0x87a)]())return;if(!Imported[_0x1194c7(0x510)])return;VisuMZ[_0x1194c7(0x410)](_0x25d2e2,_0x25d2e2);const _0x446468=$gameScreen['battleCameraData']();_0x446468[_0x1194c7(0x8a3)]=_0x25d2e2[_0x1194c7(0xbb4)];}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Camera_FocusPoint',_0x58db59=>{const _0xc1f55f=_0xabeb6b;if(!SceneManager[_0xc1f55f(0x87a)]())return;if(!Imported[_0xc1f55f(0x510)])return;VisuMZ[_0xc1f55f(0x410)](_0x58db59,_0x58db59);const _0x5b9870=$gameTemp['getLastPluginCommandInterpreter'](),_0x245d27=_0x58db59['WaitForCamera'];$gameScreen[_0xc1f55f(0xafd)](_0x58db59[_0xc1f55f(0x796)],_0x58db59[_0xc1f55f(0x246)],_0x58db59['Duration'],_0x58db59[_0xc1f55f(0x93d)]);if(_0x245d27)_0x5b9870[_0xc1f55f(0xa1d)](_0xc1f55f(0x750));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Camera_FocusTarget',_0x28dc23=>{const _0x4cac88=_0xabeb6b;if(!SceneManager[_0x4cac88(0x87a)]())return;if(!Imported[_0x4cac88(0x510)])return;VisuMZ[_0x4cac88(0x410)](_0x28dc23,_0x28dc23);const _0x1bb129=$gameTemp[_0x4cac88(0x653)](),_0x1f3c79=VisuMZ[_0x4cac88(0x6b6)](_0x28dc23['Targets']),_0x3a5404=_0x28dc23[_0x4cac88(0xbd8)];$gameScreen['setBattleCameraTargets'](_0x1f3c79,_0x28dc23['Duration'],_0x28dc23[_0x4cac88(0x93d)]);if(_0x3a5404)_0x1bb129['setWaitMode'](_0x4cac88(0x750));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x3bb),_0x726a09=>{const _0xc49103=_0xabeb6b;if(!SceneManager[_0xc49103(0x87a)]())return;if(!Imported[_0xc49103(0x510)])return;VisuMZ[_0xc49103(0x410)](_0x726a09,_0x726a09);const _0x2d74a5=$gameTemp[_0xc49103(0x653)](),_0x585a39=_0x726a09['WaitForCamera'];$gameScreen[_0xc49103(0x45e)](_0x726a09['OffsetX'],_0x726a09[_0xc49103(0x8f0)],_0x726a09[_0xc49103(0xa45)],_0x726a09[_0xc49103(0x93d)]);if(_0x585a39)_0x2d74a5[_0xc49103(0xa1d)](_0xc49103(0x750));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xa8f),_0x5ca861=>{const _0x4031e7=_0xabeb6b;if(!SceneManager[_0x4031e7(0x87a)]())return;if(!Imported[_0x4031e7(0x510)])return;VisuMZ[_0x4031e7(0x410)](_0x5ca861,_0x5ca861);const _0x3d2161=$gameTemp[_0x4031e7(0x653)](),_0x1d43cb=_0x5ca861['ResetFocus'],_0x2c700e=_0x5ca861[_0x4031e7(0x533)],_0xe1f81=_0x5ca861[_0x4031e7(0xbd8)];if(_0x1d43cb){const _0x5d4009=Math[_0x4031e7(0xb36)](Graphics[_0x4031e7(0x461)]/0x2),_0x13c263=Math[_0x4031e7(0xb36)](Graphics[_0x4031e7(0x1ee)]/0x2);$gameScreen[_0x4031e7(0xafd)](_0x5d4009,_0x13c263,_0x5ca861[_0x4031e7(0xa45)],_0x5ca861[_0x4031e7(0x93d)]);}_0x2c700e&&$gameScreen[_0x4031e7(0x45e)](0x0,0x0,_0x5ca861[_0x4031e7(0xa45)],_0x5ca861[_0x4031e7(0x93d)]);if(_0xe1f81)_0x3d2161[_0x4031e7(0xa1d)](_0x4031e7(0x750));}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],'ActSeq_Camera_WaitForCamera',_0x5c861c=>{const _0x476f3f=_0xabeb6b;if(!SceneManager[_0x476f3f(0x87a)]())return;if(!Imported[_0x476f3f(0x510)])return;const _0x128ec7=$gameTemp[_0x476f3f(0x653)]();if(!_0x128ec7)return;_0x128ec7['setWaitMode'](_0x476f3f(0x750));}),VisuMZ[_0xabeb6b(0x553)]['CreateCutinSettings']=function(_0x1a59b9){const _0x56bcfe=_0xabeb6b;_0x1a59b9[_0x56bcfe(0x54e)]='';const _0x47293c=VisuMZ[_0x56bcfe(0xba7)]['CreateCutinSettings'](_0x1a59b9),_0x100952=VisuMZ[_0x56bcfe(0x6b6)](_0x1a59b9['Targets'])[0x0]||null;return _0x100952&&(_0x47293c[_0x56bcfe(0x54e)]=_0x100952[_0x56bcfe(0xb6e)](),_0x47293c['portraitIndex']=_0x100952['visualCutinPortraitIndex'](),_0x47293c[_0x56bcfe(0x7c0)]=_0x100952[_0x56bcfe(0x489)](),_0x47293c[_0x56bcfe(0x727)]=_0x100952[_0x56bcfe(0x5f3)](),_0x100952['isEnemy']()&&(_0x100952['flipVisualCutinHorz']()&&(_0x47293c[_0x56bcfe(0x286)]=!_0x47293c['portraitFlipHorz']),_0x100952[_0x56bcfe(0xb01)]()&&(_0x47293c[_0x56bcfe(0x973)]=!_0x47293c['portraitFlipVert']),_0x47293c[_0x56bcfe(0x727)]===_0x56bcfe(0x423)&&(_0x47293c['portraitFlipHorz']=!_0x47293c['portraitFlipHorz']),_0x1a59b9[_0x56bcfe(0x1d8)][_0x56bcfe(0x607)]&&(_0x47293c[_0x56bcfe(0x141)]*=-0x1),_0x1a59b9[_0x56bcfe(0x1d8)]['parallaxScrollYinvertEnemy']&&(_0x47293c[_0x56bcfe(0x969)]*=-0x1),_0x47293c[_0x56bcfe(0xa99)]+=_0x1a59b9['ExtraSettings'][_0x56bcfe(0x705)]??0x0)),_0x47293c;},PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Cutin_AddVisualCutinEffect',_0x524a6d=>{const _0x50a8cc=_0xabeb6b;if(!SceneManager[_0x50a8cc(0x87a)]())return;if(!Imported[_0x50a8cc(0x8a0)])return;VisuMZ[_0x50a8cc(0x410)](_0x524a6d,_0x524a6d);const _0x396929=VisuMZ[_0x50a8cc(0x553)][_0x50a8cc(0x1b8)](_0x524a6d);SceneManager[_0x50a8cc(0x483)][_0x50a8cc(0x4db)](_0x396929);const _0x28d3c0=$gameTemp['getLastPluginCommandInterpreter']();_0x28d3c0&&_0x524a6d[_0x50a8cc(0xa01)]&&_0x28d3c0[_0x50a8cc(0xa1d)](_0x50a8cc(0x73e));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Cutin_EndVisualCutinEffectAll',_0x1f01b1=>{const _0xcf6b53=_0xabeb6b;if(!SceneManager[_0xcf6b53(0x87a)]())return;if(!Imported[_0xcf6b53(0x8a0)])return;VisuMZ['ConvertParams'](_0x1f01b1,_0x1f01b1),SceneManager[_0xcf6b53(0x483)][_0xcf6b53(0x38d)]();const _0x1a57ba=$gameTemp[_0xcf6b53(0x653)]();_0x1a57ba&&_0x1f01b1[_0xcf6b53(0x229)]&&_0x1a57ba[_0xcf6b53(0xa1d)](_0xcf6b53(0xbc6));}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x1f8),_0x2c4b39=>{const _0x24f08e=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x24f08e(0x8a0)])return;VisuMZ[_0x24f08e(0x410)](_0x2c4b39,_0x2c4b39);const _0x1f6819=_0x2c4b39[_0x24f08e(0x2f9)][_0x24f08e(0xa5b)]()[_0x24f08e(0xd3)]();SceneManager[_0x24f08e(0x483)][_0x24f08e(0x22a)](_0x1f6819);const _0x1b0a96=$gameTemp[_0x24f08e(0x653)]();_0x1b0a96&&_0x2c4b39[_0x24f08e(0x229)]&&_0x1b0a96[_0x24f08e(0xa1d)](_0x24f08e(0xbc6));}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x8ac),_0x8733d1=>{const _0x15eb65=_0xabeb6b;if(!SceneManager[_0x15eb65(0x87a)]())return;if(!Imported[_0x15eb65(0x8a0)])return;const _0x1caa6d=$gameTemp['getLastPluginCommandInterpreter']();_0x1caa6d['setWaitMode'](_0x15eb65(0x73e));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Cutin_WaitForExit',_0x51be71=>{const _0x5e9c67=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x2bb709=$gameTemp[_0x5e9c67(0x653)]();_0x2bb709[_0x5e9c67(0xa1d)](_0x5e9c67(0xbc6));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x71c),_0x161562=>{const _0x3179a7=_0xabeb6b;if(!SceneManager[_0x3179a7(0x87a)]())return;if(!Imported[_0x3179a7(0x6bb)])return;VisuMZ[_0x3179a7(0x410)](_0x161562,_0x161562);const _0x44ac58=VisuMZ[_0x3179a7(0x6b6)](_0x161562[_0x3179a7(0x78b)]),_0x3de13c=_0x161562[_0x3179a7(0x4b6)][_0x3179a7(0xa5b)]()[_0x3179a7(0xd3)]();for(const _0x26fb9c of _0x44ac58){if(!_0x26fb9c)continue;_0x26fb9c[_0x3179a7(0x5c4)](_0x3de13c);}}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xb7d),_0x1e9159=>{const _0x48f5fb=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ['ConvertParams'](_0x1e9159,_0x1e9159);const _0x1fb952=VisuMZ[_0x48f5fb(0x6b6)](_0x1e9159[_0x48f5fb(0x78b)]),_0xbcf481=_0x1e9159[_0x48f5fb(0x97c)];for(const _0x2a6628 of _0x1fb952){if(!_0x2a6628)continue;_0x2a6628[_0x48f5fb(0x762)]()[_0x48f5fb(0x2d4)]=_0xbcf481;}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x374),_0x56cb6b=>{const _0x2dffd1=_0xabeb6b;if(!SceneManager[_0x2dffd1(0x87a)]())return;if(!Imported[_0x2dffd1(0x12c)])return;VisuMZ[_0x2dffd1(0x410)](_0x56cb6b,_0x56cb6b);const _0x4fa53c=BattleManager[_0x2dffd1(0x984)],_0x3b82f0=_0x56cb6b[_0x2dffd1(0x243)];if(!_0x4fa53c)return;_0x4fa53c[_0x2dffd1(0x284)]=_0x3b82f0;}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Element_Clear',_0x1fb9a9=>{const _0x8f5b7=_0xabeb6b;if(!SceneManager[_0x8f5b7(0x87a)]())return;if(!Imported[_0x8f5b7(0x12c)])return;const _0x44d2fc=BattleManager[_0x8f5b7(0x984)];if(!_0x44d2fc)return;_0x44d2fc['clearElementChanges']();}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x63b),_0x59feb9=>{const _0x55bd71=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ['ConvertParams'](_0x59feb9,_0x59feb9);const _0x1c8542=BattleManager[_0x55bd71(0x984)],_0x173c09=_0x59feb9['Elements'];if(!_0x1c8542)return;_0x1c8542['_battleCoreForcedElements']=_0x173c09;}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Element_NullElements',_0xab8a2d=>{const _0x4a8f80=_0xabeb6b;if(!SceneManager[_0x4a8f80(0x87a)]())return;if(!Imported[_0x4a8f80(0x12c)])return;const _0x2e2d79=BattleManager[_0x4a8f80(0x984)];if(!_0x2e2d79)return;_0x2e2d79[_0x4a8f80(0xa3e)]=!![];}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Grid_ActionAnimationAtNode',_0x3c32ee=>{const _0x1b92d4=_0xabeb6b;VisuMZ['BattleGridSystem'][_0x1b92d4(0x4f6)](_0x3c32ee);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x8c0),_0x155cef=>{const _0x561607=_0xabeb6b;VisuMZ[_0x561607(0x523)][_0x561607(0x8c0)](_0x155cef);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x278),_0x14c31e=>{const _0x5e2afd=_0xabeb6b;VisuMZ[_0x5e2afd(0x523)][_0x5e2afd(0x278)](_0x14c31e);}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x660),_0x21df42=>{const _0x12e929=_0xabeb6b;VisuMZ['BattleGridSystem'][_0x12e929(0x278)](_0x21df42);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Grid_AnimationIDAtNode',_0x4892f4=>{const _0x1fd71e=_0xabeb6b;VisuMZ[_0x1fd71e(0x523)][_0x1fd71e(0x8cc)](_0x4892f4);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xa25),_0x3a3bfa=>{const _0x5687e1=_0xabeb6b;VisuMZ[_0x5687e1(0x523)][_0x5687e1(0xa25)](_0x3a3bfa);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Grid_AnimationTypeAtNode',_0x72e39c=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_AnimationTypeAtNode'](_0x72e39c);}),PluginManager['registerCommand'](pluginData['name'],_0xabeb6b(0x587),_0x5d6c7e=>{const _0x123611=_0xabeb6b;VisuMZ['BattleGridSystem'][_0x123611(0x587)](_0x5d6c7e);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x83c),_0x41df5d=>{const _0x1856a7=_0xabeb6b;VisuMZ[_0x1856a7(0x523)][_0x1856a7(0x83c)](_0x41df5d);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x2e2),_0x5f4e22=>{const _0x7f748c=_0xabeb6b;VisuMZ[_0x7f748c(0x523)][_0x7f748c(0x2e2)](_0x5f4e22);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x3d8),_0x3aaaaa=>{const _0x22cda4=_0xabeb6b;VisuMZ[_0x22cda4(0x523)][_0x22cda4(0x3d8)](_0x3aaaaa);}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Grid_RemovePassiveStatesFromNode',_0x1fa6d9=>{const _0x556078=_0xabeb6b;VisuMZ[_0x556078(0x523)][_0x556078(0x5f8)](_0x1fa6d9);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x499),_0x5f31ec=>{const _0x4a9293=_0xabeb6b;VisuMZ['BattleGridSystem'][_0x4a9293(0x499)](_0x5f31ec);}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0xad8),_0x437332=>{const _0x544003=_0xabeb6b;VisuMZ[_0x544003(0x523)][_0x544003(0xad8)](_0x437332);}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Grid_TraverseToNode',_0x5c8401=>{const _0x2cc794=_0xabeb6b;VisuMZ['BattleGridSystem'][_0x2cc794(0x10b)](_0x5c8401);}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Horror_Clear',_0x10ecf0=>{const _0x7e81d2=_0xabeb6b;if(!Imported[_0x7e81d2(0xbc1)])return;if(!SceneManager[_0x7e81d2(0x87a)]())return;VisuMZ[_0x7e81d2(0x410)](_0x10ecf0,_0x10ecf0);const _0x3f249a=VisuMZ[_0x7e81d2(0x6b6)](_0x10ecf0[_0x7e81d2(0x78b)]);for(const _0x2fed9e of _0x3f249a){if(!_0x2fed9e)continue;_0x2fed9e[_0x7e81d2(0x6fb)](_0x7e81d2(0x480)),_0x2fed9e[_0x7e81d2(0x6fb)]('glitch'),_0x2fed9e[_0x7e81d2(0x6fb)]('tv'),_0x2fed9e[_0x7e81d2(0x23c)]();}$gamePlayer[_0x7e81d2(0x9f5)]();}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Horror_GlitchCreate',_0xf05881=>{const _0x24fb46=_0xabeb6b;if(!Imported[_0x24fb46(0xbc1)])return;if(!SceneManager[_0x24fb46(0x87a)]())return;VisuMZ['ConvertParams'](_0xf05881,_0xf05881);const _0x5c28e3=VisuMZ['CreateActionSequenceTargets'](_0xf05881[_0x24fb46(0x78b)]),_0x4b4afe=_0x24fb46(0x3d0);_0xf05881[_0x24fb46(0x1fa)]=Math['ceil'](_0xf05881[_0x24fb46(0xa49)]/0x2),_0xf05881[_0x24fb46(0x8ce)]=_0xf05881[_0x24fb46(0xa49)],_0xf05881[_0x24fb46(0x8cf)]=!![];for(const _0x23c955 of _0x5c28e3){if(!_0x23c955)continue;_0x23c955[_0x24fb46(0x412)](_0x4b4afe,_0xf05881);}$gamePlayer[_0x24fb46(0x9f5)]();}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x9f3),_0x3a0a43=>{const _0x116817=_0xabeb6b;if(!Imported[_0x116817(0xbc1)])return;if(!SceneManager[_0x116817(0x87a)]())return;VisuMZ[_0x116817(0x410)](_0x3a0a43,_0x3a0a43);const _0x34f336=VisuMZ['CreateActionSequenceTargets'](_0x3a0a43[_0x116817(0x78b)]);for(const _0xcab489 of _0x34f336){if(!_0xcab489)continue;_0xcab489[_0x116817(0x6fb)](_0x116817(0x3d0));}$gamePlayer[_0x116817(0x9f5)]();}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x11d),_0x35d49e=>{const _0x2030f9=_0xabeb6b;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x2030f9(0x87a)]())return;VisuMZ[_0x2030f9(0x410)](_0x35d49e,_0x35d49e);const _0x197e67=VisuMZ[_0x2030f9(0x6b6)](_0x35d49e[_0x2030f9(0x78b)]),_0x44654f=_0x2030f9(0x480);for(const _0x514f5a of _0x197e67){if(!_0x514f5a)continue;_0x514f5a['setHorrorEffectSettings'](_0x44654f,_0x35d49e);}$gamePlayer[_0x2030f9(0x9f5)]();}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x856),_0x374bb1=>{const _0x3e5e81=_0xabeb6b;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x374bb1,_0x374bb1);const _0xcb0b6e=VisuMZ[_0x3e5e81(0x6b6)](_0x374bb1[_0x3e5e81(0x78b)]);for(const _0x335465 of _0xcb0b6e){if(!_0x335465)continue;_0x335465[_0x3e5e81(0x6fb)]('noise');}$gamePlayer[_0x3e5e81(0x9f5)]();}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xbcc),_0x2679e7=>{const _0x5ad063=_0xabeb6b;if(!Imported[_0x5ad063(0xbc1)])return;if(!SceneManager[_0x5ad063(0x87a)]())return;VisuMZ['ConvertParams'](_0x2679e7,_0x2679e7);const _0x3909af=VisuMZ[_0x5ad063(0x6b6)](_0x2679e7[_0x5ad063(0x78b)]),_0x571f97='tv';for(const _0x4ad55d of _0x3909af){if(!_0x4ad55d)continue;_0x4ad55d[_0x5ad063(0x412)](_0x571f97,_0x2679e7);}$gamePlayer[_0x5ad063(0x9f5)]();}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Horror_TVRemove',_0x28dfd2=>{const _0x33be33=_0xabeb6b;if(!Imported[_0x33be33(0xbc1)])return;if(!SceneManager[_0x33be33(0x87a)]())return;VisuMZ[_0x33be33(0x410)](_0x28dfd2,_0x28dfd2);const _0x5a6bb0=VisuMZ[_0x33be33(0x6b6)](_0x28dfd2[_0x33be33(0x78b)]);for(const _0x2b5447 of _0x5a6bb0){if(!_0x2b5447)continue;_0x2b5447[_0x33be33(0x6fb)]('tv');}$gamePlayer[_0x33be33(0x9f5)]();}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x448),_0x329c67=>{const _0x3e93e1=_0xabeb6b;if(!Imported[_0x3e93e1(0xab5)])return;const _0x920d75=SceneManager[_0x3e93e1(0x483)][_0x3e93e1(0x754)];if(!_0x920d75)return;if(VisuMZ[_0x3e93e1(0x1d9)][_0x3e93e1(0x729)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x3e93e1(0x410)](_0x329c67,_0x329c67);const _0x46f7d7=_0x329c67[_0x3e93e1(0x4c3)];_0x920d75[_0x3e93e1(0xbab)](_0x46f7d7);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x4a6),_0x1346fa=>{const _0xf857d7=_0xabeb6b;if(!SceneManager[_0xf857d7(0x87a)]())return;if(!Imported[_0xf857d7(0xab5)])return;const _0x18b438=SceneManager[_0xf857d7(0x483)][_0xf857d7(0x754)];if(!_0x18b438)return;VisuMZ[_0xf857d7(0x410)](_0x1346fa,_0x1346fa);const _0x3ef0c2=_0x1346fa['Intensity']||0x1,_0x44a22a=_0x1346fa[_0xf857d7(0xa45)]||0x1,_0x505113=_0x1346fa[_0xf857d7(0x93d)]||_0xf857d7(0x899);_0x18b438[_0xf857d7(0x28b)](_0x3ef0c2,_0x44a22a,_0x505113);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x967),_0x21f8cc=>{const _0x4e6841=_0xabeb6b;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x360646=SceneManager[_0x4e6841(0x483)][_0x4e6841(0x754)];if(!_0x360646)return;if(VisuMZ[_0x4e6841(0x1d9)][_0x4e6841(0x729)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x4e6841(0x410)](_0x21f8cc,_0x21f8cc);const _0x2dfb94=_0x21f8cc[_0x4e6841(0x4c3)];_0x360646[_0x4e6841(0xa70)](_0x2dfb94);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Impact_MotionBlurScreen',_0x265c74=>{const _0x48321d=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x372a91=SceneManager[_0x48321d(0x483)][_0x48321d(0x754)];if(!_0x372a91)return;VisuMZ[_0x48321d(0x410)](_0x265c74,_0x265c74);const _0x1576bb=Number(_0x265c74[_0x48321d(0xb26)])||0x0,_0x524773=Number(_0x265c74[_0x48321d(0x529)]),_0x8ae752=_0x265c74[_0x48321d(0xa45)]||0x1,_0x59b7dd=_0x265c74[_0x48321d(0x93d)]||_0x48321d(0x899);_0x372a91[_0x48321d(0xe2)](_0x1576bb,_0x524773,_0x8ae752,_0x59b7dd);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Impact_MotionBlurTarget',_0x50c7a3=>{const _0x14d58d=_0xabeb6b;if(!SceneManager[_0x14d58d(0x87a)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2b3f32=SceneManager[_0x14d58d(0x483)][_0x14d58d(0x754)];if(!_0x2b3f32)return;VisuMZ[_0x14d58d(0x410)](_0x50c7a3,_0x50c7a3);const _0x4be93c=Number(_0x50c7a3['Angle'])||0x0,_0x402da7=Number(_0x50c7a3[_0x14d58d(0x529)]),_0x30bb45=_0x50c7a3[_0x14d58d(0xa45)]||0x1,_0xf2c754=_0x50c7a3['EasingType']||_0x14d58d(0x899),_0x96d959=VisuMZ['CreateActionSequenceTargets'](_0x50c7a3['Targets']);for(const _0x2dddc3 of _0x96d959){if(!_0x2dddc3)continue;if(!_0x2dddc3[_0x14d58d(0x7bb)]())continue;_0x2dddc3['battler']()[_0x14d58d(0xe2)](_0x4be93c,_0x402da7,_0x30bb45,_0xf2c754);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xaf5),_0x150ea1=>{const _0x8e399=_0xabeb6b;if(!SceneManager[_0x8e399(0x87a)]())return;if(!Imported[_0x8e399(0xab5)])return;VisuMZ[_0x8e399(0x410)](_0x150ea1,_0x150ea1);const _0x336596={'delay':_0x150ea1[_0x8e399(0x944)],'duration':_0x150ea1['duration'],'hue':_0x150ea1[_0x8e399(0x940)],'opacityStart':_0x150ea1[_0x8e399(0xbcb)],'tone':_0x150ea1[_0x8e399(0x63e)],'visible':!![]},_0x10ccfe=VisuMZ[_0x8e399(0x6b6)](_0x150ea1[_0x8e399(0x78b)]);for(const _0x1b19b7 of _0x10ccfe){if(!_0x1b19b7)continue;_0x1b19b7[_0x8e399(0x340)](_0x336596);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x8af),_0x5257f7=>{const _0x46fd06=_0xabeb6b;if(!SceneManager[_0x46fd06(0x87a)]())return;if(!Imported[_0x46fd06(0xab5)])return;VisuMZ['ConvertParams'](_0x5257f7,_0x5257f7);const _0x1035ce=VisuMZ[_0x46fd06(0x6b6)](_0x5257f7[_0x46fd06(0x78b)]);for(const _0x5f1d28 of _0x1035ce){if(!_0x5f1d28)continue;_0x5f1d28[_0x46fd06(0xb60)]();}}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],'ActSeq_Impact_Negative',_0x29f145=>{const _0x134bd4=_0xabeb6b;if(!Imported[_0x134bd4(0xab5)])return;const _0x1513c1=SceneManager[_0x134bd4(0x483)][_0x134bd4(0x754)];if(!_0x1513c1)return;if(VisuMZ[_0x134bd4(0x1d9)][_0x134bd4(0x729)]<=1.04){alert(_0x134bd4(0x41e)),SceneManager[_0x134bd4(0x9d8)]();return;}VisuMZ[_0x134bd4(0x410)](_0x29f145,_0x29f145);const _0x583adf=_0x29f145[_0x134bd4(0x4c3)];_0x1513c1[_0x134bd4(0x556)](_0x583adf);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x5c9),_0x295642=>{const _0x1bebd2=_0xabeb6b;if(!Imported[_0x1bebd2(0xab5)])return;const _0x3335aa=SceneManager[_0x1bebd2(0x483)][_0x1bebd2(0x754)];if(!_0x3335aa)return;if(VisuMZ['ActSeqImpact'][_0x1bebd2(0x729)]<=1.04){alert(_0x1bebd2(0x41e)),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x295642,_0x295642);const _0x3105ce=_0x295642[_0x1bebd2(0x4c3)];_0x3335aa['setupOversaturateImpactFilter'](_0x3105ce);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Impact_ShockwavePoint',_0x21c1cd=>{const _0x3110a6=_0xabeb6b;if(!Imported[_0x3110a6(0xab5)])return;const _0x2bea92=SceneManager['_scene'][_0x3110a6(0x754)];if(!_0x2bea92)return;VisuMZ[_0x3110a6(0x410)](_0x21c1cd,_0x21c1cd);const _0x420d1c=_0x21c1cd['X']||0x0,_0x13a182=_0x21c1cd['Y']||0x0,_0x1dac4d=_0x21c1cd[_0x3110a6(0xb48)]||0x0,_0x3089ab=_0x21c1cd['Wave']||0x0,_0xc942d8=_0x21c1cd['Duration']||0x1;_0x2bea92[_0x3110a6(0x43d)](_0x420d1c,_0x13a182,_0x1dac4d,_0x3089ab,_0xc942d8);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xa41),_0x17fb07=>{const _0x304091=_0xabeb6b;if(!SceneManager[_0x304091(0x87a)]())return;if(!Imported[_0x304091(0xab5)])return;const _0x31ec9e=SceneManager['_scene'][_0x304091(0x754)];if(!_0x31ec9e)return;VisuMZ['ConvertParams'](_0x17fb07,_0x17fb07);const _0x3373a5=VisuMZ[_0x304091(0x6b6)](_0x17fb07['Targets']),_0x552507=_0x17fb07['TargetLocation'],_0x142571=_0x17fb07['OffsetX']||0x0,_0x96992a=_0x17fb07[_0x304091(0x8f0)]||0x0,_0x2d8bb5=_0x17fb07[_0x304091(0xb48)]||0x0,_0x34df71=_0x17fb07[_0x304091(0xad1)]||0x0,_0x129bb4=_0x17fb07[_0x304091(0xa45)]||0x1;for(const _0x25c36e of _0x3373a5){if(!_0x25c36e)continue;if(!_0x25c36e[_0x304091(0x7bb)]())continue;const _0x2d4856=_0x25c36e[_0x304091(0x7bb)]();let _0x630789=_0x2d4856[_0x304091(0x945)],_0x99a999=_0x2d4856['_baseY'];_0x630789+=(Graphics[_0x304091(0x461)]-Graphics['boxWidth'])/0x2,_0x99a999+=(Graphics['height']-Graphics[_0x304091(0x588)])/0x2;if(_0x552507['match'](/front/i))_0x630789+=(_0x25c36e[_0x304091(0x54b)]()?0x1:-0x1)*_0x2d4856[_0x304091(0x3c9)]()/0x2;else _0x552507['match'](/back/i)&&(_0x630789+=(_0x25c36e[_0x304091(0x54b)]()?-0x1:0x1)*_0x2d4856[_0x304091(0x3c9)]()/0x2);if(_0x552507[_0x304091(0xef)](/head/i))_0x99a999-=_0x2d4856[_0x304091(0x530)]();else _0x552507[_0x304091(0xef)](/center/i)&&(_0x99a999-=_0x2d4856['mainSpriteHeight']()/0x2);_0x630789+=_0x142571,_0x99a999+=_0x96992a,_0x31ec9e[_0x304091(0x43d)](_0x630789,_0x99a999,_0x2d8bb5,_0x34df71,_0x129bb4);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Impact_ShockwaveCenterTargets',_0x242bc7=>{const _0xed046d=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xed046d(0xab5)])return;const _0x400587=SceneManager[_0xed046d(0x483)]['_spriteset'];if(!_0x400587)return;VisuMZ[_0xed046d(0x410)](_0x242bc7,_0x242bc7);const _0x2fcd18=VisuMZ[_0xed046d(0x6b6)](_0x242bc7[_0xed046d(0x78b)]),_0x37e0b4=_0x242bc7[_0xed046d(0x9f9)],_0x36facf=_0x242bc7['OffsetX']||0x0,_0x287e94=_0x242bc7[_0xed046d(0x8f0)]||0x0,_0x274827=_0x242bc7['Amp']||0x0,_0xd1742e=_0x242bc7[_0xed046d(0xad1)]||0x0,_0x40bd86=_0x242bc7[_0xed046d(0xa45)]||0x1,_0xb21c43=Math[_0xed046d(0x1be)](..._0x2fcd18[_0xed046d(0x614)](_0x262d33=>_0x262d33[_0xed046d(0x7bb)]()[_0xed046d(0x945)]-_0x262d33[_0xed046d(0x7bb)]()[_0xed046d(0x3c9)]()/0x2)),_0xc85374=Math[_0xed046d(0xb72)](..._0x2fcd18[_0xed046d(0x614)](_0x50a3ef=>_0x50a3ef[_0xed046d(0x7bb)]()['_baseX']+_0x50a3ef[_0xed046d(0x7bb)]()[_0xed046d(0x3c9)]()/0x2)),_0x1e4c98=Math[_0xed046d(0x1be)](..._0x2fcd18['map'](_0x378436=>_0x378436[_0xed046d(0x7bb)]()[_0xed046d(0xb85)]-_0x378436[_0xed046d(0x7bb)]()[_0xed046d(0x530)]())),_0x5742c7=Math[_0xed046d(0xb72)](..._0x2fcd18[_0xed046d(0x614)](_0x24e499=>_0x24e499['battler']()[_0xed046d(0xb85)])),_0x4447d3=_0x2fcd18[_0xed046d(0x959)](_0x2321d3=>_0x2321d3['isActor']())[_0xed046d(0x93a)],_0x5b9cf1=_0x2fcd18['filter'](_0x1c2534=>_0x1c2534[_0xed046d(0x54b)]())[_0xed046d(0x93a)];let _0x13ff68=0x0,_0x4ffe12=0x0;if(_0x37e0b4[_0xed046d(0xef)](/front/i))_0x13ff68=_0x4447d3>=_0x5b9cf1?_0xb21c43:_0xc85374;else{if(_0x37e0b4['match'](/middle/i))_0x13ff68=(_0xb21c43+_0xc85374)/0x2,melee=-0x1;else _0x37e0b4['match'](/back/i)&&(_0x13ff68=_0x4447d3>=_0x5b9cf1?_0xc85374:_0xb21c43);}if(_0x37e0b4[_0xed046d(0xef)](/head/i))_0x4ffe12=_0x1e4c98;else{if(_0x37e0b4[_0xed046d(0xef)](/center/i))_0x4ffe12=(_0x1e4c98+_0x5742c7)/0x2;else _0x37e0b4[_0xed046d(0xef)](/base/i)&&(_0x4ffe12=_0x5742c7);}_0x13ff68+=(Graphics[_0xed046d(0x461)]-Graphics[_0xed046d(0x143)])/0x2,_0x4ffe12+=(Graphics[_0xed046d(0x1ee)]-Graphics['boxHeight'])/0x2,_0x13ff68+=_0x36facf,_0x4ffe12+=_0x287e94,_0x400587[_0xed046d(0x43d)](_0x13ff68,_0x4ffe12,_0x274827,_0xd1742e,_0x40bd86);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x79c),_0xff6b28=>{const _0x182c76=_0xabeb6b;if(!Imported[_0x182c76(0xab5)])return;const _0x5ade6b=SceneManager[_0x182c76(0x483)][_0x182c76(0x754)];if(!_0x5ade6b)return;if(VisuMZ[_0x182c76(0x1d9)][_0x182c76(0x729)]<=1.04){alert(_0x182c76(0x41e)),SceneManager[_0x182c76(0x9d8)]();return;}VisuMZ[_0x182c76(0x410)](_0xff6b28,_0xff6b28);const _0x192c8f=$gameTemp['getLastPluginCommandInterpreter'](),_0xe40f9d=Math[_0x182c76(0xb72)](0.01,_0xff6b28[_0x182c76(0x6ac)]);$gameTemp[_0x182c76(0x9cd)](_0xe40f9d,_0x192c8f);}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x759),_0x60396b=>{const _0x181e3d=_0xabeb6b;if(!Imported[_0x181e3d(0xab5)])return;const _0x37a9c3=SceneManager[_0x181e3d(0x483)][_0x181e3d(0x754)];if(!_0x37a9c3)return;if(VisuMZ[_0x181e3d(0x1d9)][_0x181e3d(0x729)]<=1.04){alert(_0x181e3d(0x41e)),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x60396b,_0x60396b);const _0x3a1cf8=$gameTemp[_0x181e3d(0x653)](),_0x4242d1=_0x60396b['ms']||0x1;VisuMZ['ActSeqImpact']['freezeTime'](_0x4242d1,_0x3a1cf8);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x2f6),_0x3c870c=>{const _0x1c1a99=_0xabeb6b;if(!Imported[_0x1c1a99(0xab5)])return;const _0x3b2a8d=SceneManager[_0x1c1a99(0x483)]['_spriteset'];if(!_0x3b2a8d)return;VisuMZ[_0x1c1a99(0x410)](_0x3c870c,_0x3c870c);const _0x409f80=_0x3c870c['X']||0x0,_0x38d831=_0x3c870c['Y']||0x0,_0x49cfcc=_0x3c870c[_0x1c1a99(0x956)]||0x0,_0x3f37f0=_0x3c870c[_0x1c1a99(0x7d4)]||0x0,_0x1e1924=_0x3c870c[_0x1c1a99(0xa45)]||0x1,_0x3cd117=_0x3c870c[_0x1c1a99(0x93d)]||_0x1c1a99(0x899);_0x3b2a8d[_0x1c1a99(0x980)](_0x49cfcc,_0x409f80,_0x38d831,_0x3f37f0,_0x1e1924,_0x3cd117);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x88e),_0x125c5b=>{const _0x18fa96=_0xabeb6b;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x24c90f=SceneManager['_scene'][_0x18fa96(0x754)];if(!_0x24c90f)return;VisuMZ['ConvertParams'](_0x125c5b,_0x125c5b);const _0xaecaf0=VisuMZ[_0x18fa96(0x6b6)](_0x125c5b[_0x18fa96(0x78b)]),_0x4e713b=_0x125c5b[_0x18fa96(0x9f9)],_0x76d5cc=_0x125c5b[_0x18fa96(0x163)]||0x0,_0x263c4e=_0x125c5b[_0x18fa96(0x8f0)]||0x0,_0x4f19e7=_0x125c5b[_0x18fa96(0x956)]||0x0,_0x5f9822=_0x125c5b[_0x18fa96(0x7d4)]||0x0,_0x3eb0f1=_0x125c5b[_0x18fa96(0xa45)]||0x1,_0x139f60=_0x125c5b['EasingType']||_0x18fa96(0x899),_0x2ae3b5=Math['min'](..._0xaecaf0[_0x18fa96(0x614)](_0x5e4e6a=>_0x5e4e6a[_0x18fa96(0x7bb)]()[_0x18fa96(0x945)]-_0x5e4e6a[_0x18fa96(0x7bb)]()[_0x18fa96(0x3c9)]()/0x2)),_0x4fbb57=Math[_0x18fa96(0xb72)](..._0xaecaf0[_0x18fa96(0x614)](_0x3e8352=>_0x3e8352[_0x18fa96(0x7bb)]()[_0x18fa96(0x945)]+_0x3e8352['battler']()[_0x18fa96(0x3c9)]()/0x2)),_0x4b5607=Math[_0x18fa96(0x1be)](..._0xaecaf0[_0x18fa96(0x614)](_0x427696=>_0x427696[_0x18fa96(0x7bb)]()['_baseY']-_0x427696[_0x18fa96(0x7bb)]()['mainSpriteHeight']())),_0x55eb65=Math['max'](..._0xaecaf0[_0x18fa96(0x614)](_0x50629a=>_0x50629a['battler']()[_0x18fa96(0xb85)])),_0x27893b=_0xaecaf0[_0x18fa96(0x959)](_0x190564=>_0x190564[_0x18fa96(0xb6a)]())[_0x18fa96(0x93a)],_0x3b7872=_0xaecaf0[_0x18fa96(0x959)](_0x1e8963=>_0x1e8963[_0x18fa96(0x54b)]())[_0x18fa96(0x93a)];let _0x2de92e=0x0,_0x3af71d=0x0;if(_0x4e713b[_0x18fa96(0xef)](/front/i))_0x2de92e=_0x27893b>=_0x3b7872?_0x2ae3b5:_0x4fbb57;else{if(_0x4e713b[_0x18fa96(0xef)](/middle/i))_0x2de92e=(_0x2ae3b5+_0x4fbb57)/0x2,melee=-0x1;else _0x4e713b[_0x18fa96(0xef)](/back/i)&&(_0x2de92e=_0x27893b>=_0x3b7872?_0x4fbb57:_0x2ae3b5);}if(_0x4e713b[_0x18fa96(0xef)](/head/i))_0x3af71d=_0x4b5607;else{if(_0x4e713b['match'](/center/i))_0x3af71d=(_0x4b5607+_0x55eb65)/0x2;else _0x4e713b[_0x18fa96(0xef)](/base/i)&&(_0x3af71d=_0x55eb65);}_0x2de92e+=(Graphics['width']-Graphics[_0x18fa96(0x143)])/0x2,_0x3af71d+=(Graphics['height']-Graphics['boxHeight'])/0x2,_0x2de92e+=_0x76d5cc,_0x3af71d+=_0x263c4e,_0x24c90f[_0x18fa96(0x980)](_0x4f19e7,_0x2de92e,_0x3af71d,_0x5f9822,_0x3eb0f1,_0x139f60);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x341),_0x166298=>{const _0x47eb20=_0xabeb6b;if(!Imported[_0x47eb20(0xab5)])return;const _0x2c9e55=SceneManager['_scene'][_0x47eb20(0x754)];if(!_0x2c9e55)return;if(VisuMZ[_0x47eb20(0x1d9)][_0x47eb20(0x729)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x47eb20(0x410)](_0x166298,_0x166298);const _0x35962f=VisuMZ[_0x47eb20(0x6b6)](_0x166298[_0x47eb20(0x78b)]),_0x573fd7={'filename':_0x166298['Filename'],'horzCells':_0x166298[_0x47eb20(0x538)]||0x1,'vertCells':_0x166298[_0x47eb20(0x753)]||0x1,'frameDelay':_0x166298['frameDelay']||0x1,'smooth':_0x166298['smooth']||![],'anchorX':_0x166298['anchorX']||0x0,'anchorY':_0x166298[_0x47eb20(0x59a)]||0x0,'offsetX':_0x166298['offsetX']||0x0,'offsetY':_0x166298[_0x47eb20(0x39e)]||0x0};for(const _0x2c0cbc of _0x35962f){if(!_0x2c0cbc)continue;if(!_0x2c0cbc['battler']())continue;_0x2c0cbc[_0x47eb20(0x7bb)]()[_0x47eb20(0x502)](_0x573fd7);}const _0x255b4d=$gameTemp[_0x47eb20(0x653)]();_0x255b4d&&_0x255b4d[_0x47eb20(0xa1d)](_0x47eb20(0x6cf));}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0xa2e),_0x4df69e=>{const _0xc5ffb8=_0xabeb6b;if(!Imported[_0xc5ffb8(0xab5)])return;const _0x50dd0d=SceneManager[_0xc5ffb8(0x483)][_0xc5ffb8(0x754)];if(!_0x50dd0d)return;if(VisuMZ[_0xc5ffb8(0x1d9)][_0xc5ffb8(0x729)]<=1.05){alert(_0xc5ffb8(0x41e)),SceneManager[_0xc5ffb8(0x9d8)]();return;}VisuMZ[_0xc5ffb8(0x410)](_0x4df69e,_0x4df69e);const _0x1f13e2=VisuMZ[_0xc5ffb8(0x6b6)](_0x4df69e[_0xc5ffb8(0x78b)]);for(const _0x1bcea9 of _0x1f13e2){if(!_0x1bcea9)continue;if(!_0x1bcea9[_0xc5ffb8(0x7bb)]())continue;_0x1bcea9['battler']()['stopInjectAnimation']();}}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x458),_0x2609d1=>{const _0x491e6d=_0xabeb6b;if(!Imported[_0x491e6d(0xab5)])return;const _0x26285d=SceneManager[_0x491e6d(0x483)][_0x491e6d(0x754)];if(!_0x26285d)return;if(VisuMZ[_0x491e6d(0x1d9)][_0x491e6d(0x729)]<=1.05){alert(_0x491e6d(0x41e)),SceneManager[_0x491e6d(0x9d8)]();return;}VisuMZ[_0x491e6d(0x410)](_0x2609d1,_0x2609d1);const _0x775772=VisuMZ[_0x491e6d(0x6b6)](_0x2609d1[_0x491e6d(0x78b)]),_0x38836f=_0x2609d1[_0x491e6d(0x3e6)];for(const _0x529c47 of _0x775772){if(!_0x529c47)continue;if(!_0x529c47[_0x491e6d(0x7bb)]())continue;_0x529c47[_0x491e6d(0x7bb)]()[_0x491e6d(0x26c)](_0x38836f);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xb30),_0x14802f=>{const _0x390840=_0xabeb6b;if(!SceneManager[_0x390840(0x87a)]())return;const _0x7b3a29=$gameTemp[_0x390840(0x653)]();if(!_0x7b3a29)return;_0x7b3a29['setWaitMode'](_0x390840(0x731));}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],'ActSeq_Mechanics_ActionEffect',_0x1f088e=>{const _0x230d51=_0xabeb6b;if(!SceneManager[_0x230d51(0x87a)]())return;VisuMZ[_0x230d51(0x410)](_0x1f088e,_0x1f088e);const _0x2d8cff=$gameTemp[_0x230d51(0x653)](),_0x31cb9a=BattleManager[_0x230d51(0x984)],_0x843e=BattleManager[_0x230d51(0x4ee)],_0x50cc7c=BattleManager[_0x230d51(0x6c2)];if(!_0x2d8cff||!_0x31cb9a||!_0x843e)return;if(!_0x31cb9a['item']())return;const _0x16be9b=VisuMZ[_0x230d51(0x6b6)](_0x1f088e[_0x230d51(0x78b)]);for(const _0x5a2a29 of _0x16be9b){if(!_0x5a2a29)continue;_0x50cc7c[_0x230d51(0x5cb)](_0x230d51(0xac6),_0x843e,_0x5a2a29);}_0x2d8cff['setWaitMode'](_0x230d51(0x555));}),PluginManager['registerCommand'](pluginData['name'],_0xabeb6b(0x2bd),_0x5e358a=>{const _0x2d7c57=_0xabeb6b;if(!SceneManager[_0x2d7c57(0x87a)]())return;if(!Imported[_0x2d7c57(0x6a9)])return;$gameTemp['_performActionEnd']=!![];}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x47b),_0x3e9ab1=>{const _0x144994=_0xabeb6b;if(!SceneManager[_0x144994(0x87a)]())return;VisuMZ['ConvertParams'](_0x3e9ab1,_0x3e9ab1);const _0x44d55d=[_0x144994(0x4f4),_0x144994(0xb8d),_0x144994(0x270),_0x144994(0xb4a),_0x144994(0xb7a),_0x144994(0x978),_0x144994(0x6cd),_0x144994(0xa68)],_0x2d3a30=_0x3e9ab1[_0x144994(0x6fc)],_0x34ff7e=_0x3e9ab1['Debuffs'],_0x4250bd=_0x3e9ab1[_0x144994(0x7f8)],_0xf9bc51=VisuMZ[_0x144994(0x6b6)](_0x3e9ab1['Targets']);for(const _0x25b6cc of _0xf9bc51){if(!_0x25b6cc)continue;for(const _0x4340ca of _0x2d3a30){const _0x23337a=_0x44d55d[_0x144994(0x996)](_0x4340ca['toUpperCase']()[_0x144994(0xd3)]());_0x23337a>=0x0&&_0x23337a<=0x7&&_0x25b6cc[_0x144994(0x27f)](_0x23337a,_0x4250bd);}for(const _0x345775 of _0x34ff7e){const _0x5bd8fd=_0x44d55d[_0x144994(0x996)](_0x345775[_0x144994(0xf8)]()[_0x144994(0xd3)]());_0x5bd8fd>=0x0&&_0x5bd8fd<=0x7&&_0x25b6cc[_0x144994(0x32e)](_0x5bd8fd,_0x4250bd);}}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x6e5),_0x2ece56=>{const _0x847eae=_0xabeb6b;if(!SceneManager[_0x847eae(0x87a)]())return;VisuMZ[_0x847eae(0x410)](_0x2ece56,_0x2ece56);const _0x155411=_0x2ece56[_0x847eae(0x86c)],_0x2958ac=VisuMZ['CreateActionSequenceTargets'](_0x2ece56['Targets']);for(const _0x58befc of _0x2958ac){if(!_0x58befc)continue;for(const _0x1197d4 of _0x155411){_0x58befc[_0x847eae(0x28e)](_0x1197d4);}}}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Mechanics_ArmorPenetration',_0x4c4ab9=>{const _0x40fa22=_0xabeb6b;if(!SceneManager[_0x40fa22(0x87a)]())return;VisuMZ['ConvertParams'](_0x4c4ab9,_0x4c4ab9);const _0x88b9ba=BattleManager['_action'],_0x3d1595={'arPenRate':_0x4c4ab9[_0x40fa22(0x74a)],'arPenFlat':_0x4c4ab9['ArPenFlat'],'arRedRate':_0x4c4ab9['ArRedRate'],'arRedFlat':_0x4c4ab9[_0x40fa22(0x5d0)]};_0x88b9ba['_armorPenetration']=_0x3d1595;}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x60f),_0x4b3318=>{const _0x2188a2=_0xabeb6b;if(!SceneManager[_0x2188a2(0x87a)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ[_0x2188a2(0x410)](_0x4b3318,_0x4b3318);const _0x5e77da=VisuMZ[_0x2188a2(0x6b6)](_0x4b3318['Targets']),_0xe118a6=_0x4b3318[_0x2188a2(0x267)]||0x1;for(const _0x349882 of _0x5e77da){if(!_0x349882)continue;if(!_0x349882['isEnemy']())continue;_0x349882['revealNewWeaknesses'](_0xe118a6);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x27b),_0x18fdf5=>{const _0x348517=_0xabeb6b;if(!SceneManager[_0x348517(0x87a)]())return;if(!Imported[_0x348517(0x6a0)])return;if(!BattleManager[_0x348517(0x783)]())return;VisuMZ[_0x348517(0x410)](_0x18fdf5,_0x18fdf5);const _0x2e7004=VisuMZ['CreateActionSequenceTargets'](_0x18fdf5['Targets']),_0x59f43d=_0x18fdf5[_0x348517(0xaf7)],_0x31370d=_0x18fdf5['ChargeRate'],_0x21b82b=_0x18fdf5['Interrupt'];for(const _0x995da5 of _0x2e7004){if(!_0x995da5)continue;if(_0x995da5[_0x348517(0x4a8)]())_0x995da5[_0x348517(0xf4)](_0x59f43d);else{if(_0x995da5[_0x348517(0x63f)]()){_0x995da5[_0x348517(0x6a3)](_0x31370d);if(_0x21b82b)_0x995da5['atbInterrupt']();}}}}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x910),_0x32ed3c=>{const _0x388367=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x388367(0x560)])return;VisuMZ[_0x388367(0x410)](_0x32ed3c,_0x32ed3c);const _0x3598d5=VisuMZ[_0x388367(0x6b6)](_0x32ed3c[_0x388367(0x78b)]),_0x2af6e7=_0x32ed3c[_0x388367(0x45f)];for(const _0x529eee of _0x3598d5){if(!_0x529eee)continue;_0x529eee[_0x388367(0xb81)](_0x2af6e7);}}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x7e7),_0x592927=>{const _0x2aa8c2=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager['_subject'])return;VisuMZ[_0x2aa8c2(0x410)](_0x592927,_0x592927);const _0x49b18d=_0x592927['VariableID'];$gameVariables[_0x2aa8c2(0x4fd)](_0x49b18d,BattleManager[_0x2aa8c2(0x4ee)][_0x2aa8c2(0xb56)]());}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Mechanics_BreakShieldChange',_0x4ccb8d=>{const _0x3ec0c7=_0xabeb6b;if(!SceneManager[_0x3ec0c7(0x87a)]())return;if(!Imported[_0x3ec0c7(0x3cc)])return;VisuMZ[_0x3ec0c7(0x410)](_0x4ccb8d,_0x4ccb8d);const _0x3e2b89=VisuMZ[_0x3ec0c7(0x6b6)](_0x4ccb8d[_0x3ec0c7(0x78b)]),_0x3aa12a=_0x4ccb8d[_0x3ec0c7(0x24a)];for(const _0x1ef939 of _0x3e2b89){if(!_0x1ef939)continue;if(_0x1ef939[_0x3ec0c7(0x2c9)]())continue;if(!_0x1ef939[_0x3ec0c7(0x258)]())continue;_0x1ef939[_0x3ec0c7(0x92c)](_0x3aa12a);}}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x808),_0x3566cd=>{const _0x21c6a5=_0xabeb6b;if(!SceneManager[_0x21c6a5(0x87a)]())return;if(!Imported[_0x21c6a5(0x3cc)])return;VisuMZ[_0x21c6a5(0x410)](_0x3566cd,_0x3566cd);const _0x47861e=VisuMZ['CreateActionSequenceTargets'](_0x3566cd[_0x21c6a5(0x78b)]);for(const _0x1a915e of _0x47861e){if(!_0x1a915e)continue;if(_0x1a915e[_0x21c6a5(0x2c9)]())continue;if(!_0x1a915e['isAffectedByBreakShield']())continue;_0x1a915e[_0x21c6a5(0x6de)]();}}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Mechanics_BtbGain',_0x155997=>{const _0x34c341=_0xabeb6b;if(!SceneManager[_0x34c341(0x87a)]())return;if(!Imported[_0x34c341(0x126)])return;if(!BattleManager[_0x34c341(0xb1b)]())return;VisuMZ[_0x34c341(0x410)](_0x155997,_0x155997);const _0xed86c4=VisuMZ[_0x34c341(0x6b6)](_0x155997[_0x34c341(0x78b)]),_0x5bd093=_0x155997[_0x34c341(0x9be)];for(const _0x7a01fe of _0xed86c4){if(!_0x7a01fe)continue;_0x7a01fe[_0x34c341(0xec)](_0x5bd093);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xa04),_0x18d046=>{const _0x36ec73=_0xabeb6b;if(!SceneManager[_0x36ec73(0x87a)]())return;VisuMZ[_0x36ec73(0x410)](_0x18d046,_0x18d046);const _0x35a435=$gameTemp[_0x36ec73(0x653)](),_0x11f4be=BattleManager[_0x36ec73(0x984)],_0x2861f4=BattleManager[_0x36ec73(0x4ee)];if(!_0x35a435||!_0x11f4be||!_0x2861f4)return;if(!_0x11f4be[_0x36ec73(0xb39)]())return;const _0x3ada4=VisuMZ[_0x36ec73(0x6b6)](_0x18d046[_0x36ec73(0x78b)]);for(const _0x42b3a4 of _0x3ada4){if(!_0x42b3a4)continue;_0x18d046[_0x36ec73(0x318)]&&(_0x42b3a4[_0x36ec73(0xe7)](),_0x42b3a4[_0x36ec73(0x28e)](_0x42b3a4[_0x36ec73(0x50f)]())),_0x42b3a4[_0x36ec73(0x9d4)]()&&_0x42b3a4[_0x36ec73(0xbad)]();}_0x35a435['setWaitMode']('battleEffect');}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x23a),_0x1fb058=>{const _0x373922=_0xabeb6b;if(!SceneManager[_0x373922(0x87a)]())return;if(!Imported[_0x373922(0x985)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x373922(0x410)](_0x1fb058,_0x1fb058);const _0x5ba47a=VisuMZ[_0x373922(0x6b6)](_0x1fb058['Targets']),_0x1096c8=_0x1fb058[_0x373922(0x29a)];for(const _0x2d52a4 of _0x5ba47a){if(!_0x2d52a4)continue;_0x2d52a4['changeTurnOrderByCTB'](_0x1096c8);}}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x7a4),_0x4c9a52=>{const _0x297d8d=_0xabeb6b;if(!SceneManager[_0x297d8d(0x87a)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x297d8d(0x410)](_0x4c9a52,_0x4c9a52);const _0x532b09=VisuMZ[_0x297d8d(0x6b6)](_0x4c9a52[_0x297d8d(0x78b)]),_0x5dd823=_0x4c9a52[_0x297d8d(0xaf7)],_0x5827ae=_0x4c9a52[_0x297d8d(0xaf7)];for(const _0x585430 of _0x532b09){if(!_0x585430)continue;if(_0x585430[_0x297d8d(0x2d1)]==='charging')_0x585430[_0x297d8d(0x8b3)](_0x5dd823);else _0x585430[_0x297d8d(0x2d1)]===_0x297d8d(0x22c)&&_0x585430[_0x297d8d(0xb9c)](_0x5827ae);}}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x2df),_0x197bc7=>{const _0xdd3e2d=_0xabeb6b;if(!SceneManager[_0xdd3e2d(0x87a)]())return;VisuMZ[_0xdd3e2d(0x410)](_0x197bc7,_0x197bc7);const _0x1692fc=BattleManager['_action'];if(!_0x1692fc)return;let _0x6c0053=_0x197bc7[_0xdd3e2d(0x112)];_0x1692fc[_0xdd3e2d(0xb46)](_0x6c0053);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xbd3),_0x52993d=>{const _0x5d2efd=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5d2efd(0x410)](_0x52993d,_0x52993d);const _0x104b24=VisuMZ['CreateActionSequenceTargets'](_0x52993d[_0x5d2efd(0x78b)]);for(const _0x4947ad of _0x104b24){if(!_0x4947ad)continue;if(_0x4947ad['shouldPopupDamage']())_0x4947ad[_0x5d2efd(0x998)]();}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Mechanics_DeathBreak',_0x2ed2dc=>{const _0x48d0fb=_0xabeb6b;if(!SceneManager[_0x48d0fb(0x87a)]())return;VisuMZ[_0x48d0fb(0x410)](_0x2ed2dc,_0x2ed2dc);const _0x3cb0fd=$gameTemp[_0x48d0fb(0x653)](),_0x2e781d=BattleManager[_0x48d0fb(0x4ee)],_0x48b868=_0x2ed2dc[_0x48d0fb(0xa21)];if(!_0x3cb0fd)return;if(!_0x2e781d)return;_0x2e781d&&_0x2e781d['isDead']()&&_0x48b868[_0x48d0fb(0xf8)]()[_0x48d0fb(0xd3)]()!==_0x48d0fb(0x331)&&_0x3cb0fd[_0x48d0fb(0x532)]([_0x48b868]);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x73a),_0x21c9ba=>{const _0x5cb37b=_0xabeb6b;if(!SceneManager[_0x5cb37b(0x87a)]())return;VisuMZ[_0x5cb37b(0x410)](_0x21c9ba,_0x21c9ba);const _0x1b2403=$gameTemp[_0x5cb37b(0x653)](),_0x20646a=BattleManager['_logWindow'];if(!_0x1b2403)return;const _0x1e0dba=VisuMZ[_0x5cb37b(0x6b6)](_0x21c9ba[_0x5cb37b(0x220)]),_0x3e2fd9=VisuMZ[_0x5cb37b(0x6b6)](_0x21c9ba[_0x5cb37b(0x78b)]);for(const _0x5ef53b of _0x1e0dba){for(const _0x30fd91 of _0x3e2fd9){if(!_0x30fd91)continue;const _0x1d771b=$dataSkills[_0x5ef53b[_0x5cb37b(0x73d)]()];_0x20646a[_0x5cb37b(0x5cb)](_0x5cb37b(0x38b),_0x5ef53b,_0x30fd91,_0x1d771b);}}_0x1b2403[_0x5cb37b(0xa1d)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x399),_0x1ae16e=>{const _0x148bfe=_0xabeb6b;if(!SceneManager[_0x148bfe(0x87a)]())return;VisuMZ[_0x148bfe(0x410)](_0x1ae16e,_0x1ae16e);const _0x151177=$gameTemp[_0x148bfe(0x653)](),_0x15ae36=BattleManager[_0x148bfe(0x6c2)];if(!_0x151177)return;const _0x5e1727=VisuMZ[_0x148bfe(0x6b6)](_0x1ae16e[_0x148bfe(0x220)]),_0x1c39b3=VisuMZ[_0x148bfe(0x6b6)](_0x1ae16e[_0x148bfe(0x78b)]);for(const _0x431eca of _0x5e1727){for(const _0x6563e of _0x1c39b3){if(!_0x6563e)continue;const _0x23d3cd=$dataSkills[_0x431eca['guardSkillId']()];_0x15ae36[_0x148bfe(0x5cb)](_0x148bfe(0x38b),_0x431eca,_0x6563e,_0x23d3cd);}}_0x151177['setWaitMode']('battlelog');}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Mechanics_EmulateItemEffect',_0xdbb067=>{const _0x76bc50=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0xdbb067,_0xdbb067);const _0x1045fc=$gameTemp[_0x76bc50(0x653)](),_0x25924d=BattleManager[_0x76bc50(0x6c2)],_0x197f1e=Number(_0xdbb067[_0x76bc50(0xbb6)]||0x1),_0x25b857=$dataItems[_0x197f1e];if(!_0x1045fc)return;if(!_0x25b857)return;const _0x430388=VisuMZ[_0x76bc50(0x6b6)](_0xdbb067['Users']),_0x53911e=VisuMZ[_0x76bc50(0x6b6)](_0xdbb067[_0x76bc50(0x78b)]);for(const _0x4900b7 of _0x430388){for(const _0xdd234e of _0x53911e){if(!_0xdd234e)continue;_0x25924d['push']('emulateActionEffect',_0x4900b7,_0xdd234e,_0x25b857);}}_0x1045fc[_0x76bc50(0xa1d)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x14f),_0x2a11e0=>{const _0x7c782e=_0xabeb6b;if(!SceneManager[_0x7c782e(0x87a)]())return;VisuMZ[_0x7c782e(0x410)](_0x2a11e0,_0x2a11e0);let _0x1f5ccd=Number(_0x2a11e0[_0x7c782e(0x663)]||0x0);if(_0x1f5ccd<=0x0){const _0x16fe01=BattleManager[_0x7c782e(0x984)];if(_0x16fe01&&_0x16fe01[_0x7c782e(0x901)]())_0x1f5ccd=_0x16fe01['item']()['id'];else return;}const _0x42b9fa=$dataSkills[_0x1f5ccd];if(!_0x42b9fa)return;const _0x2c943c=VisuMZ[_0x7c782e(0x6b6)](_0x2a11e0[_0x7c782e(0x220)]);for(const _0x5582d7 of _0x2c943c){_0x5582d7[_0x7c782e(0x7ba)](_0x42b9fa);}}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x60e),_0x5ed8bf=>{const _0x581f55=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x581f55(0x410)](_0x5ed8bf,_0x5ed8bf);const _0x4f72f3=$gameTemp[_0x581f55(0x653)](),_0x2a0287=BattleManager[_0x581f55(0x6c2)],_0x2ef54f=Number(_0x5ed8bf['SkillID']||0x1),_0x44763b=$dataSkills[_0x2ef54f];if(!_0x4f72f3)return;if(!_0x44763b)return;const _0x217c84=VisuMZ[_0x581f55(0x6b6)](_0x5ed8bf[_0x581f55(0x220)]),_0x55f55f=VisuMZ[_0x581f55(0x6b6)](_0x5ed8bf[_0x581f55(0x78b)]);for(const _0x2207c9 of _0x217c84){for(const _0x5961a9 of _0x55f55f){if(!_0x5961a9)continue;_0x2a0287[_0x581f55(0x5cb)](_0x581f55(0x38b),_0x2207c9,_0x5961a9,_0x44763b);}}_0x4f72f3[_0x581f55(0xa1d)](_0x581f55(0x555));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Mechanics_EnemyEscape',_0x51a082=>{const _0x206ee0=_0xabeb6b;if(!SceneManager[_0x206ee0(0x87a)]())return;VisuMZ[_0x206ee0(0x410)](_0x51a082,_0x51a082);const _0x7b45f7=VisuMZ[_0x206ee0(0x6b6)](_0x51a082[_0x206ee0(0x78b)]);for(const _0x27b072 of _0x7b45f7){if(!_0x27b072)continue;if(!_0x27b072[_0x206ee0(0x54b)]())continue;_0x27b072[_0x206ee0(0x5db)]();}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x296),_0x17f860=>{const _0x520e56=_0xabeb6b;if(!SceneManager[_0x520e56(0x87a)]())return;if(!Imported[_0x520e56(0x1d4)])return;if(!BattleManager[_0x520e56(0xa73)]())return;VisuMZ[_0x520e56(0x410)](_0x17f860,_0x17f860);const _0x14a1b8=_0x17f860[_0x520e56(0x20d)];BattleManager[_0x520e56(0x4ee)]&&BattleManager[_0x520e56(0x4ee)][_0x520e56(0xa4a)]()['gainCurrentActionsETB'](_0x14a1b8);}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x55a),_0x3ef1b9=>{const _0xdbee11=_0xabeb6b;if(!SceneManager[_0xdbee11(0x87a)]())return;if(!Imported[_0xdbee11(0x99e)])return;if(!BattleManager[_0xdbee11(0x870)]())return;VisuMZ['ConvertParams'](_0x3ef1b9,_0x3ef1b9);const _0x245f03=_0x3ef1b9[_0xdbee11(0x20d)];BattleManager['_subject']&&BattleManager['_subject'][_0xdbee11(0xa4a)]()['gainCurrentActionsFTB'](_0x245f03);}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Mechanics_HpMpTp',_0x59bf3f=>{const _0x529560=_0xabeb6b;if(!SceneManager[_0x529560(0x87a)]())return;VisuMZ['ConvertParams'](_0x59bf3f,_0x59bf3f);const _0x472d44=VisuMZ[_0x529560(0x6b6)](_0x59bf3f[_0x529560(0x78b)]),_0x435261=_0x59bf3f[_0x529560(0x872)],_0x484fc1=_0x59bf3f[_0x529560(0x63d)],_0x57647a=_0x59bf3f[_0x529560(0x561)],_0x4b21fa=_0x59bf3f[_0x529560(0x334)],_0x5d7ec5=_0x59bf3f['TP_Rate'],_0x34efd3=_0x59bf3f[_0x529560(0xb0d)],_0x233ea6=_0x59bf3f[_0x529560(0x921)];for(const _0x46108c of _0x472d44){if(!_0x46108c)continue;const _0x5a9614=_0x46108c[_0x529560(0x946)](),_0x2ff759=Math['round'](_0x435261*_0x46108c['mhp']+_0x484fc1),_0x595d92=Math[_0x529560(0xb36)](_0x57647a*_0x46108c['mmp']+_0x4b21fa),_0x405419=Math[_0x529560(0xb36)](_0x5d7ec5*_0x46108c[_0x529560(0x74b)]()+_0x34efd3);if(_0x2ff759!==0x0)_0x46108c['gainHp'](_0x2ff759);if(_0x595d92!==0x0)_0x46108c['gainMp'](_0x595d92);if(_0x405419!==0x0)_0x46108c[_0x529560(0x605)](_0x405419);if(_0x233ea6)_0x46108c['startDamagePopup']();_0x5a9614&&_0x46108c[_0x529560(0x69e)]()&&_0x46108c[_0x529560(0xbad)]();}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x1d0),_0x102a4c=>{const _0xc43dd1=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xc43dd1(0x410)](_0x102a4c,_0x102a4c);const _0x533633=VisuMZ[_0xc43dd1(0x6b6)](_0x102a4c['Targets']);for(const _0x6d7f30 of _0x533633){if(!_0x6d7f30)continue;_0x6d7f30[_0xc43dd1(0x4e6)](_0x102a4c[_0xc43dd1(0x4bb)]);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x436),_0x1b4b6c=>{const _0x36b3f0=_0xabeb6b;if(!SceneManager[_0x36b3f0(0x87a)]())return;VisuMZ[_0x36b3f0(0x410)](_0x1b4b6c,_0x1b4b6c);const _0x108bc3=BattleManager['_action'],_0x3ec3b5={'criticalHitRate':_0x1b4b6c['CriticalHitRate'],'criticalHitFlat':_0x1b4b6c[_0x36b3f0(0x468)],'criticalDmgRate':_0x1b4b6c[_0x36b3f0(0x37e)],'criticalDmgFlat':_0x1b4b6c[_0x36b3f0(0x215)],'damageRate':_0x1b4b6c[_0x36b3f0(0x8ef)],'damageFlat':_0x1b4b6c['DamageFlat'],'hitRate':_0x1b4b6c[_0x36b3f0(0x874)],'hitFlat':_0x1b4b6c[_0x36b3f0(0xce)]};_0x108bc3[_0x36b3f0(0xbcf)]=_0x3ec3b5;}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x149),_0x48a6db=>{const _0x3a9a08=_0xabeb6b;if(!SceneManager[_0x3a9a08(0x87a)]())return;VisuMZ[_0x3a9a08(0x410)](_0x48a6db,_0x48a6db);const _0x69fa65=_0x48a6db[_0x3a9a08(0xb52)];SceneManager[_0x3a9a08(0x483)][_0x3a9a08(0x73f)](_0x69fa65);}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x583),_0x2ce812=>{const _0x6e6150=_0xabeb6b;if(!SceneManager[_0x6e6150(0x87a)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager[_0x6e6150(0x496)]())return;VisuMZ[_0x6e6150(0x410)](_0x2ce812,_0x2ce812);const _0x3eb162=VisuMZ['CreateActionSequenceTargets'](_0x2ce812[_0x6e6150(0x78b)]);for(const _0x4f7f99 of _0x3eb162){if(!_0x4f7f99)continue;let _0x2b8a9f=_0x2ce812[_0x6e6150(0x3e7)],_0xfb7272=_0x2ce812[_0x6e6150(0x427)],_0x6c5d5e=_0x2ce812[_0x6e6150(0x8f9)];BattleManager[_0x6e6150(0x7a6)]['includes'](_0x4f7f99)?_0x2b8a9f+=_0x6c5d5e:_0xfb7272+=_0x6c5d5e,BattleManager['turnOrderChangeOTB'](_0x4f7f99,-_0x2b8a9f,![]),BattleManager[_0x6e6150(0x8da)](_0x4f7f99,-_0xfb7272,!![]);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Mechanics_PtbAlterCost',_0x47a496=>{const _0x598626=_0xabeb6b;if(!SceneManager[_0x598626(0x87a)]())return;if(!Imported[_0x598626(0x311)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x598626(0x410)](_0x47a496,_0x47a496);const _0x1a7b21=BattleManager[_0x598626(0x4ee)][_0x598626(0xa4a)](),_0x5e0f2d=_0x47a496[_0x598626(0x772)],_0x5c18e6=_0x47a496[_0x598626(0x860)]||_0x598626(0x7f0),_0x5c3e00=_0x47a496[_0x598626(0x55f)]||_0x598626(0x7f0),_0x39520e=_0x47a496[_0x598626(0x61c)]||0x0,_0x385c6d=_0x47a496[_0x598626(0x733)]||0x0;(_0x1a7b21['canAlterActionCostPTB']()||_0x5e0f2d)&&(_0x5e0f2d&&(_0x1a7b21['_ptbActionCost']=_0x1a7b21['_ptbActionCost']||{},_0x1a7b21['_ptbActionCost']['priority']=0x0),_0x1a7b21['alterActionCostPTB'](_0x5c18e6,_0x5c3e00,_0x39520e,_0x385c6d));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x7f5),_0x9416f7=>{const _0x531dd1=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x531dd1(0x311)])return;if(!BattleManager[_0x531dd1(0x98f)]())return;VisuMZ['ConvertParams'](_0x9416f7,_0x9416f7);const _0x527e29=BattleManager['_subject']['friendsUnit']();let _0x26572e=Math['max'](_0x9416f7[_0x531dd1(0x121)],0x0),_0x376e36=_0x527e29['getFullActionsPTB'](),_0x19c6e1=_0x527e29[_0x531dd1(0x7eb)]();while(_0x26572e--){if(_0x376e36<=0x0&&_0x19c6e1<=0x0)break;else _0x376e36>0x0?(_0x376e36--,_0x19c6e1++):_0x19c6e1--;}_0x527e29[_0x531dd1(0x6da)](_0x376e36),_0x527e29['setHalfActionsPTB'](_0x19c6e1);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Mechanics_PtbFullHalfAction',_0x3eaaa8=>{const _0xf9ccf3=_0xabeb6b;if(!SceneManager[_0xf9ccf3(0x87a)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0xf9ccf3(0x98f)]())return;VisuMZ[_0xf9ccf3(0x410)](_0x3eaaa8,_0x3eaaa8);const _0x1e8857=BattleManager[_0xf9ccf3(0x4ee)][_0xf9ccf3(0xa4a)]();let _0x4a0245=_0x3eaaa8[_0xf9ccf3(0x760)],_0x4c2338=_0x3eaaa8[_0xf9ccf3(0xb7)];_0x1e8857[_0xf9ccf3(0x9b9)](_0x4a0245),_0x1e8857[_0xf9ccf3(0x188)](_0x4c2338);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x516),_0x35e886=>{const _0x3460e4=_0xabeb6b;if(!SceneManager[_0x3460e4(0x87a)]())return;VisuMZ['ConvertParams'](_0x35e886,_0x35e886);const _0x373a3c=[_0x3460e4(0x4f4),_0x3460e4(0xb8d),'ATK','DEF','MAT','MDF',_0x3460e4(0x6cd),_0x3460e4(0xa68)],_0x21941d=_0x35e886[_0x3460e4(0x6fc)],_0x4d03e4=_0x35e886[_0x3460e4(0x685)],_0x5b54f9=VisuMZ[_0x3460e4(0x6b6)](_0x35e886[_0x3460e4(0x78b)]);for(const _0x18533b of _0x5b54f9){if(!_0x18533b)continue;for(const _0x47903f of _0x21941d){const _0x492421=_0x373a3c['indexOf'](_0x47903f['toUpperCase']()['trim']());_0x492421>=0x0&&_0x492421<=0x7&&_0x18533b[_0x3460e4(0x873)](_0x492421)&&_0x18533b[_0x3460e4(0xad3)](_0x492421);}for(const _0x4da09d of _0x4d03e4){const _0x4ff688=_0x373a3c[_0x3460e4(0x996)](_0x4da09d[_0x3460e4(0xf8)]()[_0x3460e4(0xd3)]());_0x4ff688>=0x0&&_0x4ff688<=0x7&&_0x18533b[_0x3460e4(0xa3a)](_0x4ff688)&&_0x18533b[_0x3460e4(0xad3)](_0x4ff688);}}}),PluginManager['registerCommand'](pluginData['name'],_0xabeb6b(0x3ee),_0x5501b3=>{const _0x5bc011=_0xabeb6b;if(!SceneManager[_0x5bc011(0x87a)]())return;VisuMZ[_0x5bc011(0x410)](_0x5501b3,_0x5501b3);const _0x4dbf9e=_0x5501b3[_0x5bc011(0x86c)],_0x1ff941=VisuMZ[_0x5bc011(0x6b6)](_0x5501b3[_0x5bc011(0x78b)]);for(const _0x3776f3 of _0x1ff941){if(!_0x3776f3)continue;for(const _0x56193f of _0x4dbf9e){_0x3776f3[_0x5bc011(0xafe)](_0x56193f);}}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Mechanics_StateTurnsChangeBy',_0xebbb8f=>{const _0x1468ee=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1468ee(0x707)])return;VisuMZ[_0x1468ee(0x410)](_0xebbb8f,_0xebbb8f);const _0x129e6f=VisuMZ[_0x1468ee(0x6b6)](_0xebbb8f[_0x1468ee(0x78b)]),_0x10ed8a=Number(_0xebbb8f[_0x1468ee(0x882)]),_0x1d99ef=Number(_0xebbb8f[_0x1468ee(0x7f8)]),_0x4fcc22=_0xebbb8f[_0x1468ee(0x424)];for(const _0x208a48 of _0x129e6f){if(!_0x208a48)continue;_0x4fcc22&&!_0x208a48[_0x1468ee(0x4f2)](_0x10ed8a)?(_0x208a48[_0x1468ee(0x28e)](_0x10ed8a),_0x208a48[_0x1468ee(0x11e)](_0x10ed8a,_0x1d99ef)):_0x208a48[_0x1468ee(0x9b2)](_0x10ed8a,_0x1d99ef);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Mechanics_StateTurnsChangeTo',_0xd4d60f=>{const _0x2f5b4d=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2f5b4d(0x707)])return;VisuMZ[_0x2f5b4d(0x410)](_0xd4d60f,_0xd4d60f);const _0x39a5a3=VisuMZ['CreateActionSequenceTargets'](_0xd4d60f[_0x2f5b4d(0x78b)]),_0x68c239=Number(_0xd4d60f[_0x2f5b4d(0x882)]),_0x2150b0=Math[_0x2f5b4d(0xb72)](Number(_0xd4d60f[_0x2f5b4d(0x7f8)]),0x0),_0x2bcfaa=_0xd4d60f[_0x2f5b4d(0x424)];for(const _0x282f82 of _0x39a5a3){if(!_0x282f82)continue;_0x2bcfaa&&!_0x282f82[_0x2f5b4d(0x4f2)](_0x68c239)&&_0x282f82[_0x2f5b4d(0x28e)](_0x68c239),_0x282f82[_0x2f5b4d(0x11e)](_0x68c239,_0x2150b0);}}),PluginManager['registerCommand'](pluginData['name'],_0xabeb6b(0x482),_0x331c13=>{const _0x295b7f=_0xabeb6b;if(!SceneManager[_0x295b7f(0x87a)]())return;if(!Imported[_0x295b7f(0x3b4)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x295b7f(0x410)](_0x331c13,_0x331c13);const _0x592bd8=_0x331c13[_0x295b7f(0x1fe)],_0x4a2f81=VisuMZ[_0x295b7f(0x6b6)](_0x331c13['Targets']),_0x414360=_0x331c13[_0x295b7f(0x966)],_0x219059=_0x331c13[_0x295b7f(0x6ee)],_0x1e65c0=_0x331c13[_0x295b7f(0x885)],_0x342dc2=BattleManager[_0x295b7f(0x984)];if(_0x592bd8)for(const _0x59b759 of _0x4a2f81){if(!_0x59b759)continue;if(_0x59b759===BattleManager[_0x295b7f(0x4ee)])continue;if(_0x414360)_0x59b759[_0x295b7f(0x65f)](![]);_0x59b759[_0x295b7f(0x156)](BattleManager['_subject'],_0x342dc2);}if(_0x219059&&BattleManager[_0x295b7f(0x4ee)]){if(_0x1e65c0)BattleManager[_0x295b7f(0x4ee)]['setSTBExploited'](![]);const _0x10b5a0=_0x4a2f81[0x0];BattleManager[_0x295b7f(0x4ee)][_0x295b7f(0x512)](_0x10b5a0,_0x342dc2);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x307),_0x291d91=>{const _0x435050=_0xabeb6b;if(!SceneManager[_0x435050(0x87a)]())return;if(!Imported[_0x435050(0x3b4)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x435050(0x410)](_0x291d91,_0x291d91);const _0x4ce562=_0x291d91[_0x435050(0x241)];BattleManager[_0x435050(0x4ee)]&&BattleManager['_subject'][_0x435050(0x7f1)](_0x4ce562);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xb07),_0x2ce76e=>{const _0x3e9778=_0xabeb6b;if(!SceneManager[_0x3e9778(0x87a)]())return;if(!Imported[_0x3e9778(0x3b4)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x3e9778(0x410)](_0x2ce76e,_0x2ce76e);let _0x52ca0b=_0x2ce76e['Actions'];if(BattleManager['_subject']){BattleManager[_0x3e9778(0x4ee)][_0x3e9778(0x22e)]=BattleManager[_0x3e9778(0x4ee)][_0x3e9778(0x22e)]||[];while(_0x52ca0b--){if(BattleManager[_0x3e9778(0x4ee)][_0x3e9778(0x22e)][_0x3e9778(0x93a)]<=0x0)break;BattleManager[_0x3e9778(0x4ee)][_0x3e9778(0x22e)][_0x3e9778(0x95f)]();}}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Mechanics_SwapWeapon',_0x1c77fa=>{const _0x1b211d=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1b211d(0xb13)])return;VisuMZ[_0x1b211d(0x410)](_0x1c77fa,_0x1c77fa);const _0x2cdc41=VisuMZ[_0x1b211d(0x6b6)](_0x1c77fa[_0x1b211d(0x78b)]),_0x4c2334=_0x1c77fa['WeaponTypeID'];for(const _0x471347 of _0x2cdc41){if(!_0x471347)continue;if(!_0x471347[_0x1b211d(0xb6a)]())continue;_0x471347[_0x1b211d(0x61b)](_0x4c2334);}}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0xa92),_0x53634b=>{const _0x334b4b=_0xabeb6b;if(!SceneManager[_0x334b4b(0x87a)]())return;VisuMZ['ConvertParams'](_0x53634b,_0x53634b);const _0x25da0e=VisuMZ[_0x334b4b(0x6b6)](_0x53634b[_0x334b4b(0x78b)]),_0x591c70=_0x53634b[_0x334b4b(0x494)],_0x223faf={'textColor':ColorManager['getColor'](_0x53634b[_0x334b4b(0x5ea)]),'flashColor':_0x53634b[_0x334b4b(0x7d0)],'flashDuration':_0x53634b[_0x334b4b(0x1da)]};for(const _0x3ab2b3 of _0x25da0e){if(!_0x3ab2b3)continue;_0x3ab2b3[_0x334b4b(0x400)](_0x591c70,_0x223faf);}}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x64c),_0x532f69=>{const _0x5b706c=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5b706c(0x410)](_0x532f69,_0x532f69);const _0x4a9f34=VisuMZ[_0x5b706c(0x6b6)](_0x532f69[_0x5b706c(0x78b)]);let _0x4d57c0=$gameVariables[_0x5b706c(0x2d9)](_0x532f69[_0x5b706c(0x597)]);Imported[_0x5b706c(0x765)]&&_0x532f69['DigitGrouping']&&(_0x4d57c0=VisuMZ[_0x5b706c(0x346)](_0x4d57c0));const _0x552458=String(_0x4d57c0),_0x30c0e2={'textColor':ColorManager[_0x5b706c(0x2c5)](_0x532f69[_0x5b706c(0x5ea)]),'flashColor':_0x532f69[_0x5b706c(0x7d0)],'flashDuration':_0x532f69[_0x5b706c(0x1da)]};for(const _0x49240a of _0x4a9f34){if(!_0x49240a)continue;_0x49240a['setupTextPopup'](_0x552458,_0x30c0e2);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x6db),_0x2af110=>{const _0x1bd59f=_0xabeb6b;if(!SceneManager[_0x1bd59f(0x87a)]())return;const _0x118c67=$gameTemp[_0x1bd59f(0x653)]();if(!_0x118c67)return;_0x118c67[_0x1bd59f(0xa1d)](_0x1bd59f(0x51e));}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Motion_ClearFreezeFrame',_0x94e470=>{const _0x23658e=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x23658e(0x410)](_0x94e470,_0x94e470);const _0x566118=VisuMZ[_0x23658e(0x6b6)](_0x94e470['Targets']);for(const _0x5811e4 of _0x566118){if(!_0x5811e4)continue;_0x5811e4['clearFreezeMotion']();}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x168),_0x5766c2=>{const _0x55c0de=_0xabeb6b;if(!SceneManager[_0x55c0de(0x87a)]())return;VisuMZ[_0x55c0de(0x410)](_0x5766c2,_0x5766c2);const _0x45fcf2=VisuMZ[_0x55c0de(0x6b6)](_0x5766c2[_0x55c0de(0x78b)]),_0x499a5a=_0x5766c2[_0x55c0de(0x2e8)][_0x55c0de(0xa5b)]()[_0x55c0de(0xd3)]();let _0x5177b3=_0x5766c2[_0x55c0de(0x831)];const _0x230107=_0x5766c2[_0x55c0de(0x763)];![_0x55c0de(0xa71),_0x55c0de(0x4d8),'swing',_0x55c0de(0x717)]['includes'](_0x499a5a)&&(_0x5177b3=![]);for(const _0x19b947 of _0x45fcf2){if(!_0x19b947)continue;_0x19b947['freezeMotion'](_0x499a5a,_0x5177b3,_0x230107);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x95c),_0x42ae57=>{const _0x2a9d18=_0xabeb6b;if(!SceneManager[_0x2a9d18(0x87a)]())return;VisuMZ[_0x2a9d18(0x410)](_0x42ae57,_0x42ae57);const _0x33d553=VisuMZ[_0x2a9d18(0x6b6)](_0x42ae57[_0x2a9d18(0x78b)]),_0x2c2a3c=_0x42ae57[_0x2a9d18(0x2e8)][_0x2a9d18(0xa5b)]()[_0x2a9d18(0xd3)](),_0x258ac2=_0x42ae57['ShowWeapon'];for(const _0xda5135 of _0x33d553){if(!_0xda5135)continue;_0xda5135[_0x2a9d18(0x7e3)]=_0x258ac2;if(_0x2c2a3c[_0x2a9d18(0xef)](/ATTACK[ ](\d+)/i))_0xda5135[_0x2a9d18(0x713)](Number(RegExp['$1']));else _0x2c2a3c===_0x2a9d18(0xa71)?_0xda5135['performAttack']():_0xda5135[_0x2a9d18(0x67a)](_0x2c2a3c);if(!_0x258ac2)_0xda5135['startWeaponAnimation'](0x0);else{if(_0x258ac2&&['thrust',_0x2a9d18(0xd7),_0x2a9d18(0x2fa)][_0x2a9d18(0x5d8)](_0x2c2a3c)){}}_0xda5135[_0x2a9d18(0x7e3)]=undefined;}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x687),_0x43deaa=>{const _0x32ce89=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x32ce89(0x410)](_0x43deaa,_0x43deaa);const _0x33cca9=BattleManager[_0x32ce89(0x984)];if(!_0x33cca9)return;if(!_0x33cca9[_0x32ce89(0xb39)]())return;const _0x51cbf0=VisuMZ[_0x32ce89(0x6b6)](_0x43deaa[_0x32ce89(0x78b)]);for(const _0x72647b of _0x51cbf0){if(!_0x72647b)continue;_0x72647b['performAction'](_0x33cca9);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x1cd),_0x4c506e=>{const _0x59a90f=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x59a90f(0x410)](_0x4c506e,_0x4c506e);const _0x409503=VisuMZ[_0x59a90f(0x6b6)](_0x4c506e[_0x59a90f(0x78b)]);for(const _0x3f2b9b of _0x409503){if(!_0x3f2b9b)continue;if(!_0x3f2b9b['battler']())continue;_0x3f2b9b[_0x59a90f(0x7bb)]()[_0x59a90f(0x543)]();}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x5f5),_0x5c6d87=>{const _0x586e79=_0xabeb6b;if(!SceneManager[_0x586e79(0x87a)]())return;VisuMZ[_0x586e79(0x410)](_0x5c6d87,_0x5c6d87);const _0x59affb=$gameTemp[_0x586e79(0x653)](),_0x555934=_0x5c6d87[_0x586e79(0xb41)]*Sprite_Battler[_0x586e79(0x723)];_0x59affb[_0x586e79(0x269)](_0x555934);}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x69a),_0x1d346f=>{const _0x45ecce=_0xabeb6b;if(!SceneManager[_0x45ecce(0x87a)]())return;VisuMZ['ConvertParams'](_0x1d346f,_0x1d346f);const _0x4741d6=$gameTemp[_0x45ecce(0x653)](),_0x51e91e=BattleManager[_0x45ecce(0x984)];if(!_0x4741d6||!_0x51e91e)return;if(!_0x51e91e[_0x45ecce(0xb39)]())return;const _0x2b9caf=VisuMZ[_0x45ecce(0x6b6)](_0x1d346f[_0x45ecce(0x78b)]);for(const _0x358827 of _0x2b9caf){if(!_0x358827)continue;_0x358827[_0x45ecce(0xa23)](_0x51e91e);}if(_0x1d346f[_0x45ecce(0xbbb)])_0x4741d6[_0x45ecce(0xa1d)](_0x45ecce(0x66f));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x830),_0x4be5ec=>{const _0x464c13=_0xabeb6b;if(!SceneManager[_0x464c13(0x87a)]())return;if(!$gameSystem[_0x464c13(0x4d5)]())return;VisuMZ[_0x464c13(0x410)](_0x4be5ec,_0x4be5ec);const _0x3c5576=$gameTemp[_0x464c13(0x653)](),_0x40def7=VisuMZ[_0x464c13(0x6b6)](_0x4be5ec[_0x464c13(0x78b)]),_0x5a79aa=_0x4be5ec[_0x464c13(0x1bf)],_0x33445a=_0x4be5ec['DistanceX'],_0x8ef3bd=_0x4be5ec[_0x464c13(0x7bf)],_0x17b486=_0x4be5ec[_0x464c13(0xa45)],_0x5ca2cb=_0x4be5ec[_0x464c13(0x4e5)],_0x39b970=_0x4be5ec[_0x464c13(0x93d)],_0x30ce91=_0x4be5ec[_0x464c13(0x2e8)],_0x3d8192=_0x4be5ec[_0x464c13(0xbbb)];if(!_0x3c5576)return;for(const _0x2fe9b7 of _0x40def7){if(!_0x2fe9b7)continue;let _0x1297f5=_0x33445a,_0x46f251=_0x8ef3bd;if(_0x5a79aa[_0x464c13(0xef)](/horz/i))_0x1297f5*=_0x2fe9b7['isActor']()?-0x1:0x1;if(_0x5a79aa[_0x464c13(0xef)](/vert/i))_0x46f251*=_0x2fe9b7[_0x464c13(0xb6a)]()?-0x1:0x1;_0x2fe9b7[_0x464c13(0xbe4)](_0x1297f5,_0x46f251,_0x17b486,_0x5ca2cb,_0x39b970),_0x2fe9b7[_0x464c13(0x67a)](_0x30ce91);}if(_0x3d8192)_0x3c5576[_0x464c13(0xa1d)](_0x464c13(0x66f));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Movement_HomeMoveToJsPoint',_0x2d17a3=>{const _0x30201f=_0xabeb6b;if(!SceneManager[_0x30201f(0x87a)]())return;if(!$gameSystem[_0x30201f(0x4d5)]())return;VisuMZ[_0x30201f(0x410)](_0x2d17a3,_0x2d17a3);const _0x3bef78=$gameTemp[_0x30201f(0x653)](),_0x1bad54=VisuMZ['CreateActionSequenceTargets'](_0x2d17a3[_0x30201f(0x78b)]),_0x2dca49=_0x2d17a3['OffsetAdjust'],_0x31855a=_0x2d17a3[_0x30201f(0x163)],_0x950618=_0x2d17a3['OffsetY'],_0x31f380=_0x2d17a3[_0x30201f(0xa45)],_0x11d9bd=_0x2d17a3[_0x30201f(0x4e5)],_0x38d9ef=_0x2d17a3[_0x30201f(0x93d)],_0x4f3221=_0x2d17a3[_0x30201f(0x2e8)],_0x34745d=_0x2d17a3[_0x30201f(0xbbb)];if(!_0x3bef78)return;for(const _0x2b0e97 of _0x1bad54){if(!_0x2b0e97)continue;const _0x4dc1ef=_0x2d17a3[_0x30201f(0x7b7)](_0x2b0e97)||{'x':0x0,'y':0x0};let _0x20f432=_0x4dc1ef['x'],_0x284e8f=_0x4dc1ef['y'];if(_0x2dca49[_0x30201f(0xef)](/none/i))_0x20f432+=_0x31855a,_0x284e8f+=_0x950618;else{if(_0x2dca49[_0x30201f(0xef)](/horz/i)&&_0x2dca49[_0x30201f(0xef)](/vert/i))_0x20f432+=_0x2b0e97[_0x30201f(0xb6a)]()?-_0x31855a:_0x31855a,_0x284e8f+=_0x2b0e97[_0x30201f(0xb6a)]()?-_0x950618:_0x950618;else{if(_0x2dca49[_0x30201f(0xef)](/horz/i))_0x20f432+=_0x2b0e97[_0x30201f(0xb6a)]()?-_0x31855a:_0x31855a,_0x284e8f+=_0x950618;else _0x2dca49[_0x30201f(0xef)](/vert/i)&&(_0x20f432+=_0x31855a,_0x284e8f+=_0x2b0e97[_0x30201f(0xb6a)]()?-_0x950618:_0x950618);}}_0x2b0e97[_0x30201f(0x544)](_0x20f432,_0x284e8f,_0x31f380,_0x11d9bd,_0x38d9ef,-0x1),_0x2b0e97[_0x30201f(0x67a)](_0x4f3221);}if(_0x34745d)_0x3bef78['setWaitMode'](_0x30201f(0x66f));}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Movement_HomeMoveToPoint',_0x3e0499=>{const _0x1343b6=_0xabeb6b;if(!SceneManager[_0x1343b6(0x87a)]())return;if(!$gameSystem[_0x1343b6(0x4d5)]())return;VisuMZ['ConvertParams'](_0x3e0499,_0x3e0499);const _0x175dcc=$gameTemp[_0x1343b6(0x653)](),_0x48f500=VisuMZ['CreateActionSequenceTargets'](_0x3e0499['Targets']),_0x56901d=_0x3e0499[_0x1343b6(0x697)],_0x466cf8=_0x3e0499[_0x1343b6(0xb2f)],_0xdf6832=_0x3e0499[_0x1343b6(0x163)],_0x17b5c0=_0x3e0499[_0x1343b6(0x8f0)],_0x58fc24=_0x3e0499[_0x1343b6(0xa45)],_0x515eb7=_0x3e0499[_0x1343b6(0x4e5)],_0x45388f=_0x3e0499[_0x1343b6(0x93d)],_0x297485=_0x3e0499[_0x1343b6(0x2e8)],_0x18de35=_0x3e0499[_0x1343b6(0xbbb)];if(!_0x175dcc)return;for(const _0xaf42c5 of _0x48f500){if(!_0xaf42c5)continue;let _0x2f4675=_0xaf42c5[_0x1343b6(0x7bb)]()[_0x1343b6(0x945)],_0x4e3711=_0xaf42c5[_0x1343b6(0x7bb)]()['_baseY'];if(_0x56901d['match'](/home/i))_0x2f4675=_0xaf42c5[_0x1343b6(0x7bb)]()[_0x1343b6(0x615)],_0x4e3711=_0xaf42c5[_0x1343b6(0x7bb)]()[_0x1343b6(0x3a2)];else{if(_0x56901d['match'](/center/i))_0x2f4675=Graphics[_0x1343b6(0x143)]/0x2,_0x4e3711=Graphics[_0x1343b6(0x588)]/0x2;else _0x56901d[_0x1343b6(0xef)](/point (\d+), (\d+)/i)&&(_0x2f4675=Number(RegExp['$1']),_0x4e3711=Number(RegExp['$2']));}if(_0x466cf8[_0x1343b6(0xef)](/none/i))_0x2f4675+=_0xdf6832,_0x4e3711+=_0x17b5c0;else{if(_0x466cf8[_0x1343b6(0xef)](/horz/i)&&_0x466cf8['match'](/vert/i))_0x2f4675+=_0xaf42c5[_0x1343b6(0xb6a)]()?-_0xdf6832:_0xdf6832,_0x4e3711+=_0xaf42c5[_0x1343b6(0xb6a)]()?-_0x17b5c0:_0x17b5c0;else{if(_0x466cf8['match'](/horz/i))_0x2f4675+=_0xaf42c5[_0x1343b6(0xb6a)]()?-_0xdf6832:_0xdf6832,_0x4e3711+=_0x17b5c0;else _0x466cf8[_0x1343b6(0xef)](/vert/i)&&(_0x2f4675+=_0xdf6832,_0x4e3711+=_0xaf42c5[_0x1343b6(0xb6a)]()?-_0x17b5c0:_0x17b5c0);}}_0xaf42c5[_0x1343b6(0x544)](_0x2f4675,_0x4e3711,_0x58fc24,_0x515eb7,_0x45388f,-0x1),_0xaf42c5[_0x1343b6(0x67a)](_0x297485);}if(_0x18de35)_0x175dcc[_0x1343b6(0xa1d)](_0x1343b6(0x66f));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x4c9),_0x4bd7db=>{const _0xf9edcf=_0xabeb6b;if(!SceneManager[_0xf9edcf(0x87a)]())return;if(!$gameSystem[_0xf9edcf(0x4d5)]())return;VisuMZ['ConvertParams'](_0x4bd7db,_0x4bd7db);const _0x5d03d8=$gameTemp['getLastPluginCommandInterpreter'](),_0x57c830=VisuMZ[_0xf9edcf(0x6b6)](_0x4bd7db[_0xf9edcf(0x5d9)]),_0x386d72=VisuMZ[_0xf9edcf(0x6b6)](_0x4bd7db[_0xf9edcf(0x9a3)]),_0x3e3210=_0x4bd7db['TargetLocation'];let _0x4bdf42=_0x4bd7db[_0xf9edcf(0xb09)];const _0x51d0d9=_0x4bd7db[_0xf9edcf(0xb2f)],_0x464baa=_0x4bd7db['OffsetX'],_0x92609b=_0x4bd7db[_0xf9edcf(0x8f0)],_0x193d17=_0x4bd7db['Duration'],_0xf37bba=_0x4bd7db[_0xf9edcf(0x4e5)],_0x22ff2f=_0x4bd7db['EasingType'],_0xe65ddf=_0x4bd7db[_0xf9edcf(0x2e8)],_0x423c66=_0x4bd7db['WaitForMovement'],_0x4cf0ae=Math[_0xf9edcf(0x1be)](..._0x386d72[_0xf9edcf(0x614)](_0x2df3b3=>_0x2df3b3[_0xf9edcf(0x7bb)]()[_0xf9edcf(0x945)]-_0x2df3b3[_0xf9edcf(0x7bb)]()[_0xf9edcf(0x3c9)]()/0x2)),_0x4598e3=Math[_0xf9edcf(0xb72)](..._0x386d72['map'](_0x3e0f63=>_0x3e0f63[_0xf9edcf(0x7bb)]()[_0xf9edcf(0x945)]+_0x3e0f63['battler']()[_0xf9edcf(0x3c9)]()/0x2)),_0x4d8d80=Math['min'](..._0x386d72[_0xf9edcf(0x614)](_0xec6df8=>_0xec6df8['battler']()[_0xf9edcf(0xb85)]-_0xec6df8[_0xf9edcf(0x7bb)]()[_0xf9edcf(0x530)]())),_0x13d9d4=Math[_0xf9edcf(0xb72)](..._0x386d72[_0xf9edcf(0x614)](_0x2068ee=>_0x2068ee[_0xf9edcf(0x7bb)]()[_0xf9edcf(0xb85)])),_0xb0e2c1=_0x386d72[_0xf9edcf(0x959)](_0x59f79e=>_0x59f79e[_0xf9edcf(0xb6a)]())['length'],_0x2a37fb=_0x386d72['filter'](_0x45ba44=>_0x45ba44[_0xf9edcf(0x54b)]())['length'];let _0x5446a1=0x0,_0xd15915=0x0;if(_0x3e3210[_0xf9edcf(0xef)](/front/i))_0x5446a1=_0xb0e2c1>=_0x2a37fb?_0x4cf0ae:_0x4598e3;else{if(_0x3e3210[_0xf9edcf(0xef)](/middle/i))_0x5446a1=(_0x4cf0ae+_0x4598e3)/0x2,_0x4bdf42=-0x1;else _0x3e3210[_0xf9edcf(0xef)](/back/i)&&(_0x5446a1=_0xb0e2c1>=_0x2a37fb?_0x4598e3:_0x4cf0ae);}if(_0x3e3210[_0xf9edcf(0xef)](/head/i))_0xd15915=_0x4d8d80;else{if(_0x3e3210[_0xf9edcf(0xef)](/center/i))_0xd15915=(_0x4d8d80+_0x13d9d4)/0x2;else _0x3e3210[_0xf9edcf(0xef)](/base/i)&&(_0xd15915=_0x13d9d4);}if(!_0x5d03d8)return;for(const _0x2fbaaa of _0x57c830){if(!_0x2fbaaa)continue;let _0x5c13b4=_0x5446a1,_0x432d6f=_0xd15915;if(_0x51d0d9[_0xf9edcf(0xef)](/none/i))_0x5c13b4+=_0x464baa,_0x432d6f+=_0x92609b;else{if(_0x51d0d9[_0xf9edcf(0xef)](/horz/i)&&_0x51d0d9[_0xf9edcf(0xef)](/vert/i))_0x5c13b4+=_0x2fbaaa[_0xf9edcf(0xb6a)]()?-_0x464baa:_0x464baa,_0x432d6f+=_0x2fbaaa['isActor']()?-_0x92609b:_0x92609b;else{if(_0x51d0d9[_0xf9edcf(0xef)](/horz/i))_0x5c13b4+=_0x2fbaaa[_0xf9edcf(0xb6a)]()?-_0x464baa:_0x464baa,_0x432d6f+=_0x92609b;else _0x51d0d9['match'](/vert/i)&&(_0x5c13b4+=_0x464baa,_0x432d6f+=_0x2fbaaa['isActor']()?-_0x92609b:_0x92609b);}}_0x2fbaaa[_0xf9edcf(0x544)](_0x5c13b4,_0x432d6f,_0x193d17,_0xf37bba,_0x22ff2f,_0x4bdf42),_0x2fbaaa['requestMotion'](_0xe65ddf);}if(_0x423c66)_0x5d03d8[_0xf9edcf(0xa1d)](_0xf9edcf(0x66f));}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x673),_0xc2f32f=>{const _0x196dd2=_0xabeb6b;if(!SceneManager[_0x196dd2(0x87a)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x196dd2(0x410)](_0xc2f32f,_0xc2f32f);const _0xf8af41=VisuMZ[_0x196dd2(0x6b6)](_0xc2f32f[_0x196dd2(0x78b)]);let _0xf2d2a0=_0xc2f32f[_0x196dd2(0x8e2)][_0x196dd2(0xef)](/back/i);for(const _0x477f81 of _0xf8af41){if(!_0x477f81)continue;if(_0xc2f32f['Direction']['match'](/rand/i))_0xf2d2a0=Math['randomInt'](0x2);_0x477f81[_0x196dd2(0xa26)](!!_0xf2d2a0);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Movement_FaceJsPoint',_0x436d46=>{const _0x159935=_0xabeb6b;if(!SceneManager[_0x159935(0x87a)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x436d46,_0x436d46);const _0x4d841e=VisuMZ['CreateActionSequenceTargets'](_0x436d46['Targets']),_0x582760=_0x436d46[_0x159935(0x745)];for(const _0x465b52 of _0x4d841e){if(!_0x465b52)continue;const _0x2c014f=_0x436d46['PointJS'](_0x465b52)||{'x':0x0,'y':0x0};let _0x39beb7=_0x2c014f['x'],_0x2abc45=_0x2c014f['y'];_0x465b52[_0x159935(0xb5c)](Math[_0x159935(0xb36)](_0x39beb7),Math[_0x159935(0xb36)](_0x2abc45),!!_0x582760);}}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x95d),_0x46262e=>{const _0x25d416=_0xabeb6b;if(!SceneManager[_0x25d416(0x87a)]())return;if(!$gameSystem[_0x25d416(0x4d5)]())return;VisuMZ[_0x25d416(0x410)](_0x46262e,_0x46262e);const _0x427546=VisuMZ[_0x25d416(0x6b6)](_0x46262e['Targets']);let _0x35b560=_0x46262e[_0x25d416(0x230)];const _0x45974f=_0x46262e[_0x25d416(0x745)];for(const _0x4352de of _0x427546){if(!_0x4352de)continue;let _0x143417=_0x4352de[_0x25d416(0x7bb)]()[_0x25d416(0x945)],_0x3bc5f1=_0x4352de[_0x25d416(0x7bb)]()[_0x25d416(0xb85)];if(_0x35b560['match'](/home/i))_0x143417=_0x4352de[_0x25d416(0x7bb)]()[_0x25d416(0x615)],_0x3bc5f1=_0x4352de['battler']()[_0x25d416(0x3a2)];else{if(_0x35b560['match'](/center/i))_0x143417=Graphics[_0x25d416(0x143)]/0x2,_0x3bc5f1=Graphics[_0x25d416(0x588)]/0x2;else _0x35b560[_0x25d416(0xef)](/point (\d+), (\d+)/i)&&(_0x143417=Number(RegExp['$1']),_0x3bc5f1=Number(RegExp['$2']));}_0x4352de[_0x25d416(0xb5c)](Math['round'](_0x143417),Math['round'](_0x3bc5f1),!!_0x45974f);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x2a0),_0x27e47d=>{const _0x47fdaf=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x47fdaf(0x4d5)]())return;VisuMZ[_0x47fdaf(0x410)](_0x27e47d,_0x27e47d);const _0x48c560=VisuMZ[_0x47fdaf(0x6b6)](_0x27e47d[_0x47fdaf(0x5d9)]),_0x35508a=VisuMZ['CreateActionSequenceTargets'](_0x27e47d[_0x47fdaf(0x9a3)]),_0x515734=_0x35508a[_0x47fdaf(0x614)](_0x600f76=>_0x600f76&&_0x600f76[_0x47fdaf(0x7bb)]()?_0x600f76['battler']()['_baseX']:0x0)/(_0x35508a[_0x47fdaf(0x93a)]||0x1),_0x568b2c=_0x35508a[_0x47fdaf(0x614)](_0xf3d0b6=>_0xf3d0b6&&_0xf3d0b6[_0x47fdaf(0x7bb)]()?_0xf3d0b6[_0x47fdaf(0x7bb)]()[_0x47fdaf(0xb85)]:0x0)/(_0x35508a[_0x47fdaf(0x93a)]||0x1),_0x108cb2=_0x27e47d[_0x47fdaf(0x745)];for(const _0x1932ff of _0x48c560){if(!_0x1932ff)continue;_0x1932ff['setBattlerFacePoint'](Math['round'](_0x515734),Math[_0x47fdaf(0xb36)](_0x568b2c),!!_0x108cb2);}}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x3b3),_0x235f04=>{const _0x4aa22e=_0xabeb6b;if(!SceneManager[_0x4aa22e(0x87a)]())return;VisuMZ[_0x4aa22e(0x410)](_0x235f04,_0x235f04);const _0x33b34=$gameTemp[_0x4aa22e(0x653)](),_0x3822cb=VisuMZ[_0x4aa22e(0x6b6)](_0x235f04['Targets']),_0x4cfadd=_0x235f04[_0x4aa22e(0x787)],_0xaacb68=_0x235f04[_0x4aa22e(0xa45)],_0x4ddef6=_0x235f04[_0x4aa22e(0x93d)],_0x55a2db=_0x235f04[_0x4aa22e(0x189)];if(!_0x33b34)return;for(const _0x22c695 of _0x3822cb){if(!_0x22c695)continue;_0x22c695[_0x4aa22e(0xb55)](_0x4cfadd,_0xaacb68,_0x4ddef6);}if(_0x55a2db)_0x33b34[_0x4aa22e(0xa1d)](_0x4aa22e(0xf2));}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xb79),_0x2a35ba=>{const _0xdd5dac=_0xabeb6b;if(!SceneManager[_0xdd5dac(0x87a)]())return;VisuMZ['ConvertParams'](_0x2a35ba,_0x2a35ba);const _0x2da16a=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2da16a)return;const _0x1265f8=VisuMZ['CreateActionSequenceTargets'](_0x2a35ba[_0xdd5dac(0x78b)]);for(const _0x273f9a of _0x1265f8){if(!_0x273f9a)continue;_0x273f9a[_0xdd5dac(0x476)]();}BattleManager[_0xdd5dac(0x4ee)]&&BattleManager[_0xdd5dac(0x4ee)][_0xdd5dac(0x957)]();if(_0x2a35ba[_0xdd5dac(0xbbb)])_0x2da16a[_0xdd5dac(0xa1d)](_0xdd5dac(0x66f));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x737),_0x14471e=>{const _0x28cf30=_0xabeb6b;if(!SceneManager[_0x28cf30(0x87a)]())return;VisuMZ[_0x28cf30(0x410)](_0x14471e,_0x14471e);const _0x54c1ae=$gameTemp[_0x28cf30(0x653)](),_0x3bc783=VisuMZ[_0x28cf30(0x6b6)](_0x14471e[_0x28cf30(0x78b)]),_0x2700e9=_0x14471e[_0x28cf30(0x787)],_0xaab3e1=_0x14471e['Duration'],_0x2d06bc=_0x14471e[_0x28cf30(0x86f)];if(!_0x54c1ae)return;for(const _0x4d2f48 of _0x3bc783){if(!_0x4d2f48)continue;_0x4d2f48[_0x28cf30(0x776)](_0x2700e9,_0xaab3e1);}if(_0x2d06bc)_0x54c1ae[_0x28cf30(0xa1d)](_0x28cf30(0xaee));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Movement_MoveBy',_0x29232c=>{const _0x510b65=_0xabeb6b;if(!SceneManager[_0x510b65(0x87a)]())return;if(!$gameSystem[_0x510b65(0x4d5)]())return;VisuMZ[_0x510b65(0x410)](_0x29232c,_0x29232c);const _0xcbbdb7=$gameTemp[_0x510b65(0x653)](),_0x4823b5=VisuMZ[_0x510b65(0x6b6)](_0x29232c[_0x510b65(0x78b)]),_0x413fde=_0x29232c[_0x510b65(0x1bf)],_0x574f71=_0x29232c[_0x510b65(0xab6)],_0x54b271=_0x29232c[_0x510b65(0x7bf)],_0x25e3a9=_0x29232c[_0x510b65(0xa45)],_0x2a670c=_0x29232c[_0x510b65(0x4e5)],_0x4c65a0=_0x29232c[_0x510b65(0x93d)],_0x3a514c=_0x29232c[_0x510b65(0x2e8)],_0x14e92e=_0x29232c[_0x510b65(0xbbb)];if(!_0xcbbdb7)return;for(const _0x78f8a3 of _0x4823b5){if(!_0x78f8a3)continue;let _0x21ec31=_0x574f71,_0x1ab870=_0x54b271;if(_0x413fde[_0x510b65(0xef)](/horz/i))_0x21ec31*=_0x78f8a3[_0x510b65(0xb6a)]()?-0x1:0x1;if(_0x413fde['match'](/vert/i))_0x1ab870*=_0x78f8a3['isActor']()?-0x1:0x1;_0x78f8a3[_0x510b65(0x976)](_0x21ec31,_0x1ab870,_0x25e3a9,_0x2a670c,_0x4c65a0),_0x78f8a3[_0x510b65(0x67a)](_0x3a514c);}if(_0x14e92e)_0xcbbdb7[_0x510b65(0xa1d)](_0x510b65(0x66f));}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x738),_0x526c65=>{const _0x2edf34=_0xabeb6b;if(!SceneManager[_0x2edf34(0x87a)]())return;if(!$gameSystem[_0x2edf34(0x4d5)]())return;VisuMZ[_0x2edf34(0x410)](_0x526c65,_0x526c65);const _0x2219c9=$gameTemp[_0x2edf34(0x653)](),_0xfb6c5d=VisuMZ[_0x2edf34(0x6b6)](_0x526c65[_0x2edf34(0x78b)]),_0x2b15e0=_0x526c65[_0x2edf34(0xb2f)],_0x17cd5d=_0x526c65[_0x2edf34(0x163)],_0x89e9f9=_0x526c65[_0x2edf34(0x8f0)],_0x259f92=_0x526c65[_0x2edf34(0xa45)],_0x78d4df=_0x526c65[_0x2edf34(0x4e5)],_0x42282e=_0x526c65[_0x2edf34(0x93d)],_0x4101ef=_0x526c65[_0x2edf34(0x2e8)],_0x38700e=_0x526c65[_0x2edf34(0xbbb)];if(!_0x2219c9)return;for(const _0x485e5f of _0xfb6c5d){if(!_0x485e5f)continue;const _0x43cd1b=_0x526c65[_0x2edf34(0x7b7)](_0x485e5f)||{'x':0x0,'y':0x0};let _0x1e3a60=_0x43cd1b['x'],_0x1db855=_0x43cd1b['y'];if(_0x2b15e0[_0x2edf34(0xef)](/none/i))_0x1e3a60+=_0x17cd5d,_0x1db855+=_0x89e9f9;else{if(_0x2b15e0['match'](/horz/i)&&_0x2b15e0[_0x2edf34(0xef)](/vert/i))_0x1e3a60+=_0x485e5f[_0x2edf34(0xb6a)]()?-_0x17cd5d:_0x17cd5d,_0x1db855+=_0x485e5f['isActor']()?-_0x89e9f9:_0x89e9f9;else{if(_0x2b15e0[_0x2edf34(0xef)](/horz/i))_0x1e3a60+=_0x485e5f[_0x2edf34(0xb6a)]()?-_0x17cd5d:_0x17cd5d,_0x1db855+=_0x89e9f9;else _0x2b15e0['match'](/vert/i)&&(_0x1e3a60+=_0x17cd5d,_0x1db855+=_0x485e5f[_0x2edf34(0xb6a)]()?-_0x89e9f9:_0x89e9f9);}}_0x485e5f[_0x2edf34(0x79b)](_0x1e3a60,_0x1db855,_0x259f92,_0x78d4df,_0x42282e,-0x1),_0x485e5f['requestMotion'](_0x4101ef);}if(_0x38700e)_0x2219c9['setWaitMode'](_0x2edf34(0x66f));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x41b),_0x13f826=>{const _0x154b0d=_0xabeb6b;if(!SceneManager[_0x154b0d(0x87a)]())return;if(!$gameSystem[_0x154b0d(0x4d5)]())return;VisuMZ[_0x154b0d(0x410)](_0x13f826,_0x13f826);const _0x5542cc=$gameTemp['getLastPluginCommandInterpreter'](),_0x51ebe6=VisuMZ['CreateActionSequenceTargets'](_0x13f826[_0x154b0d(0x78b)]),_0x1b42a0=_0x13f826['Destination'],_0x510c8b=_0x13f826[_0x154b0d(0xb2f)],_0x57e3ca=_0x13f826[_0x154b0d(0x163)],_0x4044b1=_0x13f826[_0x154b0d(0x8f0)],_0x52996d=_0x13f826[_0x154b0d(0xa45)],_0x22ee63=_0x13f826[_0x154b0d(0x4e5)],_0x442705=_0x13f826['EasingType'],_0x270175=_0x13f826['MotionType'],_0x41f7c0=_0x13f826[_0x154b0d(0xbbb)];if(!_0x5542cc)return;for(const _0x21ddaa of _0x51ebe6){if(!_0x21ddaa)continue;let _0x7ee7fd=_0x21ddaa['battler']()[_0x154b0d(0x945)],_0x555123=_0x21ddaa[_0x154b0d(0x7bb)]()[_0x154b0d(0xb85)];if(_0x1b42a0[_0x154b0d(0xef)](/home/i))_0x7ee7fd=_0x21ddaa[_0x154b0d(0x7bb)]()[_0x154b0d(0x615)],_0x555123=_0x21ddaa['battler']()[_0x154b0d(0x3a2)];else{if(_0x1b42a0[_0x154b0d(0xef)](/center/i))_0x7ee7fd=Graphics[_0x154b0d(0x143)]/0x2,_0x555123=Graphics[_0x154b0d(0x588)]/0x2;else _0x1b42a0['match'](/point (\d+), (\d+)/i)&&(_0x7ee7fd=Number(RegExp['$1']),_0x555123=Number(RegExp['$2']));}if(_0x510c8b['match'](/none/i))_0x7ee7fd+=_0x57e3ca,_0x555123+=_0x4044b1;else{if(_0x510c8b[_0x154b0d(0xef)](/horz/i)&&_0x510c8b[_0x154b0d(0xef)](/vert/i))_0x7ee7fd+=_0x21ddaa[_0x154b0d(0xb6a)]()?-_0x57e3ca:_0x57e3ca,_0x555123+=_0x21ddaa[_0x154b0d(0xb6a)]()?-_0x4044b1:_0x4044b1;else{if(_0x510c8b[_0x154b0d(0xef)](/horz/i))_0x7ee7fd+=_0x21ddaa[_0x154b0d(0xb6a)]()?-_0x57e3ca:_0x57e3ca,_0x555123+=_0x4044b1;else _0x510c8b[_0x154b0d(0xef)](/vert/i)&&(_0x7ee7fd+=_0x57e3ca,_0x555123+=_0x21ddaa['isActor']()?-_0x4044b1:_0x4044b1);}}_0x21ddaa[_0x154b0d(0x79b)](_0x7ee7fd,_0x555123,_0x52996d,_0x22ee63,_0x442705,-0x1),_0x21ddaa['requestMotion'](_0x270175);}if(_0x41f7c0)_0x5542cc[_0x154b0d(0xa1d)](_0x154b0d(0x66f));}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x1e7),_0x13378e=>{const _0x488e1a=_0xabeb6b;if(!SceneManager[_0x488e1a(0x87a)]())return;if(!$gameSystem[_0x488e1a(0x4d5)]())return;VisuMZ['ConvertParams'](_0x13378e,_0x13378e);const _0x5c66df=$gameTemp[_0x488e1a(0x653)](),_0x2a8391=VisuMZ['CreateActionSequenceTargets'](_0x13378e[_0x488e1a(0x5d9)]),_0x48e8f7=VisuMZ[_0x488e1a(0x6b6)](_0x13378e['Targets2']),_0x5e199c=_0x13378e[_0x488e1a(0x9f9)];let _0x14cf28=_0x13378e[_0x488e1a(0xb09)];const _0x588da6=_0x13378e[_0x488e1a(0xb2f)],_0x469546=_0x13378e['OffsetX'],_0x2e6298=_0x13378e[_0x488e1a(0x8f0)],_0x5b8b6c=_0x13378e['Duration'],_0x216926=_0x13378e[_0x488e1a(0x4e5)],_0x3bb888=_0x13378e[_0x488e1a(0x93d)],_0x365d7f=_0x13378e[_0x488e1a(0x2e8)],_0x34de2f=_0x13378e['WaitForMovement'],_0x3bcbd7=Math[_0x488e1a(0x1be)](..._0x48e8f7[_0x488e1a(0x614)](_0x4f51ef=>_0x4f51ef[_0x488e1a(0x7bb)]()[_0x488e1a(0x945)]-_0x4f51ef[_0x488e1a(0x7bb)]()[_0x488e1a(0x3c9)]()/0x2)),_0x2ae019=Math['max'](..._0x48e8f7[_0x488e1a(0x614)](_0x2655ed=>_0x2655ed[_0x488e1a(0x7bb)]()['_baseX']+_0x2655ed[_0x488e1a(0x7bb)]()[_0x488e1a(0x3c9)]()/0x2)),_0x2075ae=Math[_0x488e1a(0x1be)](..._0x48e8f7[_0x488e1a(0x614)](_0x1b81f6=>_0x1b81f6[_0x488e1a(0x7bb)]()['_baseY']-_0x1b81f6['battler']()[_0x488e1a(0x530)]())),_0x4e674f=Math[_0x488e1a(0xb72)](..._0x48e8f7[_0x488e1a(0x614)](_0xf21c47=>_0xf21c47[_0x488e1a(0x7bb)]()['_baseY'])),_0x103172=_0x48e8f7[_0x488e1a(0x959)](_0x4f81d5=>_0x4f81d5[_0x488e1a(0xb6a)]())['length'],_0x52fa15=_0x48e8f7[_0x488e1a(0x959)](_0x10b076=>_0x10b076['isEnemy']())['length'];let _0x3f3849=0x0,_0xb9a63a=0x0;if(_0x5e199c[_0x488e1a(0xef)](/front/i))_0x3f3849=_0x103172>=_0x52fa15?_0x3bcbd7:_0x2ae019;else{if(_0x5e199c[_0x488e1a(0xef)](/middle/i))_0x3f3849=(_0x3bcbd7+_0x2ae019)/0x2,_0x14cf28=-0x1;else _0x5e199c[_0x488e1a(0xef)](/back/i)&&(_0x3f3849=_0x103172>=_0x52fa15?_0x2ae019:_0x3bcbd7);}if(_0x5e199c[_0x488e1a(0xef)](/head/i))_0xb9a63a=_0x2075ae;else{if(_0x5e199c[_0x488e1a(0xef)](/center/i))_0xb9a63a=(_0x2075ae+_0x4e674f)/0x2;else _0x5e199c[_0x488e1a(0xef)](/base/i)&&(_0xb9a63a=_0x4e674f);}if(!_0x5c66df)return;for(const _0x1df8a1 of _0x2a8391){if(!_0x1df8a1)continue;let _0x42255b=_0x3f3849,_0x14376a=_0xb9a63a;if(_0x588da6[_0x488e1a(0xef)](/none/i))_0x42255b+=_0x469546,_0x14376a+=_0x2e6298;else{if(_0x588da6[_0x488e1a(0xef)](/horz/i)&&_0x588da6[_0x488e1a(0xef)](/vert/i))_0x42255b+=_0x1df8a1[_0x488e1a(0xb6a)]()?-_0x469546:_0x469546,_0x14376a+=_0x1df8a1[_0x488e1a(0xb6a)]()?-_0x2e6298:_0x2e6298;else{if(_0x588da6[_0x488e1a(0xef)](/horz/i))_0x42255b+=_0x1df8a1[_0x488e1a(0xb6a)]()?-_0x469546:_0x469546,_0x14376a+=_0x2e6298;else _0x588da6[_0x488e1a(0xef)](/vert/i)&&(_0x42255b+=_0x469546,_0x14376a+=_0x1df8a1[_0x488e1a(0xb6a)]()?-_0x2e6298:_0x2e6298);}}_0x1df8a1[_0x488e1a(0x79b)](_0x42255b,_0x14376a,_0x5b8b6c,_0x216926,_0x3bb888,_0x14cf28),_0x1df8a1['requestMotion'](_0x365d7f);}if(_0x34de2f)_0x5c66df[_0x488e1a(0xa1d)](_0x488e1a(0x66f));}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0x3b1),_0x47b727=>{const _0x5d7758=_0xabeb6b;if(!SceneManager[_0x5d7758(0x87a)]())return;VisuMZ[_0x5d7758(0x410)](_0x47b727,_0x47b727);const _0x4707d0=$gameTemp[_0x5d7758(0x653)](),_0x3d9447=VisuMZ[_0x5d7758(0x6b6)](_0x47b727[_0x5d7758(0x78b)]),_0x36c909=_0x47b727[_0x5d7758(0x11c)],_0x15d381=_0x47b727[_0x5d7758(0xa45)],_0x246f4b=_0x47b727['EasingType'],_0x32d435=_0x47b727['WaitForOpacity'];if(!_0x4707d0)return;for(const _0x5cae8e of _0x3d9447){if(!_0x5cae8e)continue;_0x5cae8e[_0x5d7758(0x56c)](_0x36c909,_0x15d381,_0x246f4b);}if(_0x32d435)_0x4707d0[_0x5d7758(0xa1d)](_0x5d7758(0xb42));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x6c4),_0x344169=>{const _0x20d366=_0xabeb6b;if(!SceneManager[_0x20d366(0x87a)]())return;VisuMZ[_0x20d366(0x410)](_0x344169,_0x344169);const _0x26161d=$gameTemp[_0x20d366(0x653)](),_0x3352b5=VisuMZ[_0x20d366(0x6b6)](_0x344169[_0x20d366(0x78b)]),_0x2534b8=_0x344169[_0x20d366(0x3d5)],_0x330698=_0x344169['ScaleY'],_0x4bd3de=_0x344169[_0x20d366(0xa45)],_0x294aa8=_0x344169[_0x20d366(0x93d)],_0x3ba915=_0x344169[_0x20d366(0x812)];if(!_0x26161d)return;for(const _0x1f501f of _0x3352b5){if(!_0x1f501f)continue;_0x1f501f['growBattler'](_0x2534b8,_0x330698,_0x4bd3de,_0x294aa8);}if(_0x3ba915)_0x26161d[_0x20d366(0xa1d)](_0x20d366(0x158));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x3ba),_0x4399ce=>{const _0x10e5cb=_0xabeb6b;if(!SceneManager[_0x10e5cb(0x87a)]())return;VisuMZ[_0x10e5cb(0x410)](_0x4399ce,_0x4399ce);const _0x236b82=$gameTemp[_0x10e5cb(0x653)](),_0x4d3c67=VisuMZ['CreateActionSequenceTargets'](_0x4399ce[_0x10e5cb(0x78b)]),_0x4ef139=_0x4399ce[_0x10e5cb(0x90b)],_0x2b8a04=_0x4399ce[_0x10e5cb(0x442)],_0x4058ee=_0x4399ce[_0x10e5cb(0xa45)],_0xb94daf=_0x4399ce[_0x10e5cb(0x93d)],_0x72aec9=_0x4399ce[_0x10e5cb(0xa50)];if(!_0x236b82)return;for(const _0x1f6c3d of _0x4d3c67){if(!_0x1f6c3d)continue;_0x1f6c3d[_0x10e5cb(0x51c)](_0x4ef139,_0x2b8a04,_0x4058ee,_0xb94daf);}if(_0x72aec9)_0x236b82['setWaitMode']('battleSpriteSkew');}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x9c5),_0x16350a=>{const _0x25f2a3=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x25f2a3(0x410)](_0x16350a,_0x16350a);const _0x5ca53c=$gameTemp[_0x25f2a3(0x653)](),_0x53384f=VisuMZ[_0x25f2a3(0x6b6)](_0x16350a[_0x25f2a3(0x78b)]),_0xb6f1e5=_0x16350a[_0x25f2a3(0xb26)],_0x3e3098=_0x16350a[_0x25f2a3(0xa45)],_0x38c5f0=_0x16350a[_0x25f2a3(0x93d)],_0x54da59=_0x16350a[_0x25f2a3(0x70f)],_0x27b8c0=_0x16350a['WaitForSpin'];if(!_0x5ca53c)return;for(const _0x42ac89 of _0x53384f){if(!_0x42ac89)continue;_0x42ac89[_0x25f2a3(0x40d)](_0xb6f1e5,_0x3e3098,_0x38c5f0,_0x54da59);}if(_0x27b8c0)_0x5ca53c['setWaitMode']('battleSpin');}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Movement_WaitForFloat',_0x5b702e=>{const _0x5d9a36=_0xabeb6b;if(!SceneManager[_0x5d9a36(0x87a)]())return;const _0xa82d2f=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xa82d2f)return;_0xa82d2f['setWaitMode'](_0x5d9a36(0xf2));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x85f),_0x87e9e8=>{const _0x1a7656=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;const _0x3f6be0=$gameTemp[_0x1a7656(0x653)]();if(!_0x3f6be0)return;_0x3f6be0['setWaitMode'](_0x1a7656(0xaee));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xa35),_0x35c9bd=>{const _0x41190e=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;const _0x3f64ee=$gameTemp[_0x41190e(0x653)]();if(!_0x3f64ee)return;_0x3f64ee[_0x41190e(0xa1d)](_0x41190e(0x66f));}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xb9d),_0x165160=>{const _0x5cbd76=_0xabeb6b;if(!SceneManager[_0x5cbd76(0x87a)]())return;const _0x80ec36=$gameTemp[_0x5cbd76(0x653)]();if(!_0x80ec36)return;_0x80ec36[_0x5cbd76(0xa1d)](_0x5cbd76(0xb42));}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x79d),_0xbd3079=>{const _0x5233d3=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;const _0x4b62da=$gameTemp[_0x5233d3(0x653)]();if(!_0x4b62da)return;_0x4b62da[_0x5233d3(0xa1d)](_0x5233d3(0x158));}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0xed),_0x1985a9=>{const _0x5ce07f=_0xabeb6b;if(!SceneManager[_0x5ce07f(0x87a)]())return;const _0x8f7c94=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x8f7c94)return;_0x8f7c94[_0x5ce07f(0xa1d)]('battleSpriteSkew');}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],_0xabeb6b(0xaef),_0x41bc86=>{const _0x17772e=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;const _0x46e7cd=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x46e7cd)return;_0x46e7cd[_0x17772e(0xa1d)](_0x17772e(0xb95));}),VisuMZ['BattleCore'][_0xabeb6b(0x445)]=function(){const _0x42f06f=_0xabeb6b;if(!Imported[_0x42f06f(0x257)])return;if(VisuMZ[_0x42f06f(0x387)][_0x42f06f(0x729)]<1.08){let _0x2a0668='';_0x2a0668+=_0x42f06f(0x34b),_0x2a0668+=_0x42f06f(0x44a),alert(_0x2a0668),SceneManager[_0x42f06f(0x9d8)]();}},PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Projectile_Animation',_0x368212=>{const _0x24254f=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x24254f(0x257)])return;VisuMZ['ConvertParams'](_0x368212,_0x368212),VisuMZ[_0x24254f(0x553)][_0x24254f(0x445)]();const _0x5f0575=$gameTemp['getLastPluginCommandInterpreter'](),_0x1a95c3=_0x368212[_0x24254f(0x6e6)];if(!_0x5f0575)return;const _0x3b3a6a=BattleManager['_spriteset'];if(!_0x3b3a6a)return;_0x3b3a6a[_0x24254f(0x1b5)](_0x368212);if(_0x1a95c3)_0x5f0575[_0x24254f(0xa1d)]('battleProjectiles');}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x6c3),_0x517c95=>{const _0x2e8561=_0xabeb6b;if(!SceneManager[_0x2e8561(0x87a)]())return;if(!Imported[_0x2e8561(0x257)])return;VisuMZ[_0x2e8561(0x410)](_0x517c95,_0x517c95),VisuMZ[_0x2e8561(0x553)][_0x2e8561(0x445)]();const _0x15c8ab=$gameTemp[_0x2e8561(0x653)](),_0x333c98=_0x517c95[_0x2e8561(0x6e6)];if(!_0x15c8ab)return;const _0x4444ab=BattleManager['_spriteset'];if(!_0x4444ab)return;_0x4444ab[_0x2e8561(0x1b5)](_0x517c95);if(_0x333c98)_0x15c8ab[_0x2e8561(0xa1d)]('battleProjectiles');}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Projectile_Picture',_0x1613ed=>{const _0x49f6cc=_0xabeb6b;if(!SceneManager[_0x49f6cc(0x87a)]())return;if(!Imported[_0x49f6cc(0x257)])return;VisuMZ[_0x49f6cc(0x410)](_0x1613ed,_0x1613ed),VisuMZ['BattleCore']['CheckActSeqProjectileVersion']();const _0x2e3bc8=$gameTemp[_0x49f6cc(0x653)](),_0x215cb7=_0x1613ed[_0x49f6cc(0x6e6)];if(!_0x2e3bc8)return;const _0x5b642b=BattleManager[_0x49f6cc(0x754)];if(!_0x5b642b)return;_0x5b642b[_0x49f6cc(0x1b5)](_0x1613ed);if(_0x215cb7)_0x2e3bc8[_0x49f6cc(0xa1d)](_0x49f6cc(0x9fc));}),PluginManager['registerCommand'](pluginData['name'],_0xabeb6b(0x456),_0x5a7908=>{const _0x1220a6=_0xabeb6b;if(!SceneManager[_0x1220a6(0x87a)]())return;if(!Imported[_0x1220a6(0x510)])return;VisuMZ[_0x1220a6(0x410)](_0x5a7908,_0x5a7908);const _0x4ef685=$gameTemp[_0x1220a6(0x653)](),_0x515808=_0x5a7908['WaitForSkew'];if(!_0x4ef685)return;$gameScreen['setBattleSkew'](_0x5a7908[_0x1220a6(0x90b)],_0x5a7908[_0x1220a6(0x442)],_0x5a7908[_0x1220a6(0xa45)],_0x5a7908[_0x1220a6(0x93d)]);if(_0x515808)_0x4ef685[_0x1220a6(0xa1d)](_0x1220a6(0x206));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x7be),_0x431001=>{const _0x36e0ba=_0xabeb6b;if(!SceneManager[_0x36e0ba(0x87a)]())return;if(!Imported[_0x36e0ba(0x510)])return;VisuMZ[_0x36e0ba(0x410)](_0x431001,_0x431001);const _0x5b8a84=$gameTemp[_0x36e0ba(0x653)](),_0x216e1f=_0x431001[_0x36e0ba(0xa50)];if(!_0x5b8a84)return;$gameScreen[_0x36e0ba(0x125)](0x0,0x0,_0x431001[_0x36e0ba(0xa45)],_0x431001[_0x36e0ba(0x93d)]);if(_0x216e1f)_0x5b8a84[_0x36e0ba(0xa1d)](_0x36e0ba(0x206));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Skew_WaitForSkew',_0x1ab965=>{const _0x4c2c15=_0xabeb6b;if(!SceneManager[_0x4c2c15(0x87a)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x500af9=$gameTemp[_0x4c2c15(0x653)]();if(!_0x500af9)return;_0x500af9['setWaitMode'](_0x4c2c15(0x206));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x592),_0xfde6e8=>{const _0x577a31=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x577a31(0x410)](_0xfde6e8,_0xfde6e8);const _0x4689f9=$gameTemp[_0x577a31(0x653)](),_0x434ba2=_0xfde6e8[_0x577a31(0x1e3)],_0x59cfe2=_0xfde6e8[_0x577a31(0xa21)];if(!_0x4689f9)return;BattleManager[_0x577a31(0xad9)]=_0x434ba2,BattleManager[_0x577a31(0x84d)]=BattleManager[_0x577a31(0x4fa)]?BattleManager[_0x577a31(0x4fa)][BattleManager['_targetIndex']]||null:null,BattleManager['_target']&&_0x59cfe2[_0x577a31(0xf8)]()[_0x577a31(0xd3)]()!==_0x577a31(0x331)&&_0x4689f9['command119']([_0x59cfe2]);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x24d),_0x1ab3f4=>{const _0x40c421=_0xabeb6b;if(!SceneManager[_0x40c421(0x87a)]())return;VisuMZ[_0x40c421(0x410)](_0x1ab3f4,_0x1ab3f4);const _0x1e4b54=$gameTemp[_0x40c421(0x653)](),_0x33efde=_0x1ab3f4[_0x40c421(0xa21)];if(!_0x1e4b54)return;BattleManager['_targetIndex']++,BattleManager[_0x40c421(0x84d)]=BattleManager[_0x40c421(0x4fa)][BattleManager[_0x40c421(0xad9)]]||null,BattleManager['_target']&&_0x33efde['toUpperCase']()[_0x40c421(0xd3)]()!==_0x40c421(0x331)&&_0x1e4b54[_0x40c421(0x532)]([_0x33efde]);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0xa05),_0x4c7a62=>{const _0x25b2b4=_0xabeb6b;if(!SceneManager[_0x25b2b4(0x87a)]())return;VisuMZ[_0x25b2b4(0x410)](_0x4c7a62,_0x4c7a62);const _0x111a7f=$gameTemp[_0x25b2b4(0x653)](),_0xce7f18=_0x4c7a62[_0x25b2b4(0xa21)];if(!_0x111a7f)return;BattleManager[_0x25b2b4(0xad9)]--,BattleManager[_0x25b2b4(0x84d)]=BattleManager[_0x25b2b4(0x4fa)][BattleManager[_0x25b2b4(0xad9)]]||null,BattleManager[_0x25b2b4(0x84d)]&&_0xce7f18[_0x25b2b4(0xf8)]()['trim']()!=='UNTITLED'&&_0x111a7f[_0x25b2b4(0x532)]([_0xce7f18]);}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x45c),_0x38e9e6=>{const _0x16a840=_0xabeb6b;if(!SceneManager[_0x16a840(0x87a)]())return;VisuMZ[_0x16a840(0x410)](_0x38e9e6,_0x38e9e6);const _0x456062=$gameTemp['getLastPluginCommandInterpreter'](),_0x12663b=_0x38e9e6[_0x16a840(0xac8)],_0x3a44c2=_0x38e9e6[_0x16a840(0xa21)];if(!_0x456062)return;const _0x1d49d4=BattleManager['_targetIndex'];for(;;){BattleManager[_0x16a840(0xad9)]=Math[_0x16a840(0xb4f)](BattleManager[_0x16a840(0x4fa)][_0x16a840(0x93a)]);if(!_0x12663b)break;if(BattleManager['_targetIndex']!==_0x1d49d4)break;if(BattleManager[_0x16a840(0x4fa)]['length']<=0x1){BattleManager[_0x16a840(0xad9)]=0x0;break;}}BattleManager[_0x16a840(0x84d)]=BattleManager['_allTargets'][BattleManager['_targetIndex']]||null,BattleManager['_target']&&_0x3a44c2[_0x16a840(0xf8)]()[_0x16a840(0xd3)]()!=='UNTITLED'&&_0x456062[_0x16a840(0x532)]([_0x3a44c2]);}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x923),_0xe4cae5=>{const _0x3f3d70=_0xabeb6b;if(!SceneManager[_0x3f3d70(0x87a)]())return;if(!Imported[_0x3f3d70(0x72b)])return;if(!ConfigManager['battleVoices'])return;VisuMZ[_0x3f3d70(0x410)](_0xe4cae5,_0xe4cae5);const _0x508b13=VisuMZ[_0x3f3d70(0x6b6)](_0xe4cae5['Targets']);let _0x5bfd04=_0xe4cae5['VoiceLine']||'';for(const _0x3b6ab5 of _0x508b13){if(!_0x3b6ab5)continue;_0x3b6ab5[_0x3f3d70(0x426)](_0x5bfd04);}}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],'ActSeq_BattleVoice_PlaySpecialLine',_0x3bb583=>{const _0x367b36=_0xabeb6b;if(!SceneManager[_0x367b36(0x87a)]())return;if(!Imported[_0x367b36(0x72b)])return;if(!ConfigManager['battleVoices'])return;VisuMZ['ConvertParams'](_0x3bb583,_0x3bb583);const _0x305788=VisuMZ[_0x367b36(0x6b6)](_0x3bb583[_0x367b36(0x78b)]);let _0xbfd8df=(_0x3bb583[_0x367b36(0x941)]||'')+(_0x3bb583[_0x367b36(0x92e)]||'');for(const _0x36075e of _0x305788){if(!_0x36075e)continue;_0x36075e[_0x367b36(0x426)](_0xbfd8df);}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x93c),_0x3f38d8=>{const _0x4574ea=_0xabeb6b;if(!SceneManager[_0x4574ea(0x87a)]())return;VisuMZ['ConvertParams'](_0x3f38d8,_0x3f38d8);const _0x2bc308=VisuMZ[_0x4574ea(0x6b6)](_0x3f38d8['Targets']);for(const _0x200627 of _0x2bc308){if(!_0x200627)continue;if(!_0x200627[_0x4574ea(0xb6a)]())continue;_0x200627[_0x4574ea(0x71b)]();}}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x11b),_0x5042bf=>{const _0x5bfe0c=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5bfe0c(0x410)](_0x5042bf,_0x5042bf);const _0x3352c3=$gameTemp[_0x5bfe0c(0x653)]();let _0x4c3538=![];const _0x2550c4=_0x5042bf['JumpToLabel'],_0x3ede1a=VisuMZ[_0x5bfe0c(0x6b6)](_0x5042bf['Targets']);for(const _0x20ca19 of _0x3ede1a){if(!_0x20ca19)continue;if(!_0x20ca19['isActor']())continue;_0x20ca19[_0x5bfe0c(0x4a0)](),_0x20ca19[_0x5bfe0c(0x2e5)]()[_0x5bfe0c(0x93a)]>0x0?_0x4c3538=!![]:_0x20ca19[_0x5bfe0c(0x71b)]();}_0x4c3538&&_0x2550c4[_0x5bfe0c(0xf8)]()['trim']()!==_0x5bfe0c(0x331)&&_0x3352c3[_0x5bfe0c(0x532)]([_0x2550c4]);}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x846),_0x3bc7b8=>{const _0x19bebc=_0xabeb6b;if(!SceneManager[_0x19bebc(0x87a)]())return;VisuMZ[_0x19bebc(0x410)](_0x3bc7b8,_0x3bc7b8);let _0x22223e=_0x3bc7b8['SlotID'];_0x22223e--,_0x22223e=Math['max'](_0x22223e,0x0);const _0x23ddc2=VisuMZ[_0x19bebc(0x6b6)](_0x3bc7b8[_0x19bebc(0x78b)]);for(const _0x3a121b of _0x23ddc2){if(!_0x3a121b)continue;if(!_0x3a121b[_0x19bebc(0xb6a)]())continue;_0x3a121b[_0x19bebc(0x8fa)](_0x22223e);}}),PluginManager['registerCommand'](pluginData[_0xabeb6b(0x6e8)],'ActSeq_Zoom_Scale',_0x353edf=>{const _0x509dfd=_0xabeb6b;if(!SceneManager[_0x509dfd(0x87a)]())return;if(!Imported[_0x509dfd(0x510)])return;VisuMZ[_0x509dfd(0x410)](_0x353edf,_0x353edf);const _0x3b1a66=$gameTemp[_0x509dfd(0x653)](),_0xb7f83=_0x353edf[_0x509dfd(0x9bc)];if(!_0x3b1a66)return;$gameScreen['setBattleZoom'](_0x353edf[_0x509dfd(0x6ac)],_0x353edf[_0x509dfd(0xa45)],_0x353edf[_0x509dfd(0x93d)]);if(_0xb7f83)_0x3b1a66['setWaitMode'](_0x509dfd(0x9e9));}),PluginManager[_0xabeb6b(0x433)](pluginData['name'],'ActSeq_Zoom_Reset',_0x2cf3e5=>{const _0x5c8281=_0xabeb6b;if(!SceneManager[_0x5c8281(0x87a)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x5c8281(0x410)](_0x2cf3e5,_0x2cf3e5);const _0x2b8d88=$gameTemp['getLastPluginCommandInterpreter'](),_0xd4a3e6=_0x2cf3e5[_0x5c8281(0x9bc)];if(!_0x2b8d88)return;$gameScreen['setBattleZoom'](0x1,_0x2cf3e5['Duration'],_0x2cf3e5[_0x5c8281(0x93d)]);if(_0xd4a3e6)_0x2b8d88[_0x5c8281(0xa1d)](_0x5c8281(0x9e9));}),PluginManager[_0xabeb6b(0x433)](pluginData[_0xabeb6b(0x6e8)],_0xabeb6b(0x2dc),_0x499e33=>{const _0x15e504=_0xabeb6b;if(!SceneManager[_0x15e504(0x87a)]())return;if(!Imported[_0x15e504(0x510)])return;const _0x4ca534=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4ca534)return;_0x4ca534[_0x15e504(0xa1d)]('battleZoom');}),VisuMZ[_0xabeb6b(0x553)]['Scene_Boot_onDatabaseLoaded']=Scene_Boot[_0xabeb6b(0xc8)][_0xabeb6b(0xbce)],Scene_Boot[_0xabeb6b(0xc8)][_0xabeb6b(0xbce)]=function(){const _0x55157f=_0xabeb6b;this[_0x55157f(0x4c6)](),this[_0x55157f(0x4d1)](),this[_0x55157f(0x7dc)](),this[_0x55157f(0xaf6)](),VisuMZ[_0x55157f(0x553)][_0x55157f(0xb10)][_0x55157f(0x378)](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x55157f(0x775)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x55157f(0xa83)]();},Scene_Boot[_0xabeb6b(0xc8)][_0xabeb6b(0x18b)]=function(){const _0x4f2536=_0xabeb6b;if(VisuMZ[_0x4f2536(0x6b9)])return;this[_0x4f2536(0x1c9)](),this[_0x4f2536(0x616)](),this['process_VisuMZ_BattleCore_jsFunctions']();},Scene_Boot[_0xabeb6b(0xc8)][_0xabeb6b(0x4c6)]=function(){const _0x1a439e=_0xabeb6b,_0x532982=$dataSystem[_0x1a439e(0xb57)][_0x1a439e(0x93a)];for(let _0x296566=0x0;_0x296566<_0x532982;_0x296566++){const _0x2edf32=$dataSystem[_0x1a439e(0x91d)][_0x296566];if(_0x2edf32)continue;$dataSystem['attackMotions'][_0x296566]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0xabeb6b(0xc8)]['process_VisuMZ_BattleCore_PluginParams']=function(){const _0xc8150d=_0xabeb6b,_0x23066e=VisuMZ[_0xc8150d(0x553)][_0xc8150d(0x78f)];_0x23066e[_0xc8150d(0x11a)]['PopupPosition']===undefined&&(_0x23066e[_0xc8150d(0x11a)][_0xc8150d(0x4a4)]=_0xc8150d(0x3ce)),_0x23066e[_0xc8150d(0x2b0)][_0xc8150d(0xbdb)]===undefined&&(_0x23066e['Actor'][_0xc8150d(0xbdb)]=![]),_0x23066e[_0xc8150d(0xa08)][_0xc8150d(0xbdb)]===undefined&&(_0x23066e[_0xc8150d(0xa08)][_0xc8150d(0xbdb)]=!![]),_0x23066e[_0xc8150d(0x2b0)][_0xc8150d(0x300)]===undefined&&(_0x23066e['Actor'][_0xc8150d(0x300)]=![]),_0x23066e[_0xc8150d(0x2b0)]['PrioritySortActors']===undefined&&(_0x23066e['Actor']['PrioritySortActors']=!![]);},VisuMZ['DamageStyles']={},Scene_Boot[_0xabeb6b(0xc8)][_0xabeb6b(0x7dc)]=function(){const _0x43d57a=_0xabeb6b;for(const _0x7aca16 of VisuMZ[_0x43d57a(0x553)]['Settings'][_0x43d57a(0x11a)]['DamageStyleList']){if(!_0x7aca16)continue;const _0x1f7322=_0x7aca16[_0x43d57a(0x46e)][_0x43d57a(0xf8)]()['trim']();VisuMZ[_0x43d57a(0x2e6)][_0x1f7322]=_0x7aca16;}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x5d3)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot['prototype'][_0xabeb6b(0xaf6)]=function(){const _0x37ce35=_0xabeb6b,_0x4fe258=VisuMZ['BattleCore'][_0x37ce35(0x5d3)],_0x353181=_0x37ce35(0x196),_0x5b1ac1=[[_0x37ce35(0x526),_0x37ce35(0xb1d)],[_0x37ce35(0x570),_0x37ce35(0x549)]],_0x4abb3b=[[_0x37ce35(0x793),'JS\x20%1APPLY\x20%2'],[_0x37ce35(0x46c),_0x37ce35(0x896)]],_0x5481db=[['',''],[_0x37ce35(0xa4f),_0x37ce35(0x567)],[_0x37ce35(0x3ad),'AS\x20TARGET']];for(const _0x5e8191 of _0x4abb3b){for(const _0x1c2c5b of _0x5481db){for(const _0x3d9d16 of _0x5b1ac1){const _0x245108=_0x5e8191[0x0][_0x37ce35(0x782)](_0x3d9d16[0x0],_0x1c2c5b[0x0]),_0x53515c=_0x5e8191[0x1][_0x37ce35(0x782)](_0x3d9d16[0x1],_0x1c2c5b[0x1])[_0x37ce35(0xd3)](),_0x1aa53c=new RegExp(_0x353181['format'](_0x53515c),'i');_0x4fe258[_0x245108]=_0x1aa53c;}}}const _0x41048f=[[_0x37ce35(0x9eb),_0x37ce35(0x4eb)],[_0x37ce35(0x9a6),_0x37ce35(0x86b)]];for(const _0x2b1a7a of _0x41048f){for(const _0x4a6880 of _0x5b1ac1){const _0x1689c0=_0x2b1a7a[0x0][_0x37ce35(0x782)](_0x4a6880[0x0]),_0x2a68bf=_0x2b1a7a[0x1][_0x37ce35(0x782)](_0x4a6880[0x1]),_0x323bfb=new RegExp(_0x353181[_0x37ce35(0x782)](_0x2a68bf),'i');_0x4fe258[_0x1689c0]=_0x323bfb;}}const _0x58c079=[[_0x37ce35(0x829),_0x37ce35(0x586)],[_0x37ce35(0xbc),_0x37ce35(0x53a)],[_0x37ce35(0x42a),_0x37ce35(0x53f)],[_0x37ce35(0x1fd),'JS\x20BATTLE\x20DEFEAT'],['EscapeSuccessJS','JS\x20ESCAPE\x20SUCCESS'],[_0x37ce35(0x31b),'JS\x20ESCAPE\x20FAILURE'],[_0x37ce35(0x75a),'JS\x20%1START\x20TURN'],[_0x37ce35(0xb67),'JS\x20%1END\x20TURN'],[_0x37ce35(0x252),_0x37ce35(0x322)]];for(const _0x3d86ff of _0x58c079){for(const _0x353606 of _0x5b1ac1){const _0xc7872d=_0x3d86ff[0x0]['format'](_0x353606[0x0]),_0x240573=_0x3d86ff[0x1][_0x37ce35(0x782)](_0x353606[0x1]),_0x2642dc=new RegExp(_0x353181['format'](_0x240573),'i');_0x4fe258[_0xc7872d]=_0x2642dc;}}},Scene_Boot[_0xabeb6b(0xc8)]['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x7b30e5=_0xabeb6b,_0x3f459d=$dataSkills[_0x7b30e5(0x5e0)]($dataItems);for(const _0x4757b7 of _0x3f459d){if(!_0x4757b7)continue;VisuMZ['BattleCore'][_0x7b30e5(0x52c)](_0x4757b7);}},Scene_Boot[_0xabeb6b(0xc8)][_0xabeb6b(0x616)]=function(){const _0x2125f1=_0xabeb6b,_0x2e2224=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x10d67c of _0x2e2224){if(!_0x10d67c)continue;VisuMZ[_0x2125f1(0x553)][_0x2125f1(0x308)](_0x10d67c),_0x10d67c[_0x2125f1(0x55e)]!==undefined&&VisuMZ[_0x2125f1(0x553)][_0x2125f1(0xac4)](_0x10d67c);}},Scene_Boot[_0xabeb6b(0xc8)][_0xabeb6b(0x775)]=function(){const _0x367f1c=_0xabeb6b,_0x2c66e0=VisuMZ['BattleCore'][_0x367f1c(0x78f)][_0x367f1c(0xf3)][_0x367f1c(0x2a7)],_0x57f9ef=[];for(const _0x3fa211 of _0x2c66e0){const _0xf49907=$dataTroops[_0x3fa211];if(_0xf49907)_0x57f9ef[_0x367f1c(0x5cb)](JsonEx['makeDeepCopy'](_0xf49907));}for(const _0x2bb4c0 of $dataTroops){if(!_0x2bb4c0)continue;for(const _0x5f593b of _0x57f9ef){if(_0x5f593b['id']===_0x2bb4c0['id'])continue;_0x2bb4c0[_0x367f1c(0xf1)]=_0x2bb4c0[_0x367f1c(0xf1)][_0x367f1c(0x5e0)](_0x5f593b[_0x367f1c(0xf1)]);}}},Scene_Boot[_0xabeb6b(0xc8)][_0xabeb6b(0x7ab)]=function(){const _0x59686f=_0xabeb6b,_0x18575b=VisuMZ['BattleCore']['Settings'][_0x59686f(0xf3)];if(_0x18575b[_0x59686f(0x50e)]>0x0&&$dataCommonEvents[_0x18575b[_0x59686f(0x50e)]]){const _0x481de6=$dataCommonEvents[_0x18575b[_0x59686f(0x50e)]],_0x458215=_0x481de6['list'][_0x59686f(0x93a)]-0x2,_0x427f02=_0x481de6[_0x59686f(0x907)][_0x458215];if(_0x427f02&&_0x427f02['code']!==0xe6){const _0x2a0f81={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x4acca5=_0x481de6[_0x59686f(0x907)][_0x59686f(0x85e)]();_0x481de6['list'][_0x59686f(0xa1c)](_0x2a0f81),_0x481de6[_0x59686f(0x907)][_0x59686f(0xa1c)](_0x4acca5);}}},Scene_Boot[_0xabeb6b(0xc8)][_0xabeb6b(0xa83)]=function(){const _0x24c6b3=_0xabeb6b;VisuMZ[_0x24c6b3(0x553)]['CreateCommonEventKeys'](),VisuMZ['BattleCore'][_0x24c6b3(0xae0)]($dataSkills),VisuMZ[_0x24c6b3(0x553)]['BindCommonEventKeysForGroup']($dataItems);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x3f8)]=function(){const _0x719281=_0xabeb6b;VisuMZ[_0x719281(0x553)][_0x719281(0xa4d)]={};for(const _0x231ad0 of $dataCommonEvents){if(!_0x231ad0)continue;if(_0x231ad0[_0x719281(0x6e8)][_0x719281(0xef)](/\[(.*)\]/i)){let _0x57d8ac=String(RegExp['$1'])[_0x719281(0x5ec)](/,/g,'')[_0x719281(0xf8)]()[_0x719281(0xd3)]();VisuMZ['BattleCore'][_0x719281(0xa4d)][_0x57d8ac]=_0x231ad0['id'];}}},VisuMZ[_0xabeb6b(0x553)]['BindCommonEventKeysForGroup']=function(_0x2a8eac){const _0x24bb69=_0xabeb6b;for(const _0x5acbe5 of _0x2a8eac){if(!_0x5acbe5)continue;VisuMZ[_0x24bb69(0x553)]['BindCommonEventKeysForObj'](_0x5acbe5);}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x9cb)]=function(_0x1fe7cf){const _0x29f640=_0xabeb6b;if(!_0x1fe7cf)return;if(!_0x1fe7cf[_0x29f640(0x6e3)])return;VisuMZ[_0x29f640(0x553)][_0x29f640(0xa4d)]=VisuMZ['BattleCore'][_0x29f640(0xa4d)]||{};const _0x4fd7f2=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0xb525b=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x3f9441=[];const _0x2d092e=_0x1fe7cf[_0x29f640(0x6f8)]['match'](_0x4fd7f2);if(_0x2d092e){for(const _0x365d0c of _0x2d092e){_0x365d0c[_0x29f640(0xef)](_0x4fd7f2);const _0x4aea02=String(RegExp['$1'])['split'](',')[_0x29f640(0x614)](_0x127d1d=>String(_0x127d1d)['toUpperCase']()[_0x29f640(0xd3)]());_0x3f9441=_0x3f9441[_0x29f640(0x5e0)](_0x4aea02);}!_0x1fe7cf['note'][_0x29f640(0xef)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x1fe7cf[_0x29f640(0x6f8)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}if(_0x1fe7cf['note']['match'](_0xb525b)){const _0x2367d7=String(RegExp['$1'])[_0x29f640(0x8e9)](/[\r\n]+/)[_0x29f640(0x614)](_0x27837b=>String(_0x27837b)['toUpperCase']()[_0x29f640(0xd3)]());_0x3f9441=_0x3f9441[_0x29f640(0x5e0)](_0x2367d7);!_0x1fe7cf[_0x29f640(0x6f8)][_0x29f640(0xef)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x1fe7cf[_0x29f640(0x6f8)]+=_0x29f640(0x7c2));;}for(const _0x1c4032 of _0x3f9441){if(VisuMZ[_0x29f640(0x553)]['_commonEventKey'][_0x1c4032]){const _0xfc9770=VisuMZ['BattleCore'][_0x29f640(0xa4d)][_0x1c4032],_0xd5e4ac={'code':0x2c,'dataId':_0xfc9770,'value1':0x1,'value2':0x0};_0x1fe7cf['effects'][_0x29f640(0x5cb)](_0xd5e4ac);}}},Scene_Boot['prototype'][_0xabeb6b(0x559)]=function(){const _0x38cccf=_0xabeb6b,_0x42c1a7=$dataSkills[_0x38cccf(0x5e0)]($dataItems);for(const _0x97c571 of _0x42c1a7){if(!_0x97c571)continue;VisuMZ[_0x38cccf(0x553)]['Parse_Notetags_Targets'](_0x97c571);}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xbdf)]=VisuMZ[_0xabeb6b(0xbdf)],VisuMZ[_0xabeb6b(0xbdf)]=function(_0x5680d8){const _0x3ba2b5=_0xabeb6b;VisuMZ['BattleCore']['ParseActorNotetags']&&VisuMZ['BattleCore'][_0x3ba2b5(0xbdf)][_0x3ba2b5(0x378)](this,_0x5680d8),VisuMZ[_0x3ba2b5(0x553)][_0x3ba2b5(0x308)](_0x5680d8);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xa2f)]=VisuMZ[_0xabeb6b(0xa2f)],VisuMZ['ParseClassNotetags']=function(_0x1a0a95){const _0x200a09=_0xabeb6b;VisuMZ[_0x200a09(0x553)][_0x200a09(0xa2f)]&&VisuMZ['BattleCore'][_0x200a09(0xa2f)][_0x200a09(0x378)](this,_0x1a0a95),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x1a0a95);},VisuMZ[_0xabeb6b(0x553)]['ParseSkillNotetags']=VisuMZ[_0xabeb6b(0x2ce)],VisuMZ[_0xabeb6b(0x2ce)]=function(_0x411607){const _0x1b8a73=_0xabeb6b;VisuMZ[_0x1b8a73(0x553)][_0x1b8a73(0x2ce)]&&VisuMZ[_0x1b8a73(0x553)][_0x1b8a73(0x2ce)]['call'](this,_0x411607),VisuMZ['BattleCore'][_0x1b8a73(0x52c)](_0x411607),VisuMZ['BattleCore'][_0x1b8a73(0xa77)](_0x411607);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x2eb)]=VisuMZ['ParseItemNotetags'],VisuMZ[_0xabeb6b(0x2eb)]=function(_0xc380c7){const _0x4f9bbb=_0xabeb6b;VisuMZ[_0x4f9bbb(0x553)][_0x4f9bbb(0x2eb)]&&VisuMZ[_0x4f9bbb(0x553)][_0x4f9bbb(0x2eb)][_0x4f9bbb(0x378)](this,_0xc380c7),VisuMZ[_0x4f9bbb(0x553)][_0x4f9bbb(0x52c)](_0xc380c7),VisuMZ[_0x4f9bbb(0x553)][_0x4f9bbb(0xa77)](_0xc380c7);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x1fb)]=VisuMZ[_0xabeb6b(0x1fb)],VisuMZ[_0xabeb6b(0x1fb)]=function(_0xe3e9e1){const _0x352288=_0xabeb6b;VisuMZ[_0x352288(0x553)]['ParseWeaponNotetags']&&VisuMZ['BattleCore'][_0x352288(0x1fb)][_0x352288(0x378)](this,_0xe3e9e1),VisuMZ[_0x352288(0x553)][_0x352288(0x308)](_0xe3e9e1);},VisuMZ[_0xabeb6b(0x553)]['ParseArmorNotetags']=VisuMZ[_0xabeb6b(0x9f8)],VisuMZ['ParseArmorNotetags']=function(_0x203a74){const _0x50de73=_0xabeb6b;VisuMZ[_0x50de73(0x553)][_0x50de73(0x9f8)]&&VisuMZ['BattleCore'][_0x50de73(0x9f8)][_0x50de73(0x378)](this,_0x203a74),VisuMZ[_0x50de73(0x553)]['Parse_Notetags_TraitObjects'](_0x203a74);},VisuMZ['BattleCore'][_0xabeb6b(0x794)]=VisuMZ[_0xabeb6b(0x794)],VisuMZ[_0xabeb6b(0x794)]=function(_0x229608){const _0x3cc94e=_0xabeb6b;VisuMZ[_0x3cc94e(0x553)]['ParseEnemyNotetags']&&VisuMZ[_0x3cc94e(0x553)][_0x3cc94e(0x794)][_0x3cc94e(0x378)](this,_0x229608),VisuMZ['BattleCore'][_0x3cc94e(0x308)](_0x229608);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xb50)]=VisuMZ[_0xabeb6b(0xb50)],VisuMZ['ParseStateNotetags']=function(_0x4bfc67){const _0x164625=_0xabeb6b;VisuMZ[_0x164625(0x553)][_0x164625(0xb50)]&&VisuMZ[_0x164625(0x553)][_0x164625(0xb50)]['call'](this,_0x4bfc67),VisuMZ[_0x164625(0x553)][_0x164625(0x308)](_0x4bfc67),VisuMZ[_0x164625(0x553)]['Parse_Notetags_HelpDescription'](_0x4bfc67);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x52c)]=function(_0x17dbca){const _0x82012d=_0xabeb6b,_0x561383=['PreApplyJS',_0x82012d(0x5ff),_0x82012d(0x30e),'PostDamageJS','PreStartActionJS',_0x82012d(0x749),_0x82012d(0x582),_0x82012d(0xa66)];for(const _0x3c2155 of _0x561383){VisuMZ[_0x82012d(0x553)][_0x82012d(0x469)](_0x17dbca,_0x3c2155);}const _0x18a496=_0x17dbca['note'];_0x18a496['match'](/<ALWAYS CRITICAL/i)&&(_0x17dbca[_0x82012d(0x72f)]['critical']=!![]),_0x18a496[_0x82012d(0xef)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x17dbca['repeats']=Math[_0x82012d(0xb72)](0x1,Number(RegExp['$1']))),_0x18a496['match'](/<TARGET:[ ](.*)>/i)&&(_0x17dbca['scope']=String(RegExp['$1'])[_0x82012d(0xf8)]()[_0x82012d(0xd3)]());},VisuMZ['BattleCore']['Parse_Notetags_TraitObjects']=function(_0x47ef71){const _0x5934ed=_0xabeb6b,_0x2372b0=[_0x5934ed(0xa60),_0x5934ed(0x670),_0x5934ed(0x484),_0x5934ed(0x8b5),_0x5934ed(0x2c8),_0x5934ed(0x2a9),_0x5934ed(0x225),_0x5934ed(0x7c7),_0x5934ed(0x435),_0x5934ed(0x749),_0x5934ed(0x582),_0x5934ed(0xa66),'PreStartBattleJS',_0x5934ed(0x48a),'PreEndBattleJS',_0x5934ed(0x694),_0x5934ed(0x42a),_0x5934ed(0x1fd),_0x5934ed(0x227),_0x5934ed(0x31b),_0x5934ed(0x116),_0x5934ed(0xb5d),_0x5934ed(0x6df),'PostEndTurnJS',_0x5934ed(0x504),_0x5934ed(0x9de)];for(const _0x23b992 of _0x2372b0){VisuMZ[_0x5934ed(0x553)][_0x5934ed(0x469)](_0x47ef71,_0x23b992);}const _0x11b626=[_0x5934ed(0xb91),_0x5934ed(0x919),_0x5934ed(0x36a),_0x5934ed(0x260),_0x5934ed(0x161)];for(const _0x3a333b of _0x11b626){VisuMZ[_0x5934ed(0x553)][_0x5934ed(0xae4)](_0x47ef71,_0x3a333b);}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xa77)]=function(_0x32184b){const _0x12ddc0=_0xabeb6b,_0x296517=_0x32184b[_0x12ddc0(0x6f8)];if(_0x296517[_0x12ddc0(0xef)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x43c5e2=String(RegExp['$1']),_0x43004f=VisuMZ[_0x12ddc0(0x553)][_0x12ddc0(0x613)](_0x32184b,_0x12ddc0(0x78b));VisuMZ[_0x12ddc0(0x553)][_0x12ddc0(0x868)](_0x43c5e2,_0x43004f);}if(_0x296517[_0x12ddc0(0xef)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x1a6b34=String(RegExp['$1']),_0x325ab2=VisuMZ['BattleCore'][_0x12ddc0(0x613)](_0x32184b,_0x12ddc0(0x7c1));VisuMZ[_0x12ddc0(0x553)][_0x12ddc0(0x6e1)](_0x1a6b34,_0x325ab2);}},VisuMZ[_0xabeb6b(0x553)]['JS']={},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x469)]=function(_0x1c8fa3,_0x1b510c){const _0x235f11=_0xabeb6b,_0x177e9=_0x1c8fa3[_0x235f11(0x6f8)];if(_0x177e9[_0x235f11(0xef)](VisuMZ['BattleCore'][_0x235f11(0x5d3)][_0x1b510c])){const _0x7c34e6=RegExp['$1'],_0x575329=_0x235f11(0x317)['format'](_0x7c34e6),_0x30402b=VisuMZ[_0x235f11(0x553)]['createKeyJS'](_0x1c8fa3,_0x1b510c);VisuMZ[_0x235f11(0x553)]['JS'][_0x30402b]=new Function(_0x575329);}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x613)]=function(_0x6ae361,_0x137747){const _0x19b270=_0xabeb6b;if(VisuMZ[_0x19b270(0x613)])return VisuMZ['createKeyJS'](_0x6ae361,_0x137747);let _0x9218f4='';if($dataActors[_0x19b270(0x5d8)](_0x6ae361))_0x9218f4=_0x19b270(0x8f4)[_0x19b270(0x782)](_0x6ae361['id'],_0x137747);if($dataClasses[_0x19b270(0x5d8)](_0x6ae361))_0x9218f4=_0x19b270(0x91a)['format'](_0x6ae361['id'],_0x137747);if($dataSkills[_0x19b270(0x5d8)](_0x6ae361))_0x9218f4=_0x19b270(0xb0f)['format'](_0x6ae361['id'],_0x137747);if($dataItems[_0x19b270(0x5d8)](_0x6ae361))_0x9218f4='Item-%1-%2'['format'](_0x6ae361['id'],_0x137747);if($dataWeapons['includes'](_0x6ae361))_0x9218f4=_0x19b270(0x6be)[_0x19b270(0x782)](_0x6ae361['id'],_0x137747);if($dataArmors[_0x19b270(0x5d8)](_0x6ae361))_0x9218f4=_0x19b270(0x692)[_0x19b270(0x782)](_0x6ae361['id'],_0x137747);if($dataEnemies[_0x19b270(0x5d8)](_0x6ae361))_0x9218f4=_0x19b270(0x2c1)[_0x19b270(0x782)](_0x6ae361['id'],_0x137747);if($dataStates[_0x19b270(0x5d8)](_0x6ae361))_0x9218f4=_0x19b270(0xb05)[_0x19b270(0x782)](_0x6ae361['id'],_0x137747);return _0x9218f4;},VisuMZ[_0xabeb6b(0x553)]['createTargetsJS']=function(_0x25be36,_0x4da382){const _0x37d85f=_0xabeb6b,_0x3fda8f='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x37d85f(0x782)](_0x25be36);VisuMZ[_0x37d85f(0x553)]['JS'][_0x4da382]=new Function(_0x3fda8f);},VisuMZ[_0xabeb6b(0x553)]['createCommandVisibleJS']=function(_0x4b002d,_0x5329a0){const _0x3f67af=_0xabeb6b,_0x5d63f1=_0x3f67af(0xb02)['format'](_0x4b002d);VisuMZ[_0x3f67af(0x553)]['JS'][_0x5329a0]=new Function(_0x5d63f1);},VisuMZ[_0xabeb6b(0x553)]['createRateJS']=function(_0x3ca827,_0x25cab4){const _0x1f0c6b=_0xabeb6b,_0x110efd=_0x3ca827[_0x1f0c6b(0x6f8)];if(_0x110efd['match'](VisuMZ[_0x1f0c6b(0x553)]['RegExp'][_0x25cab4])){const _0x12c2e3=RegExp['$1'],_0x1e9624=_0x1f0c6b(0x2b7)['format'](_0x12c2e3),_0x147a01=VisuMZ[_0x1f0c6b(0x553)][_0x1f0c6b(0x613)](_0x3ca827,_0x25cab4);VisuMZ['BattleCore']['JS'][_0x147a01]=new Function(_0x1e9624);}},VisuMZ['BattleCore']['Parse_Notetags_HelpDescription']=function(_0x52dca5){const _0x46f39a=_0xabeb6b;_0x52dca5[_0x46f39a(0x84f)]='-';const _0x39f786=_0x52dca5[_0x46f39a(0x6f8)];_0x39f786['match'](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x52dca5[_0x46f39a(0x84f)]=String(RegExp['$1'])[_0x46f39a(0xd3)]()),_0x39f786['match'](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x52dca5[_0x46f39a(0xb3a)]=String(RegExp['$1'])[_0x46f39a(0xd3)]()),_0x39f786['match'](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING)>/i)&&(_0x52dca5[_0x46f39a(0xb14)]=!![]);},TextManager['autoBattle']=VisuMZ[_0xabeb6b(0x553)]['Settings']['PartyCmd'][_0xabeb6b(0x8a5)],TextManager[_0xabeb6b(0x9fa)]=VisuMZ[_0xabeb6b(0x553)]['Settings'][_0xabeb6b(0xb92)][_0xabeb6b(0x64e)],TextManager['autoBattleStyle']=VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)]['AutoBattle'][_0xabeb6b(0x94d)],TextManager[_0xabeb6b(0x4a9)]=VisuMZ['BattleCore'][_0xabeb6b(0x78f)][_0xabeb6b(0x2f4)][_0xabeb6b(0x46e)],ColorManager[_0xabeb6b(0x2c5)]=function(_0x3e290a){const _0x3392bf=_0xabeb6b;return _0x3e290a=String(_0x3e290a),_0x3e290a['match'](/#(.*)/i)?_0x3392bf(0xb9b)['format'](String(RegExp['$1'])):this[_0x3392bf(0x1f6)](Number(_0x3e290a));},DataManager['getDamageStyle']=function(_0x34729e){const _0xfb5762=_0xabeb6b;if(_0x34729e[_0xfb5762(0x6f8)][_0xfb5762(0xef)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x4ba70f=String(RegExp['$1'])[_0xfb5762(0xf8)]()['trim']();if(_0x4ba70f===_0xfb5762(0x438))return _0xfb5762(0x438);if(VisuMZ[_0xfb5762(0x2e6)][_0x4ba70f])return _0x4ba70f;}const _0x4c2788=VisuMZ['BattleCore'][_0xfb5762(0x78f)][_0xfb5762(0x11a)][_0xfb5762(0x30b)][_0xfb5762(0xf8)]()[_0xfb5762(0xd3)]();if(VisuMZ[_0xfb5762(0x2e6)][_0x4c2788])return _0x4c2788;return'MANUAL';},DataManager[_0xabeb6b(0xa13)]=function(_0x1b5780){const _0x44048f=_0xabeb6b;_0x1b5780=_0x1b5780[_0x44048f(0xf8)]()[_0x44048f(0xd3)](),this[_0x44048f(0x890)]=this[_0x44048f(0x890)]||{};if(this[_0x44048f(0x890)][_0x1b5780])return this[_0x44048f(0x890)][_0x1b5780];for(let _0x36fe58=0x1;_0x36fe58<0x64;_0x36fe58++){if(!$dataSystem[_0x44048f(0x908)][_0x36fe58])continue;let _0x59b09c=$dataSystem[_0x44048f(0x908)][_0x36fe58][_0x44048f(0xf8)]()[_0x44048f(0xd3)]();_0x59b09c=_0x59b09c['replace'](/\x1I\[(\d+)\]/gi,''),_0x59b09c=_0x59b09c[_0x44048f(0x5ec)](/\\I\[(\d+)\]/gi,''),this[_0x44048f(0x890)][_0x59b09c]=_0x36fe58;}return this[_0x44048f(0x890)][_0x1b5780]||0x0;},DataManager['getSkillIdWithName']=function(_0x947555){const _0x212a25=_0xabeb6b;_0x947555=_0x947555[_0x212a25(0xf8)]()['trim'](),this[_0x212a25(0x569)]=this[_0x212a25(0x569)]||{};if(this['_skillIDs'][_0x947555])return this[_0x212a25(0x569)][_0x947555];for(const _0x32b166 of $dataSkills){if(!_0x32b166)continue;this[_0x212a25(0x569)][_0x32b166['name'][_0x212a25(0xf8)]()['trim']()]=_0x32b166['id'];}return this[_0x212a25(0x569)][_0x947555]||0x0;},DataManager['getEnemyIdWithName']=function(_0xc2c8dd){const _0x3931db=_0xabeb6b;_0xc2c8dd=_0xc2c8dd[_0x3931db(0xf8)]()[_0x3931db(0xd3)](),this['_enemyIDs']=this[_0x3931db(0x8fd)]||{};if(this['_enemyIDs'][_0xc2c8dd])return this['_enemyIDs'][_0xc2c8dd];for(const _0x446ee6 of $dataEnemies){if(!_0x446ee6)continue;this[_0x3931db(0x8fd)][_0x446ee6[_0x3931db(0x6e8)]['toUpperCase']()[_0x3931db(0xd3)]()]=_0x446ee6['id'];}return this[_0x3931db(0x8fd)][_0xc2c8dd]||0x0;},DataManager['getWtypeIdWithName']=function(_0x2ac7b5){const _0x4a8258=_0xabeb6b;_0x2ac7b5=_0x2ac7b5[_0x4a8258(0xf8)]()[_0x4a8258(0xd3)](),this[_0x4a8258(0x236)]=this[_0x4a8258(0x236)]||{};if(this['_wtypeIDs'][_0x2ac7b5])return this[_0x4a8258(0x236)][_0x2ac7b5];for(let _0x21ec84=0x1;_0x21ec84<0x64;_0x21ec84++){if(!$dataSystem[_0x4a8258(0xb57)][_0x21ec84])continue;let _0x5f5d3c=$dataSystem['weaponTypes'][_0x21ec84][_0x4a8258(0xf8)]()[_0x4a8258(0xd3)]();_0x5f5d3c=_0x5f5d3c[_0x4a8258(0x5ec)](/\x1I\[(\d+)\]/gi,''),_0x5f5d3c=_0x5f5d3c[_0x4a8258(0x5ec)](/\\I\[(\d+)\]/gi,''),this[_0x4a8258(0x236)][_0x5f5d3c]=_0x21ec84;}return this['_wtypeIDs']['BARE\x20HANDS']=0x0,this[_0x4a8258(0x236)][_0x2ac7b5]||0x0;},DataManager['battleDisplayText']=function(_0x11aad0){const _0xb0cbb=_0xabeb6b,_0x599c1c=_0xb0cbb(0x8c3);let _0x424add=_0x11aad0[_0xb0cbb(0xf7)],_0x101abb=_0x11aad0[_0xb0cbb(0x6e8)];const _0x2da1d=_0x11aad0[_0xb0cbb(0x6f8)];return _0x2da1d[_0xb0cbb(0xef)](/<DISPLAY ICON: (\d+)>/i)&&(_0x424add=Number(RegExp['$1'])),_0x2da1d['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x101abb=String(RegExp['$1'])),_0x599c1c[_0xb0cbb(0x782)](_0x424add,_0x101abb);},DataManager[_0xabeb6b(0x589)]=function(_0xe126af){const _0x587201=_0xabeb6b;return _0xe126af[_0x587201(0x6f8)][_0x587201(0xef)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0xe126af['name'];},DataManager[_0xabeb6b(0xa81)]=function(_0x2fca3f){const _0x57ce41=_0xabeb6b;return _0x2fca3f[_0x57ce41(0x6f8)][_0x57ce41(0xef)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x2fca3f[_0x57ce41(0xf7)];},DataManager[_0xabeb6b(0x7e5)]=function(_0x5e9d71){const _0x38c415=_0xabeb6b,_0x4c10c6=$dataEnemies[_0x5e9d71];if(_0x4c10c6){if(_0x4c10c6[_0x38c415(0x6f8)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x519bd4=String(RegExp['$1'])[_0x38c415(0x8e9)](/[\r\n]+/)[_0x38c415(0x858)](''),_0x11f2ea=this[_0x38c415(0x123)](_0x519bd4);_0x5e9d71=this[_0x38c415(0x1dc)](_0x11f2ea)||_0x5e9d71,_0x5e9d71=DataManager[_0x38c415(0x7e5)](_0x5e9d71);}}return _0x5e9d71;},DataManager[_0xabeb6b(0x123)]=function(_0x48a036){const _0x1c37a7=_0xabeb6b;let _0x16d79a=0x0;const _0xe756ff={};for(const _0x53ee73 of _0x48a036){if(_0x53ee73[_0x1c37a7(0xef)](/(.*):[ ](\d+)/i)){const _0x16729f=String(RegExp['$1'])[_0x1c37a7(0xd3)](),_0x29c53b=Number(RegExp['$2']);_0xe756ff[_0x16729f]=_0x29c53b,_0x16d79a+=_0x29c53b;}else{if(_0x53ee73['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0x124d10=String(RegExp['$1'])[_0x1c37a7(0xd3)](),_0x422414=Number(RegExp['$2']);_0xe756ff[_0x124d10]=_0x422414,_0x16d79a+=_0x422414;}else _0x53ee73!==''&&(_0xe756ff[_0x53ee73]=0x1,_0x16d79a++);}}if(_0x16d79a<=0x0)return'';let _0x24cd84=Math['random']()*_0x16d79a;for(const _0x20bd12 in _0xe756ff){_0x24cd84-=_0xe756ff[_0x20bd12];if(_0x24cd84<=0x0)return _0x20bd12;}return'';},DataManager[_0xabeb6b(0x824)]=function(_0x3f17da){const _0x1ec92c=_0xabeb6b;if(!_0x3f17da)return![];if(!VisuMZ['BattleCore']['Settings'][_0x1ec92c(0xc4)][_0x1ec92c(0x6f4)])return![];if(_0x3f17da[_0x1ec92c(0x6f8)][_0x1ec92c(0xef)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x3f17da[_0x1ec92c(0x6f8)][_0x1ec92c(0xef)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x3add3f of _0x3f17da[_0x1ec92c(0x6e3)]){if(!_0x3add3f)continue;if(_0x3add3f[_0x1ec92c(0xb65)]===Game_Action[_0x1ec92c(0x522)])return!![];}return![];},DataManager['createTroopNote']=function(_0x5d2780){const _0x21ee8b=_0xabeb6b,_0x300101=$dataTroops[_0x5d2780];if(!_0x300101)return'';let _0x340a72='';_0x340a72+=_0x300101['name'];for(const _0x291522 of _0x300101['pages']){for(const _0x3db385 of _0x291522[_0x21ee8b(0x907)]){[0x6c,0x198][_0x21ee8b(0x5d8)](_0x3db385['code'])&&(_0x340a72+='\x0a',_0x340a72+=_0x3db385['parameters'][0x0]);}}return _0x340a72;},ConfigManager['autoBattleAtStart']=ConfigManager['autoBattleAtStart']??![],ConfigManager[_0xabeb6b(0x3c7)]=ConfigManager[_0xabeb6b(0x3c7)]??![],ConfigManager[_0xabeb6b(0x4a9)]=ConfigManager[_0xabeb6b(0x4a9)]??!![],VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x498)]=ConfigManager['makeData'],ConfigManager[_0xabeb6b(0x69b)]=function(){const _0x223ba4=_0xabeb6b,_0x167ce9=VisuMZ[_0x223ba4(0x553)][_0x223ba4(0x498)][_0x223ba4(0x378)](this);return _0x167ce9[_0x223ba4(0x233)]=this[_0x223ba4(0x233)],_0x167ce9[_0x223ba4(0x3c7)]=this['autoBattleUseSkills'],_0x167ce9[_0x223ba4(0x4a9)]=this[_0x223ba4(0x4a9)],_0x167ce9;},VisuMZ[_0xabeb6b(0x553)]['ConfigManager_applyData']=ConfigManager[_0xabeb6b(0x9a2)],ConfigManager[_0xabeb6b(0x9a2)]=function(_0xa34f98){const _0x1c59db=_0xabeb6b;VisuMZ[_0x1c59db(0x553)][_0x1c59db(0x302)][_0x1c59db(0x378)](this,_0xa34f98),'autoBattleAtStart'in _0xa34f98?this[_0x1c59db(0x233)]=_0xa34f98[_0x1c59db(0x233)]:this[_0x1c59db(0x233)]=![],_0x1c59db(0x3c7)in _0xa34f98?this['autoBattleUseSkills']=_0xa34f98[_0x1c59db(0x3c7)]:this[_0x1c59db(0x3c7)]=![],'visualHpGauge'in _0xa34f98?this[_0x1c59db(0x4a9)]=_0xa34f98[_0x1c59db(0x4a9)]:this[_0x1c59db(0x4a9)]=!![];},ImageManager['svActorHorzCells']=ImageManager[_0xabeb6b(0x6f9)]||0x9,ImageManager[_0xabeb6b(0x83b)]=ImageManager['svActorVertCells']||0x6,VisuMZ['BattleCore'][_0xabeb6b(0xa7b)]=BattleManager[_0xabeb6b(0x3a5)],BattleManager[_0xabeb6b(0x3a5)]=function(_0x17ec4b,_0x4bd884,_0x4af770){const _0x260743=_0xabeb6b;VisuMZ[_0x260743(0x553)][_0x260743(0xa7b)]['call'](this,_0x17ec4b,_0x4bd884,_0x4af770),this[_0x260743(0x4ce)]={};},VisuMZ[_0xabeb6b(0x553)]['BattleManager_initMembers']=BattleManager['initMembers'],BattleManager[_0xabeb6b(0x4e0)]=function(){const _0x3bbe0a=_0xabeb6b;VisuMZ[_0x3bbe0a(0x553)][_0x3bbe0a(0x3ab)][_0x3bbe0a(0x378)](this),this[_0x3bbe0a(0x9c7)]=[];},BattleManager[_0xabeb6b(0x3ec)]=function(){const _0x22a17f=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;const _0x352eea=SceneManager['_scene'][_0x22a17f(0x4ab)];if(_0x352eea)_0x352eea[_0x22a17f(0x1b1)]();},BattleManager[_0xabeb6b(0x5b8)]=function(){const _0x2c5167=_0xabeb6b;if(BattleManager[_0x2c5167(0x4a3)]())return _0x2c5167(0x8c2);return _0x2c5167(0x61e);},BattleManager[_0xabeb6b(0x834)]=function(_0x11cd31){const _0x428c8b=_0xabeb6b;return _0x11cd31=_0x11cd31['toUpperCase']()[_0x428c8b(0xd3)](),this[_0x428c8b(0x5b8)]()===_0x11cd31;},BattleManager[_0xabeb6b(0x33d)]=function(){const _0x3df415=_0xabeb6b;return this[_0x3df415(0x834)](_0x3df415(0x61e));},BattleManager['isTurnBased']=function(){const _0x2b04d8=_0xabeb6b;return this[_0x2b04d8(0x33d)]();},BattleManager[_0xabeb6b(0x3e4)]=function(){const _0x141822=_0xabeb6b;return!this[_0x141822(0x3b6)]();},BattleManager['isTeamBased']=function(){const _0x180d1f=_0xabeb6b;return!this[_0x180d1f(0x3b6)]()&&!this[_0x180d1f(0x3e4)]();},BattleManager[_0xabeb6b(0x170)]=function(_0x47fcc9){const _0x51e548=_0xabeb6b;this[_0x51e548(0x4ce)]=this['_battlerKeyCache']||{};if(this[_0x51e548(0x4ce)][_0x47fcc9]!==undefined)return this[_0x51e548(0x4ce)][_0x47fcc9];this[_0x51e548(0x4ce)][_0x47fcc9]=null;const _0x4d76dc=this[_0x51e548(0xb9a)](),_0x29e181=_0x4d76dc[_0x51e548(0x124)](_0x25b2b9=>_0x25b2b9[_0x51e548(0x5ce)]()===_0x47fcc9);if(_0x29e181)this[_0x51e548(0x4ce)][_0x47fcc9]=_0x29e181;return this[_0x51e548(0x4ce)][_0x47fcc9];},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x5ce)]=function(){const _0x5d0bad=_0xabeb6b;return _0x5d0bad(0x552)[_0x5d0bad(0x782)](this[_0x5d0bad(0xb6a)]()?_0x5d0bad(0x70a):_0x5d0bad(0x7d3),this[_0x5d0bad(0x6e8)]()+'-'+(this[_0x5d0bad(0xb6a)]()?this[_0x5d0bad(0x19b)]():this[_0x5d0bad(0x513)]()));},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xac7)]=function(_0x280f26){const _0x7fafe2=_0xabeb6b;if(this[_0x7fafe2(0xa7c)]!=='')return;typeof _0x280f26===_0x7fafe2(0x798)?this[_0x7fafe2(0xa7c)]=_0x280f26[_0x7fafe2(0xa5b)]()[_0x7fafe2(0xd3)]():this[_0x7fafe2(0xa7c)]=_0x280f26[_0x7fafe2(0x5ce)]();},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xa4c)]=function(){return[this['getSpecificBattlerKeyTarget']()];},Game_Action['prototype'][_0xabeb6b(0x95b)]=function(){const _0x1e051a=_0xabeb6b,_0xc60d4b=this[_0x1e051a(0xa7c)]||'',_0x1f6b64=BattleManager[_0x1e051a(0x170)](_0xc60d4b);if(!_0x1f6b64)return this[_0x1e051a(0x700)]();if(!_0x1f6b64['isAlive']())return this['getBattlerKeyTargetReplacement']();return _0x1f6b64;},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x700)]=function(){const _0x1e5927=_0xabeb6b,_0x3d6039=this[_0x1e5927(0xa7c)];return _0x3d6039[_0x1e5927(0xef)](/ACTOR/i)?this[_0x1e5927(0xa4a)]()[_0x1e5927(0xad4)]():this[_0x1e5927(0xb00)]()[_0x1e5927(0xad4)]();},BattleManager['selectedBattlers']=function(){const _0x5ab09a=_0xabeb6b;return this[_0x5ab09a(0xb9a)]()[_0x5ab09a(0x959)](_0x5ce692=>_0x5ce692[_0x5ab09a(0x75d)]());},BattleManager[_0xabeb6b(0x806)]=function(_0x1069ef){const _0x4465a4=_0xabeb6b;_0x1069ef===_0x4465a4(0x42a)&&(this['_endingBattle']=!![]),$gameParty[_0x4465a4(0x806)](_0x1069ef),$gameTroop[_0x4465a4(0x806)](_0x1069ef);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x38c)]=BattleManager[_0xabeb6b(0x3e0)],BattleManager[_0xabeb6b(0x3e0)]=function(){const _0x58bf6a=_0xabeb6b;this['_endBattle']=![],this[_0x58bf6a(0xf5)]=ConfigManager['autoBattleAtStart'],this[_0x58bf6a(0x2d6)]=![],this['processBattleCoreJS']('PreStartBattleJS'),VisuMZ[_0x58bf6a(0x553)][_0x58bf6a(0x38c)][_0x58bf6a(0x378)](this),this[_0x58bf6a(0x806)]('PostStartBattleJS');},BattleManager['processPostBattleCommonEvents']=function(_0x54a158){const _0x419349=_0xabeb6b,_0xceb856=VisuMZ[_0x419349(0x553)][_0x419349(0x78f)][_0x419349(0xf3)];_0x54a158!=='EscapeFail'&&_0xceb856[_0x419349(0x422)]&&VisuMZ[_0x419349(0x553)][_0x419349(0x827)](_0xceb856[_0x419349(0x422)])&&$gameTemp[_0x419349(0x5f1)](_0xceb856[_0x419349(0x422)]);const _0x1f0253='%1Event'[_0x419349(0x782)](_0x54a158);_0xceb856[_0x1f0253]&&VisuMZ['BattleCore'][_0x419349(0x827)](_0xceb856[_0x1f0253])&&$gameTemp[_0x419349(0x5f1)](_0xceb856[_0x1f0253]);},VisuMZ[_0xabeb6b(0x553)]['BattleManager_abort']=BattleManager[_0xabeb6b(0xa06)],BattleManager['abort']=function(){const _0x19331e=_0xabeb6b;VisuMZ[_0x19331e(0x553)]['BattleManager_abort'][_0x19331e(0x378)](this),SceneManager[_0x19331e(0x87a)]()&&BattleManager[_0x19331e(0x6ae)]();},VisuMZ[_0xabeb6b(0x553)]['BattleManager_checkBattleEnd']=BattleManager[_0xabeb6b(0x437)],BattleManager[_0xabeb6b(0x437)]=function(){const _0x3e09a9=_0xabeb6b;if(this['_phase']===_0x3e09a9(0x7df)){if($gameTemp[_0x3e09a9(0x651)]())return![];}return VisuMZ[_0x3e09a9(0x553)][_0x3e09a9(0x2a2)][_0x3e09a9(0x378)](this);},VisuMZ['BattleCore'][_0xabeb6b(0xe4)]=BattleManager['processVictory'],BattleManager[_0xabeb6b(0x4d0)]=function(){const _0x21a880=_0xabeb6b;this[_0x21a880(0x2d6)]=!![],this[_0x21a880(0x806)](_0x21a880(0x42a)),VisuMZ[_0x21a880(0x553)][_0x21a880(0xe4)][_0x21a880(0x378)](this),this[_0x21a880(0x15e)]('Victory');},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x7c5)]=BattleManager[_0xabeb6b(0xfe)],BattleManager[_0xabeb6b(0xfe)]=function(){const _0x4cb680=_0xabeb6b;this[_0x4cb680(0x2d6)]=!![],VisuMZ[_0x4cb680(0x553)][_0x4cb680(0x7c5)][_0x4cb680(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x797)]=BattleManager['processDefeat'],BattleManager[_0xabeb6b(0x11f)]=function(){const _0xdd8e72=_0xabeb6b;this[_0xdd8e72(0x2d6)]=!![],this[_0xdd8e72(0x806)](_0xdd8e72(0x1fd)),VisuMZ[_0xdd8e72(0x553)][_0xdd8e72(0x797)][_0xdd8e72(0x378)](this),this[_0xdd8e72(0x15e)](_0xdd8e72(0x67e));},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x97f)]=BattleManager[_0xabeb6b(0xb40)],BattleManager[_0xabeb6b(0xb40)]=function(_0x3526a5){const _0x57ee7e=_0xabeb6b;this[_0x57ee7e(0x5a9)]=!![],this[_0x57ee7e(0xf5)]=![],this[_0x57ee7e(0x806)](_0x57ee7e(0x8fc)),VisuMZ[_0x57ee7e(0x553)]['BattleManager_endBattle'][_0x57ee7e(0x378)](this,_0x3526a5),this['processBattleCoreJS']('PostEndBattleJS');},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x935)]=BattleManager['startTurn'],BattleManager[_0xabeb6b(0x1db)]=function(){const _0x5eedee=_0xabeb6b;if(this[_0x5eedee(0x3b6)]())this[_0x5eedee(0x806)](_0x5eedee(0x116));VisuMZ['BattleCore'][_0x5eedee(0x935)]['call'](this);if(this[_0x5eedee(0x3b6)]())this['processBattleCoreJS'](_0x5eedee(0xb5d));},BattleManager[_0xabeb6b(0x90c)]=function(){const _0x3693dc=_0xabeb6b,_0x3c148a=this['_subject'],_0xce09e3=_0x3c148a[_0x3693dc(0x5ca)]();_0xce09e3?(_0xce09e3[_0x3693dc(0xafb)](),_0xce09e3[_0x3693dc(0xba8)]()?(this[_0x3693dc(0x54f)](),_0x3c148a['removeCurrentAction']()):(_0x3c148a[_0x3693dc(0xb5e)](),this[_0x3693dc(0x235)]())):(this['endAction'](),this['_subject']=null);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x216)]=BattleManager[_0xabeb6b(0x54f)],BattleManager[_0xabeb6b(0x54f)]=function(){const _0x271e28=_0xabeb6b,_0x4ef169=this[_0x271e28(0x4ee)][_0x271e28(0x5ca)](),_0x2ed3c5=this[_0x271e28(0x4ee)];_0x4ef169&&_0x4ef169[_0x271e28(0x316)]()===_0x2ed3c5&&_0x4ef169[_0x271e28(0x70d)](_0x271e28(0x435)),VisuMZ[_0x271e28(0x553)][_0x271e28(0x216)][_0x271e28(0x378)](this),_0x4ef169&&_0x4ef169['subject']()===_0x2ed3c5&&_0x4ef169[_0x271e28(0x70d)]('PostStartActionJS');},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xb3f)]=BattleManager[_0xabeb6b(0x235)],BattleManager[_0xabeb6b(0x235)]=function(){const _0x53b803=_0xabeb6b,_0x59edbd=this['_action'],_0x25f445=this[_0x53b803(0x4ee)];_0x59edbd&&_0x59edbd!==this['_lastAction']&&_0x59edbd['subject']()===_0x25f445&&_0x59edbd['actionBattleCoreJS'](_0x53b803(0x582)),this[_0x53b803(0x4ee)]?VisuMZ[_0x53b803(0x553)][_0x53b803(0xb3f)][_0x53b803(0x378)](this):this['_phase']=_0x53b803(0x7df),_0x59edbd&&_0x59edbd!==this[_0x53b803(0x98a)]&&_0x59edbd[_0x53b803(0x316)]()===_0x25f445&&_0x59edbd['actionBattleCoreJS'](_0x53b803(0xa66)),this[_0x53b803(0x53b)](this[_0x53b803(0xb9a)]()),this[_0x53b803(0x98a)]=this[_0x53b803(0x984)];},BattleManager[_0xabeb6b(0x53b)]=function(_0x5d7afa){const _0x1c58a2=_0xabeb6b;for(const _0x1da1a8 of _0x5d7afa){if(!_0x1da1a8)continue;if(!_0x1da1a8[_0x1c58a2(0x7bb)]())continue;_0x1da1a8[_0x1c58a2(0x7bb)]()['refreshMotion']();}},BattleManager[_0xabeb6b(0x5ad)]=function(){const _0x1f7ff2=_0xabeb6b;!this[_0x1f7ff2(0x6c2)][_0x1f7ff2(0xbdd)]()&&this[_0x1f7ff2(0x235)]();},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xb27)]=function(){const _0x1ec983=_0xabeb6b;this[_0x1ec983(0x219)]();if(Imported[_0x1ec983(0x707)]){const _0x4619c0=VisuMZ[_0x1ec983(0xb0a)]['Settings'][_0x1ec983(0x86c)];_0x4619c0&&_0x4619c0[_0x1ec983(0x3c0)]===![]&&this[_0x1ec983(0x32c)](0x1);}else this['removeStatesAuto'](0x1);this['removeBuffsAuto']();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x2f5)]=BattleManager[_0xabeb6b(0x18a)],BattleManager[_0xabeb6b(0x18a)]=function(_0x4a46e2,_0x34790b){const _0x33681a=_0xabeb6b;this[_0x33681a(0x9f2)]=!![],VisuMZ[_0x33681a(0x553)][_0x33681a(0x2f5)][_0x33681a(0x378)](this,_0x4a46e2,_0x34790b),this[_0x33681a(0x9f2)]=undefined;},BattleManager[_0xabeb6b(0x9ab)]=function(){const _0xaad5b1=_0xabeb6b;this['_escapeRatio']=VisuMZ[_0xaad5b1(0x553)][_0xaad5b1(0x78f)][_0xaad5b1(0xf3)][_0xaad5b1(0x367)]['call'](this);},VisuMZ['BattleCore'][_0xabeb6b(0x273)]=BattleManager[_0xabeb6b(0x584)],BattleManager['onEscapeSuccess']=function(){const _0x20ce56=_0xabeb6b;this[_0x20ce56(0x806)]('EscapeSuccessJS'),BattleManager[_0x20ce56(0x754)][_0x20ce56(0x1a2)](),VisuMZ['BattleCore']['BattleManager_onEscapeSuccess'][_0x20ce56(0x378)](this),this['processPostBattleCommonEvents'](_0x20ce56(0x49f));},VisuMZ['BattleCore'][_0xabeb6b(0x4d6)]=BattleManager[_0xabeb6b(0x7c4)],BattleManager[_0xabeb6b(0x7c4)]=function(){const _0x4d53c3=_0xabeb6b;this[_0x4d53c3(0x806)](_0x4d53c3(0x31b));const _0x1b5e2f=this[_0x4d53c3(0xbe3)];VisuMZ['BattleCore'][_0x4d53c3(0x4d6)][_0x4d53c3(0x378)](this),this[_0x4d53c3(0xbe3)]=_0x1b5e2f+VisuMZ[_0x4d53c3(0x553)][_0x4d53c3(0x78f)][_0x4d53c3(0xf3)]['CalcEscapeRaiseJS'][_0x4d53c3(0x378)](this),this[_0x4d53c3(0x681)]=![],this[_0x4d53c3(0x15e)]('EscapeFail');},BattleManager[_0xabeb6b(0x6ad)]=function(){const _0x5cb32f=_0xabeb6b;let _0xdc7791=![];if(this[_0x5cb32f(0x3d9)]())for(const _0xb9071e of $gameTroop[_0x5cb32f(0x4ad)]()){this[_0x5cb32f(0x6c2)][_0x5cb32f(0x5cb)](_0x5cb32f(0x8dc),TextManager[_0x5cb32f(0x2ac)][_0x5cb32f(0x782)](_0xb9071e)),this[_0x5cb32f(0x6c2)]['push'](_0x5cb32f(0x269)),_0xdc7791=!![];}if(this[_0x5cb32f(0x574)])this[_0x5cb32f(0x6c2)][_0x5cb32f(0x5cb)](_0x5cb32f(0x8dc),TextManager[_0x5cb32f(0x391)][_0x5cb32f(0x782)]($gameParty[_0x5cb32f(0x6e8)]())),this['_logWindow'][_0x5cb32f(0x5cb)]('wait');else this[_0x5cb32f(0x460)]&&(this[_0x5cb32f(0x6c2)][_0x5cb32f(0x5cb)](_0x5cb32f(0x8dc),TextManager['surprise'][_0x5cb32f(0x782)]($gameParty['name']())),this['_logWindow'][_0x5cb32f(0x5cb)](_0x5cb32f(0x269)));_0xdc7791&&(this['_logWindow'][_0x5cb32f(0x5cb)](_0x5cb32f(0x269)),this[_0x5cb32f(0x6c2)][_0x5cb32f(0x5cb)](_0x5cb32f(0x500))),this[_0x5cb32f(0x4a3)]()&&this[_0x5cb32f(0xdc)]()&&(this[_0x5cb32f(0x641)]=![]);},BattleManager[_0xabeb6b(0x3d9)]=function(){const _0x5cb23b=_0xabeb6b;if(BattleManager[_0x5cb23b(0xf5)])return![];return VisuMZ['BattleCore'][_0x5cb23b(0x78f)][_0x5cb23b(0xa08)][_0x5cb23b(0x17b)];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x281)]=BattleManager[_0xabeb6b(0x4a5)],BattleManager['startInput']=function(){const _0xf11320=_0xabeb6b;VisuMZ[_0xf11320(0x553)][_0xf11320(0x281)]['call'](this),this[_0xf11320(0x33d)]()&&this['isSkipPartyCommandWindow']()&&!this[_0xf11320(0x460)]&&$gameParty[_0xf11320(0xb31)]()&&this['selectNextCommand']();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x33026f=_0xabeb6b;return VisuMZ['BattleCore'][_0x33026f(0x78f)][_0x33026f(0x153)]['SkipPartyCmd'];},BattleManager[_0xabeb6b(0x32b)]=function(){const _0x5a657e=_0xabeb6b;this[_0x5a657e(0x2d5)]()&&this[_0x5a657e(0x3cb)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x6b3)]=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x715)],Scene_Battle['prototype'][_0xabeb6b(0x715)]=function(){const _0x7617ba=_0xabeb6b;VisuMZ['BattleCore']['Scene_Battle_startActorCommandSelection']['call'](this),BattleManager[_0x7617ba(0x4a3)]()&&BattleManager[_0x7617ba(0x641)]&&(BattleManager[_0x7617ba(0x641)]=![],this[_0x7617ba(0x929)]());},BattleManager['emulateAction']=function(_0x20549e,_0x24d282,_0x14c3f8){const _0x4c443b=_0xabeb6b;if(!_0x14c3f8)return;if(!_0x20549e)return;if(!_0x24d282)return;const _0xc23355=this[_0x4c443b(0x984)];this[_0x4c443b(0x984)]=new Game_Action(_0x20549e);if(DataManager[_0x4c443b(0x7fb)](_0x14c3f8))this[_0x4c443b(0x984)]['setItem'](_0x14c3f8['id']);if(DataManager[_0x4c443b(0x901)](_0x14c3f8))this[_0x4c443b(0x984)][_0x4c443b(0x61a)](_0x14c3f8['id']);if(this[_0x4c443b(0x984)][_0x4c443b(0xb39)]())BattleManager[_0x4c443b(0xb03)](_0x20549e,_0x24d282);this[_0x4c443b(0x984)]=_0xc23355;},BattleManager[_0xabeb6b(0xa38)]=function(_0x39547e,_0x19bd98){const _0x5e175a=_0xabeb6b;this[_0x5e175a(0x984)]['_reflectionTarget']=_0x19bd98,this[_0x5e175a(0x6c2)]['displayReflection'](_0x19bd98),this[_0x5e175a(0x6c2)][_0x5e175a(0x450)](_0x39547e,this[_0x5e175a(0x984)]),this[_0x5e175a(0x984)][_0x5e175a(0x313)](_0x39547e),this[_0x5e175a(0x6c2)][_0x5e175a(0xabd)](_0x39547e,_0x39547e);},VisuMZ[_0xabeb6b(0x553)]['BattleManager_makeActionOrders']=BattleManager[_0xabeb6b(0x5ef)],BattleManager['makeActionOrders']=function(){const _0x32eba0=_0xabeb6b;VisuMZ[_0x32eba0(0x553)][_0x32eba0(0x6f6)][_0x32eba0(0x378)](this),this[_0x32eba0(0x7a6)]=this[_0x32eba0(0x7a6)][_0x32eba0(0x959)](_0x38230c=>_0x38230c&&_0x38230c[_0x32eba0(0x46a)]());},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x7e0)]=BattleManager['updatePhase'],BattleManager[_0xabeb6b(0xb04)]=function(_0x5b73eb){const _0x5256d4=_0xabeb6b;if(this[_0x5256d4(0xb98)]==='custom')this['updateCustomActionSequence']();else this['_phase']===_0x5256d4(0x43b)?this['updateForceAction']():VisuMZ[_0x5256d4(0x553)][_0x5256d4(0x7e0)][_0x5256d4(0x378)](this,_0x5b73eb);},BattleManager[_0xabeb6b(0x7ac)]=function(){const _0x7002f1=_0xabeb6b;this[_0x7002f1(0x4fa)]=this[_0x7002f1(0x1a9)][_0x7002f1(0x4e7)](0x0),this['_targetIndex']=0x0,this[_0x7002f1(0x84d)]=this['_allTargets'][0x0]||null,this[_0x7002f1(0xb98)]=_0x7002f1(0x948);},BattleManager[_0xabeb6b(0x406)]=function(){const _0x12c874=_0xabeb6b;!this[_0x12c874(0xa9d)]()&&!this['_logWindow'][_0x12c874(0xbdd)]()&&(this[_0x12c874(0xb98)]='action');},BattleManager['forceAction']=function(_0x19c1b5){const _0x4428b6=_0xabeb6b;this[_0x4428b6(0x7a6)][_0x4428b6(0x858)](_0x19c1b5);if(_0x19c1b5===this[_0x4428b6(0x4ee)])return;const _0x33b621=JsonEx['makeDeepCopy'](_0x19c1b5['currentAction']());this[_0x4428b6(0x9c7)]['push']([_0x19c1b5,_0x33b621]);},BattleManager[_0xabeb6b(0x994)]=function(){},BattleManager[_0xabeb6b(0xad2)]=function(){const _0x25799a=_0xabeb6b;if(this[_0x25799a(0x4a3)]())this['_phase']='turn';else this[_0x25799a(0x9c7)][_0x25799a(0x93a)]>0x0?this[_0x25799a(0xb98)]=_0x25799a(0x7df):this['startInput']();},BattleManager['getNextSubject']=function(){const _0x41572c=_0xabeb6b,_0x1be713=this[_0x41572c(0x4ee)];_0x1be713&&this[_0x41572c(0x4a3)]()&&_0x1be713[_0x41572c(0x7f7)](_0x41572c(0xb08));for(;;){const _0x5087f0=this['getNextSubjectFromPool']();if(!_0x5087f0)return null;if(_0x5087f0[_0x41572c(0x667)]()&&_0x5087f0[_0x41572c(0x946)]())return _0x5087f0;}},BattleManager['getNextSubjectFromPool']=function(){const _0x12a53a=_0xabeb6b;if(this[_0x12a53a(0x9c7)][_0x12a53a(0x93a)]>0x0){const _0x3c9f15=this[_0x12a53a(0x9c7)]['shift'](),_0x5084ad=_0x3c9f15[0x0];return _0x5084ad['_actions']=_0x5084ad['_actions']||[],_0x5084ad['_actions'][0x0]=_0x3c9f15[0x1],_0x5084ad;}else return this[_0x12a53a(0x7a6)][_0x12a53a(0x95f)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x4d3)]=Game_Battler[_0xabeb6b(0xc8)]['forceAction'],Game_Battler['prototype']['forceAction']=function(_0xb097e,_0x53bafe){const _0x3da41d=_0xabeb6b;VisuMZ[_0x3da41d(0x553)][_0x3da41d(0x4d3)]['call'](this,_0xb097e,_0x53bafe),this[_0x3da41d(0x22e)][this['_actions'][_0x3da41d(0x93a)]-0x1]['_forceAction']=!![];},Game_Interpreter[_0xabeb6b(0xc8)][_0xabeb6b(0x268)]=function(_0x43f4ac){const _0x51d715=_0xabeb6b;return this[_0x51d715(0x9c0)](_0x43f4ac[0x0],_0x43f4ac[0x1],_0x4b0cad=>{const _0x30e89c=_0x51d715;!_0x4b0cad[_0x30e89c(0x9d4)]()&&(_0x4b0cad[_0x30e89c(0x43b)](_0x43f4ac[0x2],_0x43f4ac[0x3]),BattleManager['forceAction'](_0x4b0cad));}),!![];},VisuMZ['BattleCore'][_0xabeb6b(0xbf)]=Game_Battler['prototype'][_0xabeb6b(0xb7b)],Game_Battler[_0xabeb6b(0xc8)]['makeSpeed']=function(){const _0x4ea253=_0xabeb6b;VisuMZ[_0x4ea253(0x553)][_0x4ea253(0xbf)][_0x4ea253(0x378)](this),this[_0x4ea253(0x22e)][_0x4ea253(0x93a)]<=0x0&&(this[_0x4ea253(0x385)]=Number[_0x4ea253(0x439)]);},BattleManager['shouldHideBattleEndPopups']=function(){const _0x2a83c5=_0xabeb6b;if(VisuMZ[_0x2a83c5(0x553)][_0x2a83c5(0x78f)][_0x2a83c5(0x11a)]['EndBattlePopups']??!![])return![];return SceneManager[_0x2a83c5(0x87a)]()&&this['_endingBattle'];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x9e4)]=BattleManager['selectNextCommand'],BattleManager['selectNextCommand']=function(){const _0x4647f4=_0xabeb6b;this[_0x4647f4(0x4a3)]()?this['selectNextCommandTpb']():VisuMZ[_0x4647f4(0x553)]['BattleManager_selectNextCommand'][_0x4647f4(0x378)](this);},BattleManager[_0xabeb6b(0x83e)]=function(){const _0x4535ea=_0xabeb6b;if(this[_0x4535ea(0x2ad)]){if(this[_0x4535ea(0x2ad)][_0x4535ea(0x3cb)]())return;this[_0x4535ea(0xbe0)](),this[_0x4535ea(0x2d8)](),!this[_0x4535ea(0x4ee)]&&!this['_currentActor']&&SceneManager[_0x4535ea(0x483)][_0x4535ea(0xaf3)]();}else!this[_0x4535ea(0x4ee)]&&this['selectNextActor']();},BattleManager[_0xabeb6b(0x2d8)]=function(){const _0x24063f=_0xabeb6b;(!this[_0x24063f(0x2d5)]()||this[_0x24063f(0x147)]())&&(this[_0x24063f(0x638)]&&(!$gameParty['battleMembers']()['includes'](this['_tpbSceneChangeCacheActor'])&&(this[_0x24063f(0x638)]=null)),!this['_tpbSceneChangeCacheActor']?(this['cancelActorInput'](),this[_0x24063f(0x2ad)]=null,this['_inputting']=![]):this[_0x24063f(0xb5f)]());},BattleManager[_0xabeb6b(0xb5f)]=function(){const _0x356013=_0xabeb6b;!$gameParty[_0x356013(0x786)]()['includes'](this[_0x356013(0x638)])&&(this['_tpbSceneChangeCacheActor']=null),this['_tpbSceneChangeCacheActor']?(this['_currentActor']=this[_0x356013(0x638)],this[_0x356013(0x2ad)]['_tpbState']=_0x356013(0x698),this['_inputting']=!![],this[_0x356013(0x638)]=null):(this[_0x356013(0x65b)](),this[_0x356013(0x2ad)]=null,this[_0x356013(0x681)]=![]);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xbd2)]=BattleManager[_0xabeb6b(0x7b6)],BattleManager['isTpbMainPhase']=function(){const _0x273520=_0xabeb6b;return this[_0x273520(0xb98)]===_0x273520(0x948)?this[_0x273520(0x48e)]():VisuMZ[_0x273520(0x553)][_0x273520(0xbd2)][_0x273520(0x378)](this);},BattleManager[_0xabeb6b(0x48e)]=function(){const _0x464a7c=_0xabeb6b;return this[_0x464a7c(0xb6c)]();},VisuMZ[_0xabeb6b(0x553)]['BattleManager_cancelActorInput']=BattleManager[_0xabeb6b(0x65b)],BattleManager[_0xabeb6b(0x65b)]=function(){const _0x314f28=_0xabeb6b;this['isTpb']()&&this[_0x314f28(0xb98)]===_0x314f28(0x4d4)&&(this[_0x314f28(0x2ad)]=null),VisuMZ[_0x314f28(0x553)][_0x314f28(0x5a8)][_0x314f28(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x473)]=BattleManager[_0xabeb6b(0x960)],BattleManager['inputtingAction']=function(){const _0x3b8f89=_0xabeb6b,_0x40cd1c=this[_0x3b8f89(0x2ad)];if(_0x40cd1c&&!_0x40cd1c[_0x3b8f89(0x960)]()){const _0x5bb76b=_0x40cd1c[_0x3b8f89(0x8bc)];_0x40cd1c['_actions'][_0x5bb76b]=new Game_Action(_0x40cd1c);}return VisuMZ[_0x3b8f89(0x553)][_0x3b8f89(0x473)][_0x3b8f89(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x130)]=BattleManager[_0xabeb6b(0x309)],BattleManager[_0xabeb6b(0x309)]=function(_0x4b0885){const _0xaa6237=_0xabeb6b;if(this[_0xaa6237(0x984)]['isForFriend']())return![];return VisuMZ[_0xaa6237(0x553)][_0xaa6237(0x130)][_0xaa6237(0x378)](this,_0x4b0885);},SceneManager[_0xabeb6b(0x87a)]=function(){const _0x1cb66e=_0xabeb6b;return this[_0x1cb66e(0x483)]&&this['_scene']['constructor']===Scene_Battle;},SceneManager[_0xabeb6b(0x799)]=function(){return Spriteset_Battle['prototype']['isFlipped']();},SceneManager['isPreviousSceneBattleTransitionable']=function(){const _0x5100fb=_0xabeb6b;if(SceneManager[_0x5100fb(0x17e)](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0x36e382=_0xabeb6b;if(SceneManager[_0x36e382(0x371)](Scene_Options))return!![];return![];},SceneManager[_0xabeb6b(0x7aa)]=function(_0x278693){const _0x245530=_0xabeb6b;if(!SceneManager[_0x245530(0x87a)]())return!![];const _0xe8c26e=['Scene_Options',_0x245530(0x650),_0x245530(0x59c)];return _0xe8c26e['includes'](_0x278693[_0x245530(0x6e8)]);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x6ea)]=SceneManager['push'],SceneManager[_0xabeb6b(0x5cb)]=function(_0xa6fc5e){const _0x5517ad=_0xabeb6b;if(!SceneManager['checkSceneBattleTransitionable'](_0xa6fc5e))return this[_0x5517ad(0x4a7)](_0xa6fc5e);VisuMZ[_0x5517ad(0x553)][_0x5517ad(0x6ea)][_0x5517ad(0x378)](this,_0xa6fc5e);},SceneManager[_0xabeb6b(0x4a7)]=function(_0x55ea78){const _0x4c03fa=_0xabeb6b;if(!$gameTemp[_0x4c03fa(0x920)]())return;if(this[_0x4c03fa(0xa87)])return;this[_0x4c03fa(0xa87)]=!![];let _0xe92f32='';_0xe92f32+=_0x4c03fa(0x136),_0xe92f32+=_0x4c03fa(0x14d)[_0x4c03fa(0x782)](_0x55ea78['name']),alert(_0xe92f32);},VisuMZ['BattleCore'][_0xabeb6b(0x23e)]=Game_Temp[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)],Game_Temp[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)]=function(){const _0x5587f7=_0xabeb6b;VisuMZ[_0x5587f7(0x553)][_0x5587f7(0x23e)][_0x5587f7(0x378)](this),this[_0x5587f7(0x696)]=[];},VisuMZ['BattleCore'][_0xabeb6b(0x950)]=Game_Temp[_0xabeb6b(0xc8)][_0xabeb6b(0x6d5)],Game_Temp[_0xabeb6b(0xc8)]['requestAnimation']=function(_0x1648f3,_0x2498c3,_0x1d958c){const _0x310211=_0xabeb6b;_0x1648f3=_0x1648f3[_0x310211(0x959)]((_0x30194c,_0x38ec9f,_0x140bed)=>_0x140bed[_0x310211(0x996)](_0x30194c)===_0x38ec9f);SceneManager[_0x310211(0x87a)]()&&SceneManager['isBattleFlipped']()&&(_0x1d958c=!_0x1d958c);VisuMZ[_0x310211(0x553)][_0x310211(0x950)]['call'](this,_0x1648f3,_0x2498c3,_0x1d958c);SceneManager['isSceneBattle']()&&BattleManager[_0x310211(0x754)]['processAnimationRequests']();for(const _0x430edc of _0x1648f3){_0x430edc&&_0x430edc[_0x310211(0x54b)]&&_0x430edc[_0x310211(0x54b)]()&&_0x430edc[_0x310211(0x151)]();}},Game_Temp['prototype']['setLastPluginCommandInterpreter']=function(_0x2b87e2){const _0x101064=_0xabeb6b;this[_0x101064(0x62e)]=_0x2b87e2;},Game_Temp[_0xabeb6b(0xc8)][_0xabeb6b(0x653)]=function(){const _0x424db9=_0xabeb6b;return this[_0x424db9(0x62e)];},Game_Temp[_0xabeb6b(0xc8)]['clearForcedGameTroopSettingsBattleCore']=function(){const _0x2ad33e=_0xabeb6b;this[_0x2ad33e(0x5fb)]=undefined;},Game_Temp[_0xabeb6b(0xc8)][_0xabeb6b(0x913)]=function(_0x541352){const _0x218bcc=_0xabeb6b;$gameMap&&$dataMap&&$dataMap['note']&&this[_0x218bcc(0x3c8)]($dataMap[_0x218bcc(0x6f8)]);const _0xaf432a=$dataTroops[_0x541352];if(_0xaf432a){let _0x2f77f9=DataManager[_0x218bcc(0x5fc)](_0xaf432a['id']);this[_0x218bcc(0x3c8)](_0x2f77f9);}},Game_Temp['prototype'][_0xabeb6b(0x3c8)]=function(_0x25c4f7){const _0x59c483=_0xabeb6b;if(!_0x25c4f7)return;if(_0x25c4f7[_0x59c483(0xef)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x2637aa=String(RegExp['$1']);if(_0x2637aa['match'](/DEFAULT/i))this[_0x59c483(0x5fb)]=_0x59c483(0xfd);else{if(_0x2637aa[_0x59c483(0xef)](/LIST/i))this[_0x59c483(0x5fb)]='list';else{if(_0x2637aa[_0x59c483(0xef)](/XP/i))this[_0x59c483(0x5fb)]='xp';else{if(_0x2637aa['match'](/PORTRAIT/i))this[_0x59c483(0x5fb)]=_0x59c483(0x62b);else{if(_0x2637aa[_0x59c483(0xef)](/BORDER/i))this[_0x59c483(0x5fb)]=_0x59c483(0x2d0);else{if(_0x2637aa['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x59c483(0x7c9)]?this[_0x59c483(0x5fb)]=_0x59c483(0x56a):this['_forcedBattleLayout']=_0x59c483(0xfd);else _0x2637aa['match'](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x59c483(0x676)]?this[_0x59c483(0x5fb)]=_0x59c483(0xa18):this[_0x59c483(0x5fb)]=_0x59c483(0xfd));}}}}}}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xaf9)]=Game_Temp[_0xabeb6b(0xc8)][_0xabeb6b(0x7e8)],Game_Temp[_0xabeb6b(0xc8)]['requestBalloon']=function(_0x15eb04,_0x3876fa){const _0x41b129=_0xabeb6b;SceneManager[_0x41b129(0x87a)]()?this[_0x41b129(0x7b9)](_0x15eb04,_0x3876fa):VisuMZ[_0x41b129(0x553)][_0x41b129(0xaf9)][_0x41b129(0x378)](this,_0x15eb04,_0x3876fa);},Game_Temp['prototype'][_0xabeb6b(0x7b9)]=function(_0x493b01,_0x420ee9){const _0x1da26=_0xabeb6b,_0x2f39eb={'target':_0x493b01,'balloonId':_0x420ee9};this['_battleBalloonQueue']=this[_0x1da26(0x696)]||[],this['_battleBalloonQueue']['push'](_0x2f39eb);},Game_Temp['prototype'][_0xabeb6b(0x85d)]=function(){const _0x12c852=_0xabeb6b;return this[_0x12c852(0x696)]=this['_battleBalloonQueue']||[],this[_0x12c852(0x696)][_0x12c852(0x95f)]();},Game_Temp[_0xabeb6b(0xc8)][_0xabeb6b(0x305)]=function(){this['_battleBalloonQueue']=[];},Spriteset_Battle[_0xabeb6b(0xc8)]['updateBattleBalloons']=function(){const _0x348133=_0xabeb6b;this['_battleBalloonSprites']===undefined&&(this['_battleBalloonSprites']=[]);for(const _0x1c51a6 of this['_battleBalloonSprites']){!_0x1c51a6['isPlaying']()&&this[_0x348133(0x69f)](_0x1c51a6);}this['processBattleBalloonRequests']();},Spriteset_Battle['prototype'][_0xabeb6b(0xbb1)]=function(){const _0x5eb07b=_0xabeb6b;for(;;){const _0xd5181a=$gameTemp[_0x5eb07b(0x85d)]();if(_0xd5181a)this['createBattleBalloon'](_0xd5181a);else break;}},Spriteset_Battle['prototype'][_0xabeb6b(0x2b6)]=function(_0x35124a){const _0x395b58=_0xabeb6b,_0x842639=this[_0x395b58(0x382)](_0x35124a[_0x395b58(0x55c)]);if(_0x842639){let _0x57649d=null;Imported[_0x395b58(0x81d)]&&Array[_0x395b58(0xe8)](_0x35124a[_0x395b58(0x850)])?_0x57649d=new Sprite_IconBalloon():_0x57649d=new Sprite_Balloon(),_0x57649d[_0x395b58(0x94e)]=_0x35124a['target'],_0x57649d[_0x395b58(0x84d)]=_0x842639,_0x57649d[_0x395b58(0x84d)]['_character']=_0x842639,_0x57649d[_0x395b58(0x3a5)](_0x842639,_0x35124a[_0x395b58(0x850)]),BattleManager[_0x395b58(0xaec)](_0x57649d),this[_0x395b58(0xb83)][_0x395b58(0x5cb)](_0x57649d);}},Spriteset_Battle['prototype'][_0xabeb6b(0x69f)]=function(_0x3a9fd9){const _0x15f0e9=_0xabeb6b;this['_battleBalloonSprites'][_0x15f0e9(0x858)](_0x3a9fd9),BattleManager[_0x15f0e9(0xaa1)](_0x3a9fd9),_0x3a9fd9['destroy']();},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x97b)]=function(_0x5ba144,_0x5ce8a3){},Sprite_Battler['prototype'][_0xabeb6b(0x915)]=function(){return![];},Spriteset_Battle[_0xabeb6b(0xc8)]['isAnyBattleBalloonPlaying']=function(){const _0x49823f=_0xabeb6b;return this[_0x49823f(0xb83)]=this[_0x49823f(0xb83)]||[],this['_battleBalloonSprites'][_0x49823f(0x93a)]>0x0;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x4e2)]=Game_System[_0xabeb6b(0xc8)]['initialize'],Game_System[_0xabeb6b(0xc8)]['initialize']=function(){const _0x11c7c7=_0xabeb6b;VisuMZ[_0x11c7c7(0x553)][_0x11c7c7(0x4e2)][_0x11c7c7(0x378)](this),this['initBattleCore']();},Game_System[_0xabeb6b(0xc8)][_0xabeb6b(0x770)]=function(){const _0x9c5259=_0xabeb6b;this[_0x9c5259(0x4f7)]=this['_defeatedEnemies']||[];},Game_System[_0xabeb6b(0xc8)]['getDefeatedEnemies']=function(){const _0x1e4ef8=_0xabeb6b;if(this[_0x1e4ef8(0x4f7)]===undefined)this[_0x1e4ef8(0x770)]();return this[_0x1e4ef8(0x4f7)];},Game_System[_0xabeb6b(0xc8)][_0xabeb6b(0x849)]=function(_0x39a191){const _0x27fe35=_0xabeb6b;if(this[_0x27fe35(0x4f7)]===undefined)this['initBattleCore']();if(!_0x39a191)return;if(this[_0x27fe35(0x4f7)][_0x27fe35(0x5d8)](_0x39a191))return;this[_0x27fe35(0x4f7)][_0x27fe35(0x5cb)](_0x39a191),this[_0x27fe35(0x4f7)]['sort']((_0x19f242,_0x10fe65)=>_0x19f242-_0x10fe65);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x2d3)]=Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x8fb)],Game_BattlerBase['prototype'][_0xabeb6b(0x8fb)]=function(_0xa44a75){const _0x17e238=_0xabeb6b,_0x3c1b3c=this[_0x17e238(0x946)](),_0x19b5b7=this['stateMotionIndex']();VisuMZ[_0x17e238(0x553)][_0x17e238(0x2d3)]['call'](this,_0xa44a75),this[_0x17e238(0x54b)]()&&_0x3c1b3c&&this[_0x17e238(0x69e)]()&&(this[_0x17e238(0xb88)]=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x17e238(0x849)](this['enemyId']())),SceneManager['isSceneBattle']()&&_0x19b5b7!==this['stateMotionIndex']()&&(this[_0x17e238(0x7bb)]()&&this[_0x17e238(0x7bb)]()[_0x17e238(0x543)]());},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x4ff)]=function(){const _0x27c99e=_0xabeb6b;return $gameSystem['getDefeatedEnemies']()[_0x27c99e(0x5d8)](this[_0x27c99e(0x432)]);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x13d)]=Game_BattlerBase['prototype']['eraseState'],Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0xc6)]=function(_0x14293f){const _0x1887cd=_0xabeb6b;VisuMZ['BattleCore'][_0x1887cd(0x13d)][_0x1887cd(0x378)](this,_0x14293f),this[_0x1887cd(0x54b)]()&&_0x14293f===this['deathStateId']()&&this[_0x1887cd(0x946)]()&&(this['_visualHpGauge_JustDied']=![]),!this[_0x1887cd(0xa84)]&&!this[_0x1887cd(0x262)]&&SceneManager['isSceneBattle']()&&this[_0x1887cd(0x1b7)]();},VisuMZ['BattleCore'][_0xabeb6b(0x20a)]=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x500)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x500)]=function(){const _0x88eb88=_0xabeb6b;VisuMZ[_0x88eb88(0x553)][_0x88eb88(0x20a)][_0x88eb88(0x378)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x88eb88(0xbcf)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x88eb88(0x5d2)]=_0x88eb88(0xfd),this['clearTargetBattlerKey']();},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xa9e)]=function(){const _0xe23361=_0xabeb6b;this[_0xe23361(0xa7c)]='';},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xbe2)]=Game_Action['prototype']['setSubject'],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x66e)]=function(_0x2b176a){const _0x48b5b4=_0xabeb6b;VisuMZ['BattleCore'][_0x48b5b4(0xbe2)][_0x48b5b4(0x378)](this,_0x2b176a),this[_0x48b5b4(0xa9e)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x179)]=Game_Action['prototype'][_0xabeb6b(0x61a)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x61a)]=function(_0x5970df){const _0x43cbe0=_0xabeb6b;VisuMZ[_0x43cbe0(0x553)][_0x43cbe0(0x179)]['call'](this,_0x5970df),this[_0x43cbe0(0xa9e)]();},VisuMZ['BattleCore'][_0xabeb6b(0x1a6)]=Game_Action[_0xabeb6b(0xc8)]['setItem'],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x174)]=function(_0x3c169f){const _0x512425=_0xabeb6b;VisuMZ[_0x512425(0x553)][_0x512425(0x1a6)][_0x512425(0x378)](this,_0x3c169f),this[_0x512425(0xa9e)]();},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xacb)]=function(_0x32fed5,_0x3a6a21){const _0x39b0cb=_0xabeb6b;return VisuMZ[_0x39b0cb(0x553)][_0x39b0cb(0x78f)][_0x39b0cb(0x11a)][_0x39b0cb(0x70c)]['call'](this,_0x32fed5,_0x3a6a21);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x150)]=function(_0x2f9f37,_0x432a9c){const _0x4a2aed=_0xabeb6b;return VisuMZ['BattleCore'][_0x4a2aed(0x78f)][_0x4a2aed(0x11a)][_0x4a2aed(0x208)][_0x4a2aed(0x378)](this,_0x2f9f37,_0x432a9c);},Game_Action['prototype'][_0xabeb6b(0xb8e)]=function(_0x22abf7,_0x35febc){const _0x3f3974=_0xabeb6b;return VisuMZ[_0x3f3974(0x553)][_0x3f3974(0x78f)][_0x3f3974(0x11a)]['GuardFormulaJS'][_0x3f3974(0x378)](this,_0x22abf7,_0x35febc);},VisuMZ[_0xabeb6b(0x553)]['Game_Action_itemHit']=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x803)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x803)]=function(_0x5bbd9e){const _0x334fd0=_0xabeb6b,_0xe2d784=this[_0x334fd0(0xb39)]()[_0x334fd0(0x6f8)];if(_0xe2d784[_0x334fd0(0xef)](/<ALWAYS HIT>/i))return 0x1;else{if(_0xe2d784['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x516212=VisuMZ['BattleCore'][_0x334fd0(0x1bd)][_0x334fd0(0x378)](this,_0x5bbd9e);return _0x516212=this['_multipliers'][_0x334fd0(0x9bf)]*_0x516212+this[_0x334fd0(0xbcf)]['hitFlat'],$gameParty['inBattle']()&&(_0x516212=this[_0x334fd0(0x536)](_0x516212,_0x5bbd9e)),_0x516212;}}},VisuMZ[_0xabeb6b(0x553)]['Game_Action_updateLastTarget']=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x573)],Game_Action[_0xabeb6b(0xc8)]['updateLastTarget']=function(_0x541bcf){const _0x10511c=_0xabeb6b;this[_0x10511c(0xa0f)]=!![],VisuMZ[_0x10511c(0x553)][_0x10511c(0xb38)]['call'](this,_0x541bcf),this[_0x10511c(0xa0f)]=undefined;},Game_Action[_0xabeb6b(0xc8)]['declareGlobalVariables']=function(_0xb110f8){const _0x51850e=_0xabeb6b;window['action']=this,window['a']=this[_0x51850e(0x316)](),window['b']=_0xb110f8,window[_0x51850e(0xacf)]=this[_0x51850e(0x316)](),window[_0x51850e(0x55c)]=_0xb110f8,window[_0x51850e(0xae9)]=this['item'](),window[_0x51850e(0x3a1)]=this['item'](),window[_0x51850e(0xb39)]=this[_0x51850e(0xb39)]();},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x7a3)]=function(_0x1fd45a){const _0xcdb2d7=_0xabeb6b;window[_0xcdb2d7(0x86e)]=undefined,window['a']=undefined,window['b']=undefined,window['user']=undefined,window[_0xcdb2d7(0x55c)]=undefined,window[_0xcdb2d7(0xae9)]=undefined,window['skill']=undefined,window[_0xcdb2d7(0xb39)]=undefined;},Game_Action[_0xabeb6b(0xc8)]['applyBattleCoreHitRateJS']=function(_0xfb8398,_0x1f6f40){const _0x1b5669=_0xabeb6b;if(this[_0x1b5669(0xa0f)])return _0xfb8398;this[_0x1b5669(0x905)](_0x1f6f40);if(this[_0x1b5669(0xb39)]()){let _0x2cbbe5=VisuMZ[_0x1b5669(0x553)]['createKeyJS'](this[_0x1b5669(0xb39)](),_0x1b5669(0xb91));VisuMZ[_0x1b5669(0x553)]['JS'][_0x2cbbe5]&&(_0xfb8398=VisuMZ['BattleCore']['JS'][_0x2cbbe5]['call'](this,this['subject'](),_0x1f6f40,this[_0x1b5669(0xb39)](),_0xfb8398));}for(const _0x4715b1 of this['subject']()[_0x1b5669(0xa17)]()){if(!_0x4715b1)continue;key=VisuMZ[_0x1b5669(0x553)][_0x1b5669(0x613)](_0x4715b1,_0x1b5669(0x919)),VisuMZ[_0x1b5669(0x553)]['JS'][key]&&(_0xfb8398=VisuMZ[_0x1b5669(0x553)]['JS'][key][_0x1b5669(0x378)](this,this['subject'](),_0x1f6f40,this[_0x1b5669(0xb39)](),_0xfb8398));}for(const _0x14c81f of _0x1f6f40['traitObjects']()){if(!_0x14c81f)continue;key=VisuMZ[_0x1b5669(0x553)][_0x1b5669(0x613)](_0x14c81f,_0x1b5669(0x36a)),VisuMZ[_0x1b5669(0x553)]['JS'][key]&&(_0xfb8398=VisuMZ['BattleCore']['JS'][key][_0x1b5669(0x378)](this,this['subject'](),_0x1f6f40,this['item'](),_0xfb8398));}return this[_0x1b5669(0x7a3)](_0x1f6f40),_0xfb8398;},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xa64)]=function(_0xfcf49){const _0x4aeebd=_0xabeb6b;if(!this[_0x4aeebd(0xb39)]()[_0x4aeebd(0x72f)][_0x4aeebd(0x68c)])return 0x0;let _0x2354b3=VisuMZ[_0x4aeebd(0x553)][_0x4aeebd(0x78f)][_0x4aeebd(0x11a)][_0x4aeebd(0x357)][_0x4aeebd(0x378)](this,_0xfcf49);return _0x2354b3=this[_0x4aeebd(0xbcf)]['criticalHitRate']*_0x2354b3+this['_multipliers'][_0x4aeebd(0x9a5)],$gameParty[_0x4aeebd(0xaaf)]()&&(_0x2354b3=this[_0x4aeebd(0x2c7)](_0x2354b3,_0xfcf49)),_0x2354b3;},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x2c7)]=function(_0x537cad,_0x3a12d7){const _0x659fe1=_0xabeb6b;this['declareGlobalVariables'](_0x3a12d7),window[_0x659fe1(0xb58)]=_0x537cad;{const _0xaff965=this[_0x659fe1(0x316)]()[_0x659fe1(0xa17)]();for(const _0x1dcfc3 of _0xaff965){if(!_0x1dcfc3)continue;if(_0x1dcfc3[_0x659fe1(0x6f8)][_0x659fe1(0xef)](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x24a1de=String(RegExp['$1']);try{eval(_0x24a1de);}catch(_0x47de92){if($gameTemp[_0x659fe1(0x920)]())console[_0x659fe1(0x339)](_0x47de92);}}}}{const _0x413fa7=_0x3a12d7[_0x659fe1(0xa17)]();for(const _0x2aafe2 of _0x413fa7){if(!_0x2aafe2)continue;if(_0x2aafe2[_0x659fe1(0x6f8)][_0x659fe1(0xef)](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x2f4dc4=String(RegExp['$1']);try{eval(_0x2f4dc4);}catch(_0x57022e){if($gameTemp[_0x659fe1(0x920)]())console[_0x659fe1(0x339)](_0x57022e);}}}}return _0x537cad=window['rate'],this[_0x659fe1(0x7a3)](_0x3a12d7),_0x537cad;},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x2c7)]=function(_0x15600e,_0x543c6d){const _0x2af91e=_0xabeb6b;this[_0x2af91e(0x905)](_0x543c6d);for(const _0xccd5d of this[_0x2af91e(0x316)]()[_0x2af91e(0xa17)]()){if(!_0xccd5d)continue;key=VisuMZ['BattleCore'][_0x2af91e(0x613)](_0xccd5d,_0x2af91e(0x260)),VisuMZ['BattleCore']['JS'][key]&&(_0x15600e=VisuMZ[_0x2af91e(0x553)]['JS'][key][_0x2af91e(0x378)](this,this[_0x2af91e(0x316)](),_0x543c6d,this[_0x2af91e(0xb39)](),_0x15600e));}for(const _0x285906 of _0x543c6d[_0x2af91e(0xa17)]()){if(!_0x285906)continue;key=VisuMZ['BattleCore'][_0x2af91e(0x613)](_0x285906,_0x2af91e(0x161)),VisuMZ[_0x2af91e(0x553)]['JS'][key]&&(_0x15600e=VisuMZ[_0x2af91e(0x553)]['JS'][key][_0x2af91e(0x378)](this,this['subject'](),_0x543c6d,this[_0x2af91e(0xb39)](),_0x15600e));}return this[_0x2af91e(0x7a3)](_0x543c6d),_0x15600e;},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xb66)]=function(_0x3e5f9f){const _0x394723=_0xabeb6b;return _0x3e5f9f=VisuMZ[_0x394723(0x553)][_0x394723(0x78f)]['Damage']['CriticalHitMultiplier'][_0x394723(0x378)](this,_0x3e5f9f),_0x3e5f9f=this[_0x394723(0xbcf)][_0x394723(0x1af)]*_0x3e5f9f+this[_0x394723(0xbcf)][_0x394723(0x83d)],_0x3e5f9f;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x8ec)]=Game_Action[_0xabeb6b(0xc8)]['evalDamageFormula'],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x826)]=function(_0x5e10db){const _0x48080f=_0xabeb6b;if(this['_customDamageFormula']!=='default')return this[_0x48080f(0x1e9)](_0x5e10db);else return DataManager[_0x48080f(0xbd9)](this[_0x48080f(0xb39)]())===_0x48080f(0x438)?VisuMZ[_0x48080f(0x553)][_0x48080f(0x8ec)][_0x48080f(0x378)](this,_0x5e10db):this[_0x48080f(0xda)](_0x5e10db);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xb46)]=function(_0x3682e2){const _0x1b478a=_0xabeb6b;this[_0x1b478a(0x5d2)]=_0x3682e2;},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x1e9)]=function(_0x3ec383){const _0x350029=_0xabeb6b,_0x13ed28=this[_0x350029(0xb39)](),_0x3c4acc=_0x13ed28[_0x350029(0x72f)]['formula'];_0x13ed28[_0x350029(0x72f)][_0x350029(0x96d)]=this[_0x350029(0x5d2)];let _0x29d18b=VisuMZ['BattleCore']['Game_Action_evalDamageFormula']['call'](this,_0x3ec383);return _0x13ed28[_0x350029(0x72f)]['formula']=_0x3c4acc,_0x29d18b;},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x671)]=function(){const _0x521462=_0xabeb6b;if(this[_0x521462(0xb39)]()[_0x521462(0x6f8)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x364d4e=String(RegExp['$1'])[_0x521462(0xf8)]()[_0x521462(0xd3)]();return _0x364d4e;}return'MANUAL';},Game_Action[_0xabeb6b(0xc8)]['evalDamageFormulaBattleCore']=function(_0x30a16f){const _0x4dc3de=_0xabeb6b,_0x397537=DataManager[_0x4dc3de(0xbd9)](this[_0x4dc3de(0xb39)]()),_0x209505=VisuMZ['DamageStyles'][_0x397537];try{return _0x209505[_0x4dc3de(0x112)][_0x4dc3de(0x378)](this,_0x30a16f);}catch(_0xc40958){if($gameTemp[_0x4dc3de(0x920)]())console['log'](_0xc40958);return VisuMZ[_0x4dc3de(0x553)]['Game_Action_evalDamageFormula'][_0x4dc3de(0x378)](this);}},Game_Action['prototype'][_0xabeb6b(0x979)]=function(_0x48db13,_0x475036){const _0x4f7b7e=_0xabeb6b;if(this[_0x4f7b7e(0x19c)]())return _0x475036;const _0x41d344=this['subject'](),_0x19c1f3=_0x48db13;let _0x547efa=[],_0x2843bf=[];_0x547efa[_0x4f7b7e(0x5cb)](this['_armorPenetration'][_0x4f7b7e(0xa14)],this[_0x4f7b7e(0x581)][_0x4f7b7e(0x851)]),_0x2843bf[_0x4f7b7e(0x5cb)](this[_0x4f7b7e(0x581)]['arPenRate'],this[_0x4f7b7e(0x581)][_0x4f7b7e(0x8a1)]);const _0x21ea7f=this[_0x4f7b7e(0x2fd)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x2ab830=this[_0x4f7b7e(0x2fd)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x7be93=this[_0x4f7b7e(0x2fd)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x470179=this[_0x4f7b7e(0x2fd)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x547efa=_0x547efa[_0x4f7b7e(0x5e0)](_0x19c1f3[_0x4f7b7e(0xa17)]()['map'](_0x95257=>_0x95257&&_0x95257[_0x4f7b7e(0x6f8)][_0x4f7b7e(0xef)](_0x21ea7f)?Number(RegExp['$1']):0x0)),_0x2843bf=_0x2843bf['concat'](_0x19c1f3[_0x4f7b7e(0xa17)]()[_0x4f7b7e(0x614)](_0x3440ca=>_0x3440ca&&_0x3440ca[_0x4f7b7e(0x6f8)][_0x4f7b7e(0xef)](_0x2ab830)?Number(RegExp['$1'])/0x64:0x0)),_0x547efa=_0x547efa[_0x4f7b7e(0x5e0)](_0x41d344[_0x4f7b7e(0xa17)]()[_0x4f7b7e(0x614)](_0x2ab9a2=>_0x2ab9a2&&_0x2ab9a2[_0x4f7b7e(0x6f8)][_0x4f7b7e(0xef)](_0x7be93)?Number(RegExp['$1']):0x0)),_0x2843bf=_0x2843bf[_0x4f7b7e(0x5e0)](_0x41d344['traitObjects']()[_0x4f7b7e(0x614)](_0x51ceb3=>_0x51ceb3&&_0x51ceb3[_0x4f7b7e(0x6f8)][_0x4f7b7e(0xef)](_0x470179)?Number(RegExp['$1'])/0x64:0x0)),this[_0x4f7b7e(0xb39)]()[_0x4f7b7e(0x6f8)][_0x4f7b7e(0xef)](_0x7be93)&&_0x547efa[_0x4f7b7e(0x5cb)](Number(RegExp['$1'])),this[_0x4f7b7e(0xb39)]()[_0x4f7b7e(0x6f8)][_0x4f7b7e(0xef)](_0x470179)&&_0x2843bf[_0x4f7b7e(0x5cb)](Number(RegExp['$1'])),_0x475036=_0x547efa[_0x4f7b7e(0x1f7)]((_0x450d69,_0x3f6ee6)=>_0x450d69-_0x3f6ee6,_0x475036),_0x475036>0x0&&(_0x475036=_0x2843bf[_0x4f7b7e(0x1f7)]((_0x355e8d,_0x1d500d)=>_0x355e8d*(0x1-_0x1d500d),_0x475036)),_0x475036;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x21f)]=Game_Action[_0xabeb6b(0xc8)]['executeDamage'],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x9ae)]=function(_0x11761d,_0x2de659){const _0x4814e1=_0xabeb6b;_0x2de659=_0x2de659*this['_multipliers'][_0x4814e1(0x520)],_0x2de659+=this['_multipliers']['damageFlat']*(_0x2de659>=0x0?0x1:-0x1),_0x2de659=this[_0x4814e1(0x254)](_0x4814e1(0x474),_0x11761d,_0x2de659,![]),_0x2de659=this[_0x4814e1(0x779)](_0x2de659),_0x2de659>0x0?_0x2de659=Math[_0x4814e1(0x534)](_0x2de659):_0x2de659=Math[_0x4814e1(0x108)](_0x2de659),this[_0x4814e1(0xb43)]=_0x2de659,this[_0x4814e1(0x4c8)]=this['_totalValue']||0x0,this[_0x4814e1(0x4c8)]+=_0x2de659,VisuMZ[_0x4814e1(0x553)][_0x4814e1(0x21f)][_0x4814e1(0x378)](this,_0x11761d,_0x2de659),this[_0x4814e1(0x254)](_0x4814e1(0x8b2),_0x11761d,_0x2de659,!![]);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x779)]=function(_0xc34a3){const _0x55bae2=_0xabeb6b;if(this[_0x55bae2(0x56b)]())return _0xc34a3;return _0xc34a3=this[_0x55bae2(0x89d)](_0xc34a3),_0xc34a3=this[_0x55bae2(0x91e)](_0xc34a3),_0xc34a3;},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x56b)]=function(){const _0x53277b=_0xabeb6b,_0x230602=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0x53277b(0x6f8)][_0x53277b(0xef)](_0x230602))return!![];if(this[_0x53277b(0x316)]()[_0x53277b(0xa17)]()[_0x53277b(0x886)](_0x5d7013=>_0x5d7013&&_0x5d7013['note'][_0x53277b(0xef)](_0x230602)))return!![];return!VisuMZ[_0x53277b(0x553)][_0x53277b(0x78f)][_0x53277b(0x11a)][_0x53277b(0x81a)];},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x89d)]=function(_0x2beae4){const _0x2ef28e=_0xabeb6b;if(!VisuMZ[_0x2ef28e(0x553)][_0x2ef28e(0x78f)]['Damage'][_0x2ef28e(0x3a9)])return _0x2beae4;const _0x108389=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x2ef28e(0xb39)]()[_0x2ef28e(0x6f8)][_0x2ef28e(0xef)](_0x108389))return _0x2beae4;if(this[_0x2ef28e(0x316)]()[_0x2ef28e(0xa17)]()[_0x2ef28e(0x886)](_0x447be9=>_0x447be9&&_0x447be9[_0x2ef28e(0x6f8)]['match'](_0x108389)))return _0x2beae4;const _0x32835a=_0x2beae4<0x0?-0x1:0x1;_0x2beae4=Math[_0x2ef28e(0x7e9)](_0x2beae4);let _0x4e8ebe=this[_0x2ef28e(0x316)]()['softDamageCapRate']();this[_0x2ef28e(0xb39)]()[_0x2ef28e(0x6f8)][_0x2ef28e(0xef)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x4e8ebe+=Number(RegExp['$1'])/0x64);_0x4e8ebe=_0x4e8ebe[_0x2ef28e(0x86d)](0.01,0x1);const _0x56814b=this[_0x2ef28e(0x63a)](),_0x2b1011=_0x4e8ebe*_0x56814b;if(_0x2beae4>_0x2b1011&&_0x56814b>_0x2b1011){_0x2beae4-=_0x2b1011;const _0xe6e890=VisuMZ['BattleCore']['Settings'][_0x2ef28e(0x11a)]['DefaultSoftScaler'],_0x467173=Math[_0x2ef28e(0xb72)](0x1-_0x2beae4/((_0x56814b-_0x2b1011)*_0xe6e890+_0x2beae4),0.01);_0x2beae4*=_0x467173,_0x2beae4+=_0x2b1011;}return _0x2beae4*_0x32835a;},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x63a)]=function(){const _0x52a59c=_0xabeb6b;return this[_0x52a59c(0xb39)]()[_0x52a59c(0x6f8)][_0x52a59c(0xef)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x52a59c(0x316)]()[_0x52a59c(0x517)]();},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x91e)]=function(_0x4e02dc){const _0x30a965=_0xabeb6b;let _0x3cf0ae=this[_0x30a965(0x63a)]();return _0x4e02dc[_0x30a965(0x86d)](-_0x3cf0ae,_0x3cf0ae);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x600)]=function(){const _0xbe41d6=_0xabeb6b;if(!this['item']())return![];if(!$gameParty[_0xbe41d6(0xaaf)]())return![];return(this['item']()['note']||'')['match'](/<DISPERSE DAMAGE>/i);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x6ff)]=function(_0x2fb6dd){const _0x4167a2=_0xabeb6b;if(this['shouldDisperseDamage']()){let _0x548f98=BattleManager[_0x4167a2(0x1a9)];_0x2fb6dd/=_0x548f98[_0x4167a2(0x93a)],this[_0x4167a2(0x76c)]()&&(_0x2fb6dd*=this[_0x4167a2(0x316)]()[_0x4167a2(0x5b2)]()+0x1),_0x2fb6dd=_0x2fb6dd>0x0?Math[_0x4167a2(0x534)](_0x2fb6dd):Math['floor'](_0x2fb6dd);}return _0x2fb6dd;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x87e)]=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xacb)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xacb)]=function(_0xd67797,_0x198f1d){const _0x3826e9=_0xabeb6b;let _0x501976=VisuMZ[_0x3826e9(0x553)][_0x3826e9(0x87e)][_0x3826e9(0x378)](this,_0xd67797,_0x198f1d);return this[_0x3826e9(0x6ff)](_0x501976);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x28d)]=function(_0x1672a6,_0x33b95b){const _0x246db7=_0xabeb6b;let _0x38f67=(_0x1672a6[_0x246db7(0x78d)]*_0x33b95b[_0x246db7(0x50c)]+_0x33b95b[_0x246db7(0x789)])*_0x1672a6[_0x246db7(0x578)];_0x38f67=this[_0x246db7(0x6ff)](_0x38f67),this['isItem']()&&(_0x38f67*=this[_0x246db7(0x316)]()[_0x246db7(0x394)]),_0x38f67=Math[_0x246db7(0x108)](_0x38f67),_0x38f67!==0x0&&(_0x1672a6[_0x246db7(0xf6)](_0x38f67),this[_0x246db7(0x2f3)](_0x1672a6));},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x925)]=function(_0x5831c0,_0x4af039){const _0x4289c1=_0xabeb6b;let _0x45c3e5=(_0x5831c0[_0x4289c1(0x44b)]*_0x4af039[_0x4289c1(0x50c)]+_0x4af039[_0x4289c1(0x789)])*_0x5831c0[_0x4289c1(0x578)];_0x45c3e5=this['disperseDamage'](_0x45c3e5),this[_0x4289c1(0x7fb)]()&&(_0x45c3e5*=this['subject']()[_0x4289c1(0x394)]),_0x45c3e5=Math[_0x4289c1(0x108)](_0x45c3e5),_0x45c3e5!==0x0&&(_0x5831c0[_0x4289c1(0x20f)](_0x45c3e5),this['makeSuccess'](_0x5831c0));},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x3a4)]=function(_0x2327e2,_0x2a32de){const _0x2c75cf=_0xabeb6b;let _0xed6f3d=Math[_0x2c75cf(0x108)](_0x2a32de[_0x2c75cf(0x50c)]);_0xed6f3d=this[_0x2c75cf(0x6ff)](_0xed6f3d),_0xed6f3d!==0x0&&(_0x2327e2[_0x2c75cf(0x605)](_0xed6f3d),this['makeSuccess'](_0x2327e2));},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x839)]=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x313)],Game_Action[_0xabeb6b(0xc8)]['apply']=function(_0x2e9543){const _0x401e7c=_0xabeb6b;if(_0x2e9543&&_0x2e9543['isEnemy']())_0x2e9543['resetNameTempVisibility']();this[_0x401e7c(0x254)](_0x401e7c(0xb84),_0x2e9543,0x0,!![]),VisuMZ[_0x401e7c(0x553)][_0x401e7c(0x839)]['call'](this,_0x2e9543),this[_0x401e7c(0x254)]('PostApply%1JS',_0x2e9543,this[_0x401e7c(0xb43)]||0x0,!![]),this[_0x401e7c(0x62d)](_0x2e9543);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x254)]=function(_0x44c72e,_0x1203f1,_0x544654,_0x5304e1){const _0x17ef73=_0xabeb6b;if(this[_0x17ef73(0x262)]||this[_0x17ef73(0xa84)])return;_0x544654=_0x544654||0x0;const _0x504e68=_0x544654,_0x5d7805=VisuMZ['BattleCore'][_0x17ef73(0x78f)]['Mechanics'],_0x32630f=_0x44c72e[_0x17ef73(0x782)]('');if(_0x5d7805[_0x32630f]){_0x544654=_0x5d7805[_0x32630f][_0x17ef73(0x378)](this,_0x544654,_0x1203f1);if(_0x5304e1)_0x544654=_0x504e68;}let _0x2f3885=VisuMZ[_0x17ef73(0x553)]['createKeyJS'](this['item'](),_0x44c72e[_0x17ef73(0x782)](''));if(VisuMZ[_0x17ef73(0x553)]['JS'][_0x2f3885]){_0x544654=VisuMZ[_0x17ef73(0x553)]['JS'][_0x2f3885]['call'](this,this[_0x17ef73(0x316)](),_0x1203f1,this[_0x17ef73(0xb39)](),_0x544654);if(_0x5304e1)_0x544654=_0x504e68;}for(const _0x487065 of this[_0x17ef73(0x316)]()[_0x17ef73(0xa17)]()){if(!_0x487065)continue;_0x2f3885=VisuMZ[_0x17ef73(0x553)][_0x17ef73(0x613)](_0x487065,_0x44c72e[_0x17ef73(0x782)](_0x17ef73(0xa4f)));if(VisuMZ['BattleCore']['JS'][_0x2f3885]){_0x544654=VisuMZ[_0x17ef73(0x553)]['JS'][_0x2f3885][_0x17ef73(0x378)](this,this[_0x17ef73(0x316)](),_0x1203f1,_0x487065,_0x544654);if(_0x5304e1)_0x544654=_0x504e68;}}for(const _0x89dec6 of _0x1203f1[_0x17ef73(0xa17)]()){if(!_0x89dec6)continue;_0x2f3885=VisuMZ[_0x17ef73(0x553)][_0x17ef73(0x613)](_0x89dec6,_0x44c72e['format']('AsTarget'));if(VisuMZ[_0x17ef73(0x553)]['JS'][_0x2f3885]){_0x544654=VisuMZ[_0x17ef73(0x553)]['JS'][_0x2f3885][_0x17ef73(0x378)](this,this[_0x17ef73(0x316)](),_0x1203f1,_0x89dec6,_0x544654);if(_0x5304e1)_0x544654=_0x504e68;}}return _0x544654;},Game_Action[_0xabeb6b(0xc8)]['actionBattleCoreJS']=function(_0x3aa8ef){const _0x265d5c=_0xabeb6b,_0x2473ba=this[_0x265d5c(0x4c8)]||0x0,_0x5b9e30=VisuMZ[_0x265d5c(0x553)][_0x265d5c(0x78f)][_0x265d5c(0xf3)],_0x3b4837=_0x3aa8ef['format']('');_0x5b9e30[_0x3b4837]&&_0x5b9e30[_0x3b4837]['call'](this,_0x2473ba);let _0x3fa5c8=VisuMZ[_0x265d5c(0x553)][_0x265d5c(0x613)](this[_0x265d5c(0xb39)](),_0x3aa8ef);VisuMZ[_0x265d5c(0x553)]['JS'][_0x3fa5c8]&&VisuMZ['BattleCore']['JS'][_0x3fa5c8][_0x265d5c(0x378)](this,this['subject'](),this[_0x265d5c(0x316)](),this[_0x265d5c(0xb39)](),_0x2473ba);for(const _0x1bb8ea of this[_0x265d5c(0x316)]()[_0x265d5c(0xa17)]()){if(!_0x1bb8ea)continue;_0x3fa5c8=VisuMZ['BattleCore']['createKeyJS'](_0x1bb8ea,_0x3aa8ef),VisuMZ[_0x265d5c(0x553)]['JS'][_0x3fa5c8]&&VisuMZ[_0x265d5c(0x553)]['JS'][_0x3fa5c8][_0x265d5c(0x378)](this,this['subject'](),this['subject'](),_0x1bb8ea,_0x2473ba);}},Game_Action['prototype'][_0xabeb6b(0xaa7)]=function(){const _0x3fc2c6=_0xabeb6b;return VisuMZ[_0x3fc2c6(0x553)][_0x3fc2c6(0x78f)]['Mechanics']['CalcActionSpeedJS'][_0x3fc2c6(0x378)](this);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x7d6)]=function(){const _0x1eebb5=_0xabeb6b;return VisuMZ['BattleCore'][_0x1eebb5(0x78f)][_0x1eebb5(0xf3)][_0x1eebb5(0x9d1)];},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xaa6)]=function(){const _0x950987=_0xabeb6b;if(this[_0x950987(0xa7c)]===_0x950987(0x265))return![];if(this[_0x950987(0xa7c)]===_0x950987(0x1cf))return![];if(!this[_0x950987(0xb39)]())return![];return this[_0x950987(0xb39)]()['note'][_0x950987(0xef)](/<JS TARGETS>/i);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x628)]=function(){const _0x4db909=_0xabeb6b;if(this[_0x4db909(0xa7c)]===_0x4db909(0x265))return![];if(this['_targetBattlerKey']===_0x4db909(0x1cf))return![];if(!this[_0x4db909(0x128)]&&this['subject']()[_0x4db909(0x26d)]())return![];if(this[_0x4db909(0xaa6)]())return!![];if(!this[_0x4db909(0xb39)]())return![];return typeof this[_0x4db909(0xb39)]()[_0x4db909(0x172)]===_0x4db909(0x798);},VisuMZ['BattleCore'][_0xabeb6b(0x21e)]=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x719)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x719)]=function(){const _0x44bfa7=_0xabeb6b;if(this['_targetBattlerKey']===_0x44bfa7(0x265))return![];if(this['_targetBattlerKey']===_0x44bfa7(0x1cf))return!![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x44bfa7(0xb24)]():VisuMZ[_0x44bfa7(0x553)][_0x44bfa7(0x21e)][_0x44bfa7(0x378)](this);},Game_Action[_0xabeb6b(0xc8)]['isForOpponentBattleCore']=function(){const _0x6403b5=_0xabeb6b,_0x58c700=String(this[_0x6403b5(0xb39)]()[_0x6403b5(0x172)]);if(_0x58c700[_0x6403b5(0xef)](/ANY/i))return!![];return _0x58c700[_0x6403b5(0xef)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x5e5)]=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x683)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x683)]=function(){const _0xbbd45a=_0xabeb6b;if(this[_0xbbd45a(0xa7c)]===_0xbbd45a(0x265))return!![];if(this[_0xbbd45a(0xa7c)]===_0xbbd45a(0x1cf))return![];return this[_0xbbd45a(0x628)]()&&!this['isCustomBattleScope']()?this['isForFriendBattleCore']():VisuMZ[_0xbbd45a(0x553)][_0xbbd45a(0x5e5)][_0xbbd45a(0x378)](this);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x44d)]=function(){const _0x120aa8=_0xabeb6b,_0x2c9960=String(this['item']()[_0x120aa8(0x172)]);return _0x2c9960[_0x120aa8(0xef)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x974)]=function(){const _0x5d1c60=_0xabeb6b;if(this[_0x5d1c60(0x628)]()&&!this[_0x5d1c60(0xaa6)]()){const _0x35cf47=String(this['item']()[_0x5d1c60(0x172)]);return _0x35cf47[_0x5d1c60(0xef)](/(?:ENEMY|FOE)/i)&&_0x35cf47[_0x5d1c60(0xef)](/OR/i)&&_0x35cf47['match'](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x3d2)]=function(){const _0x436de3=_0xabeb6b;if(this['isForAnyone']()){const _0x360df1=String(this[_0x436de3(0xb39)]()[_0x436de3(0x172)]);if(_0x360df1[_0x436de3(0xef)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0xabeb6b(0xc8)]['isForAnyoneFocusOpponents']=function(){const _0x4ffa75=_0xabeb6b;if(this[_0x4ffa75(0x974)]()){const _0x456f52=String(this[_0x4ffa75(0xb39)]()[_0x4ffa75(0x172)]);if(_0x456f52[_0x4ffa75(0xef)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x187)]=Game_Action['prototype']['isForAliveFriend'],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x5b0)]=function(){const _0x11b7b8=_0xabeb6b;if(this[_0x11b7b8(0xa7c)]===_0x11b7b8(0x265))return!![];return this['isBattleCoreTargetScope']()&&!this[_0x11b7b8(0xaa6)]()?this[_0x11b7b8(0xb62)]():VisuMZ[_0x11b7b8(0x553)]['Game_Action_isForAliveFriend'][_0x11b7b8(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x9ca)]=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x27d)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x27d)]=function(){const _0x21664d=_0xabeb6b;if(this['_targetBattlerKey']==='all\x20actors')return VisuMZ[_0x21664d(0x553)][_0x21664d(0x9ca)][_0x21664d(0x378)](this);return VisuMZ['BattleCore'][_0x21664d(0x9ca)]['call'](this);},Game_Action[_0xabeb6b(0xc8)]['isForAliveFriendBattleCore']=function(){const _0x20e265=_0xabeb6b;if(this[_0x20e265(0x974)]())return!![];return![];},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x647)]=function(){const _0x562de9=_0xabeb6b;return this[_0x562de9(0xb39)]()&&this['item']()['note'][_0x562de9(0xef)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x9d7)]=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x2ba)],Game_Action['prototype'][_0xabeb6b(0x2ba)]=function(){const _0x3826c2=_0xabeb6b;if(this[_0x3826c2(0xa7c)]===_0x3826c2(0x265))return![];if(this[_0x3826c2(0xa7c)]===_0x3826c2(0x1cf))return![];return this['isBattleCoreTargetScope']()&&!this[_0x3826c2(0xaa6)]()?this[_0x3826c2(0x1c6)]():VisuMZ[_0x3826c2(0x553)]['Game_Action_isForOne'][_0x3826c2(0x378)](this);},Game_Action['prototype'][_0xabeb6b(0x1c6)]=function(){const _0x35e605=_0xabeb6b;if(this[_0x35e605(0x974)]())return!![];return![];},VisuMZ[_0xabeb6b(0x553)]['Game_Action_isForRandom']=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x8f7)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x8f7)]=function(){const _0x51992a=_0xabeb6b;if(this[_0x51992a(0xa7c)]===_0x51992a(0x265))return![];if(this[_0x51992a(0xa7c)]===_0x51992a(0x1cf))return![];return this[_0x51992a(0x628)]()&&!this[_0x51992a(0xaa6)]()?this[_0x51992a(0x743)]():VisuMZ[_0x51992a(0x553)][_0x51992a(0x62c)]['call'](this);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x743)]=function(){const _0x534311=_0xabeb6b,_0x53c9bf=String(this[_0x534311(0xb39)]()['scope']);return _0x53c9bf[_0x534311(0xef)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0xabeb6b(0xa0d)]=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x4af)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x4af)]=function(){const _0x51e36e=_0xabeb6b;if(this[_0x51e36e(0xa7c)]==='all\x20actors')return!![];if(this[_0x51e36e(0xa7c)]==='all\x20enemies')return!![];return VisuMZ[_0x51e36e(0x553)]['Game_Action_isForAll'][_0x51e36e(0x378)](this);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xa91)]=function(){const _0x5b71f8=_0xabeb6b;if(!this[_0x5b71f8(0xb39)]())return![];if(this[_0x5b71f8(0x27d)]())return![];return(this[_0x5b71f8(0xb39)]()['note']||'')[_0x5b71f8(0xef)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ['BattleCore']['Game_Action_testApply']=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x739)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x739)]=function(_0xc5b80c){const _0x50a331=_0xabeb6b;if(this[_0x50a331(0x647)]()&&_0xc5b80c===this['subject']())return![];return VisuMZ['BattleCore']['Game_Action_testApply'][_0x50a331(0x378)](this,_0xc5b80c);},VisuMZ['BattleCore'][_0xabeb6b(0xe5)]=Game_Action[_0xabeb6b(0xc8)]['itemTargetCandidates'],Game_Action['prototype'][_0xabeb6b(0x9ad)]=function(){const _0x152815=_0xabeb6b,_0x2ae704=VisuMZ[_0x152815(0x553)][_0x152815(0xe5)][_0x152815(0x378)](this);if(this[_0x152815(0x647)]())_0x2ae704['remove'](this[_0x152815(0x316)]());return _0x2ae704;},VisuMZ[_0xabeb6b(0x553)]['Game_Action_needsSelection']=Game_Action[_0xabeb6b(0xc8)]['needsSelection'],Game_Action['prototype'][_0xabeb6b(0x4bf)]=function(){const _0xa1fe18=_0xabeb6b;return this[_0xa1fe18(0x628)]()&&!this[_0xa1fe18(0xaa6)]()?this['needsSelectionBattleCore']():VisuMZ[_0xa1fe18(0x553)][_0xa1fe18(0x2cf)][_0xa1fe18(0x378)](this);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x2b4)]=function(){const _0x2d883b=_0xabeb6b,_0x50f698=String(this['item']()[_0x2d883b(0x172)]);if(_0x50f698[_0x2d883b(0xef)](/RANDOM/i))return![];if(_0x50f698['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x50f698[_0x2d883b(0xef)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x50f698[_0x2d883b(0xef)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x50f698[_0x2d883b(0xef)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x2d883b(0x553)][_0x2d883b(0x2cf)]['call'](this);},VisuMZ[_0xabeb6b(0x553)]['Game_Action_makeTargets']=Game_Action['prototype'][_0xabeb6b(0x690)],Game_Action[_0xabeb6b(0xc8)]['makeTargets']=function(){const _0x22b4a6=_0xabeb6b;let _0x372bd6=[];return this[_0x22b4a6(0x628)]()?this['isCustomBattleScope']()?_0x372bd6=this[_0x22b4a6(0xa62)]():_0x372bd6=this[_0x22b4a6(0x5b5)]():_0x372bd6=VisuMZ[_0x22b4a6(0x553)][_0x22b4a6(0x90f)]['call'](this),_0x372bd6=this[_0x22b4a6(0xb6b)](_0x372bd6),_0x372bd6;},Game_Action['prototype'][_0xabeb6b(0x76f)]=function(){const _0x3d9f0a=_0xabeb6b;return this[_0x3d9f0a(0x316)]()[_0x3d9f0a(0xb6a)]()&&!this[_0x3d9f0a(0x316)]()[_0x3d9f0a(0xbbc)]();},Game_Action[_0xabeb6b(0xc8)]['makeTargetsBattleCoreJS']=function(){const _0x1a8397=_0xabeb6b,_0x579d3a=VisuMZ[_0x1a8397(0x553)][_0x1a8397(0x613)](this['item'](),_0x1a8397(0x78b));if(VisuMZ['BattleCore']['JS'][_0x579d3a]){targets=VisuMZ[_0x1a8397(0x553)][_0x1a8397(0x90f)]['call'](this);const _0x534f76=VisuMZ['BattleCore'][_0x1a8397(0x613)](this[_0x1a8397(0xb39)](),_0x1a8397(0x78b));return targets=VisuMZ[_0x1a8397(0x553)]['JS'][_0x534f76][_0x1a8397(0x378)](this,this[_0x1a8397(0x316)](),targets),this['repeatTargets'](targets);}return this[_0x1a8397(0x5b5)]();},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x5b5)]=function(){const _0x5a2e30=_0xabeb6b;let _0x427488=[];const _0x34190f=String(this['item']()[_0x5a2e30(0x172)]);if(this[_0x5a2e30(0x395)]())return this[_0x5a2e30(0x76f)]()?(_0x427488=this[_0x5a2e30(0xa4c)](),this[_0x5a2e30(0x291)](_0x427488)):(this['_targetIndex']=-0x1,_0x427488[_0x5a2e30(0x5cb)](...this[_0x5a2e30(0xaab)]()),this['repeatTargets'](_0x427488));if(this[_0x5a2e30(0x3d2)]()){if(this[_0x5a2e30(0x76f)]())return _0x427488=this[_0x5a2e30(0xa4c)](),this[_0x5a2e30(0x291)](_0x427488);else{if(Imported['VisuMZ_3_BattleAI']){if(VisuMZ[_0x5a2e30(0xb9f)][_0x5a2e30(0x729)]<1.19){let _0x2e574d='';_0x2e574d+=_0x5a2e30(0xa65),_0x2e574d+=_0x5a2e30(0x58d),_0x2e574d+=_0x5a2e30(0x221),alert(_0x2e574d),SceneManager['exit']();}}return this['_targetIndex']=-0x1,_0x427488[_0x5a2e30(0x5cb)](...this[_0x5a2e30(0x441)]()),this[_0x5a2e30(0x291)](_0x427488);}}if(_0x34190f[_0x5a2e30(0xef)](/(\d+) RANDOM ANY/i)){let _0x4f55bb=Number(RegExp['$1']);while(_0x4f55bb--){const _0x5f517a=Math['randomInt'](0x2)===0x0?this['opponentsUnit']():this[_0x5a2e30(0xa4a)]();_0x427488[_0x5a2e30(0x5cb)](_0x5f517a['trueRandomTarget']());}return this[_0x5a2e30(0x291)](_0x427488);}if(_0x34190f[_0x5a2e30(0xef)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x267a7d=Number(RegExp['$1']);while(_0x267a7d--){_0x427488[_0x5a2e30(0x5cb)](this[_0x5a2e30(0xb00)]()[_0x5a2e30(0xad4)]());}return this[_0x5a2e30(0x291)](_0x427488);}if(_0x34190f[_0x5a2e30(0xef)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x37636d=Number(RegExp['$1']);while(_0x37636d--){_0x427488['push'](this['friendsUnit']()[_0x5a2e30(0xad4)]());}return this[_0x5a2e30(0x291)](_0x427488);}if(_0x34190f['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x427488[_0x5a2e30(0x5cb)](...this[_0x5a2e30(0xa4a)]()[_0x5a2e30(0x120)]()[_0x5a2e30(0x959)](_0x42f692=>_0x42f692!==this[_0x5a2e30(0x316)]())),this[_0x5a2e30(0x291)](_0x427488);return VisuMZ[_0x5a2e30(0x553)][_0x5a2e30(0x90f)][_0x5a2e30(0x378)](this);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x8c8)]=function(_0x410274){const _0x17a9a3=_0xabeb6b,_0x5ddd5b=[];for(let _0x2beb29=0x0;_0x2beb29<this[_0x17a9a3(0x652)]();_0x2beb29++){_0x5ddd5b[_0x17a9a3(0x5cb)](_0x410274[_0x17a9a3(0xad4)]());}return _0x5ddd5b;},Game_Action['prototype'][_0xabeb6b(0xb6b)]=function(_0x5c22f9){const _0x38f586=_0xabeb6b;if(!this[_0x38f586(0xb39)]())return _0x5c22f9;const _0x22584=this['item']()['note'];if(this['isForNotUser']()){this[_0x38f586(0x4af)]()&&_0x5c22f9[_0x38f586(0x858)](this[_0x38f586(0x316)]());if(_0x5c22f9['includes'](this[_0x38f586(0x316)]())){const _0x56a519=this['friendsUnit']()['aliveMembers']()[_0x38f586(0x858)](this[_0x38f586(0x316)]());if(_0x56a519[_0x38f586(0x93a)]>0x0){_0x56a519['sort']((_0x106fed,_0x136c0b)=>_0x106fed['hpRate']()-_0x136c0b[_0x38f586(0xa8d)]());while(_0x5c22f9[_0x38f586(0x5d8)](this[_0x38f586(0x316)]())){const _0x207bb5=_0x5c22f9[_0x38f586(0x996)](this[_0x38f586(0x316)]());_0x5c22f9[_0x207bb5]=_0x56a519[Math['randomInt'](_0x56a519[_0x38f586(0x93a)])];}}else _0x5c22f9[_0x38f586(0x858)](this['subject']());}}return _0x5c22f9;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x5e7)]=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x51b)],Game_Action['prototype'][_0xabeb6b(0x51b)]=function(_0x5ce33b,_0xfef5ea){const _0x5469ed=_0xabeb6b;VisuMZ[_0x5469ed(0x553)]['Game_Action_itemEffectAddAttackState'][_0x5469ed(0x378)](this,_0x5ce33b,_0xfef5ea);if(!_0x5ce33b[_0x5469ed(0x3bd)]())return;for(const _0x2cfe5a of this['subject']()['attackStates']()){if(_0x2cfe5a===_0x5ce33b[_0x5469ed(0x50f)]()){let _0x47fdb9=_0xfef5ea[_0x5469ed(0x50c)];_0x47fdb9*=_0x5ce33b[_0x5469ed(0x865)](_0x2cfe5a),_0x47fdb9*=this['subject']()[_0x5469ed(0x551)](_0x2cfe5a),_0x47fdb9*=this[_0x5469ed(0x60b)](_0x5ce33b),Math['random']()<_0x47fdb9&&(_0x5ce33b[_0x5469ed(0x3f6)]=!![],this['makeSuccess'](_0x5ce33b));}}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x835)]=Game_Action['prototype'][_0xabeb6b(0x9a1)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x9a1)]=function(_0xc86201,_0x102516){const _0x5395cb=_0xabeb6b;VisuMZ[_0x5395cb(0x553)][_0x5395cb(0x835)][_0x5395cb(0x378)](this,_0xc86201,_0x102516);if(!_0xc86201['isImmortal']())return;if(_0x102516['dataId']!==_0xc86201[_0x5395cb(0x50f)]())return;let _0x274408=_0x102516['value1'];!this[_0x5395cb(0x19c)]()&&(_0x274408*=_0xc86201[_0x5395cb(0x865)](_0x102516[_0x5395cb(0x205)]),_0x274408*=this[_0x5395cb(0x60b)](_0xc86201)),Math['random']()<_0x274408&&(_0xc86201[_0x5395cb(0x3f6)]=!![],this[_0x5395cb(0x2f3)](_0xc86201));},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x31a)]=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xb9)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xb9)]=function(){const _0x382e80=_0xabeb6b;VisuMZ[_0x382e80(0x553)][_0x382e80(0x31a)][_0x382e80(0x378)](this),this[_0x382e80(0x8c4)](),this['resetResultSwitches']();},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x8c4)]=function(){const _0x3c6e2b=_0xabeb6b;if(!SceneManager[_0x3c6e2b(0x87a)]())return;const _0x5302c7=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x1da38b=this[_0x3c6e2b(0xb39)]()[_0x3c6e2b(0x6f8)][_0x3c6e2b(0xef)](_0x5302c7);if(_0x1da38b)for(const _0x2dfbd3 of _0x1da38b){if(!_0x2dfbd3)continue;_0x2dfbd3[_0x3c6e2b(0xef)](_0x5302c7);const _0x5902bc=String(RegExp['$1'])[_0x3c6e2b(0x8e9)](',')[_0x3c6e2b(0x614)](_0x46a9b6=>String(_0x46a9b6)[_0x3c6e2b(0xd3)]()),_0x439b41=_0x5902bc[_0x3c6e2b(0x614)](_0xb9ca26=>DataManager[_0x3c6e2b(0xeb)](_0xb9ca26));for(const _0x369154 of _0x439b41){const _0x5bd151=$dataCommonEvents[_0x369154];_0x5bd151&&$gameTemp[_0x3c6e2b(0x5f1)](_0x369154);}}},DataManager['getCommonEventIdWithName']=function(_0x11bd02){const _0x2986a1=_0xabeb6b;_0x11bd02=_0x11bd02['toUpperCase']()['trim'](),this['_commonEventIDs']=this[_0x2986a1(0x25a)]||{};if(this[_0x2986a1(0x25a)][_0x11bd02])return this[_0x2986a1(0x25a)][_0x11bd02];for(const _0x1edca0 of $dataCommonEvents){if(!_0x1edca0)continue;let _0x188b66=_0x1edca0[_0x2986a1(0x6e8)];_0x188b66=_0x188b66[_0x2986a1(0x5ec)](/\x1I\[(\d+)\]/gi,''),_0x188b66=_0x188b66['replace'](/\\I\[(\d+)\]/gi,''),this[_0x2986a1(0x25a)][_0x188b66[_0x2986a1(0xf8)]()['trim']()]=_0x1edca0['id'];}return this['_commonEventIDs'][_0x11bd02]||0x0;},Game_Action['prototype'][_0xabeb6b(0x2f1)]=function(){const _0x6c4e81=_0xabeb6b;if(!SceneManager[_0x6c4e81(0x87a)]())return;const _0x526b9e=VisuMZ[_0x6c4e81(0x553)][_0x6c4e81(0x78f)][_0x6c4e81(0xf3)];_0x526b9e[_0x6c4e81(0x1aa)]&&$gameSwitches[_0x6c4e81(0x4fd)](_0x526b9e['SwitchCritical'],![]),_0x526b9e['SwitchMissEvade']&&$gameSwitches['setValue'](_0x526b9e['SwitchMissEvade'],![]),_0x526b9e[_0x6c4e81(0x65c)]&&$gameVariables['setValue'](_0x526b9e['VariableDmg'],0x0),_0x526b9e[_0x6c4e81(0x376)]&&$gameVariables[_0x6c4e81(0x4fd)](_0x526b9e['VariableHeal'],0x0);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x62d)]=function(_0x531d13){const _0x4ac3ba=_0xabeb6b;if(!SceneManager[_0x4ac3ba(0x87a)]())return;if(!_0x531d13)return;const _0x4cb341=_0x531d13['result'](),_0x5df27b=VisuMZ[_0x4ac3ba(0x553)][_0x4ac3ba(0x78f)][_0x4ac3ba(0xf3)];_0x5df27b[_0x4ac3ba(0x1aa)]&&_0x4cb341[_0x4ac3ba(0x68c)]&&$gameSwitches['setValue'](_0x5df27b[_0x4ac3ba(0x1aa)],!![]);_0x5df27b[_0x4ac3ba(0xa22)]&&(_0x4cb341[_0x4ac3ba(0x8e8)]||_0x4cb341[_0x4ac3ba(0x301)])&&$gameSwitches[_0x4ac3ba(0x4fd)](_0x5df27b[_0x4ac3ba(0xa22)],!![]);if(_0x5df27b[_0x4ac3ba(0x65c)]){let _0x48aead=$gameVariables[_0x4ac3ba(0x2d9)](_0x5df27b[_0x4ac3ba(0x65c)]);_0x4cb341['hpDamage']>0x0&&(_0x48aead+=Math[_0x4ac3ba(0x7e9)](_0x4cb341[_0x4ac3ba(0x88b)])),$gameVariables['setValue'](_0x5df27b['VariableDmg'],_0x48aead);}if(_0x5df27b['VariableHeal']){let _0x4afa51=$gameVariables[_0x4ac3ba(0x2d9)](_0x5df27b[_0x4ac3ba(0x376)]);_0x4cb341[_0x4ac3ba(0x88b)]<0x0&&(_0x4afa51+=Math['abs'](_0x4cb341[_0x4ac3ba(0x88b)])),$gameVariables[_0x4ac3ba(0x4fd)](_0x5df27b[_0x4ac3ba(0x376)],_0x4afa51);}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xa61)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x635)]=Game_Action['prototype'][_0xabeb6b(0xa00)],Game_Action[_0xabeb6b(0xc8)]['executeHpDamage']=function(_0x306f94,_0x3fbc9c){const _0x5163ce=_0xabeb6b;VisuMZ[_0x5163ce(0x553)][_0x5163ce(0x635)]['call'](this,_0x306f94,_0x3fbc9c);!this[_0x5163ce(0x92b)]()&&_0x306f94&&_0x306f94[_0x5163ce(0x96a)]()[_0x5163ce(0x88b)]>0x0&&this[_0x5163ce(0x1b2)]('HP',_0x306f94,_0x306f94[_0x5163ce(0x96a)]()['hpDamage']);if(_0x306f94){this[_0x5163ce(0x132)]=this[_0x5163ce(0x132)]||{};const _0x2e1e39=_0x306f94[_0x5163ce(0x5ce)]();this[_0x5163ce(0x132)][_0x2e1e39]=_0x3fbc9c;}},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x612)]=function(_0x2fe1a6){const _0x252fd2=_0xabeb6b;this[_0x252fd2(0x132)]=this[_0x252fd2(0x132)]||{};const _0x45723b=_0x2fe1a6[_0x252fd2(0x5ce)]();return this[_0x252fd2(0x132)][_0x45723b]||0x0;},VisuMZ['BattleCore'][_0xabeb6b(0x159)]=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x375)],Game_Action[_0xabeb6b(0xc8)]['executeMpDamage']=function(_0x30c319,_0x2fb8c4){const _0x4f3b0f=_0xabeb6b;VisuMZ[_0x4f3b0f(0x553)][_0x4f3b0f(0x159)][_0x4f3b0f(0x378)](this,_0x30c319,_0x2fb8c4),!this[_0x4f3b0f(0x92b)]()&&_0x30c319&&_0x30c319[_0x4f3b0f(0x96a)]()[_0x4f3b0f(0x24e)]>0x0&&this[_0x4f3b0f(0x1b2)]('MP',_0x30c319,_0x30c319[_0x4f3b0f(0x96a)]()[_0x4f3b0f(0x24e)]);},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x1b2)]=function(_0x168024,_0x58461d,_0x48bf5a){const _0x2f757d=_0xabeb6b;_0x168024=_0x168024[_0x2f757d(0xf8)]()[_0x2f757d(0xd3)]();const _0x5bd013=this[_0x2f757d(0x9df)](_0x168024,_0x58461d);if(_0x5bd013<=0x0)return;const _0x5128ce=Math[_0x2f757d(0xb36)](_0x48bf5a*_0x5bd013);if(_0x5128ce<=0x0)return;let _0x2ca9e7=this[_0x2f757d(0x316)]();if(this[_0x2f757d(0x1a8)])_0x2ca9e7=this[_0x2f757d(0x1a8)];const _0x45e666=_0x58461d[_0x2f757d(0x34d)](_0x168024)?-0x1:0x1;if(_0x168024==='HP')_0x2ca9e7[_0x2f757d(0xf6)](_0x45e666*_0x5128ce);if(_0x168024==='MP')_0x2ca9e7[_0x2f757d(0x20f)](_0x45e666*_0x5128ce);},Game_Action[_0xabeb6b(0xc8)]['lifeStealRate']=function(_0x379828,_0x444ce1){const _0x2ea93d=_0xabeb6b;if(this[_0x2ea93d(0x393)](_0x379828))return 0x0;if(this[_0x2ea93d(0x316)]()[_0x2ea93d(0x684)](_0x379828))return 0x0;if(_0x444ce1['isGuardLifeSteal'](_0x379828))return 0x0;let _0x131bd1=0x0;return _0x131bd1+=this[_0x2ea93d(0x902)](_0x379828),_0x131bd1+=this[_0x2ea93d(0x316)]()['lifeStealRate'](_0x379828,this['item']()[_0x2ea93d(0x22f)]),_0x131bd1[_0x2ea93d(0x86d)](0x0,0x1);},Game_Action[_0xabeb6b(0xc8)]['isCancelLifeSteal']=function(_0x27efbe){const _0x44a028=_0xabeb6b;_0x27efbe=_0x27efbe[_0x44a028(0xf8)]()[_0x44a028(0xd3)]();const _0x547f96=VisuMZ[_0x44a028(0x553)]['LifeStealRegExp'],_0x2e97ab=this[_0x44a028(0xb39)]()[_0x44a028(0x6f8)]||'';if(_0x2e97ab[_0x44a028(0xef)](_0x547f96[_0x44a028(0x4f9)]))return!![];if(_0x27efbe==='HP'&&_0x2e97ab[_0x44a028(0xef)](_0x547f96[_0x44a028(0xb2a)]))return!![];if(_0x27efbe==='MP'&&_0x2e97ab[_0x44a028(0xef)](_0x547f96[_0x44a028(0x771)]))return!![];return![];},Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x902)]=function(_0xfdfd43){const _0x39c48d=_0xabeb6b,_0x545a42=VisuMZ['BattleCore'][_0x39c48d(0xa61)],_0x5861d7=this[_0x39c48d(0xb39)]()[_0x39c48d(0x6f8)]||'';_0xfdfd43=_0xfdfd43['toUpperCase']()[_0x39c48d(0xd3)]();const _0x3dd2a4=_0x5861d7[_0x39c48d(0xef)](_0x545a42['lifeSteaItem']);if(_0x3dd2a4)for(const _0x49b0ba of _0x3dd2a4){_0x49b0ba['match'](_0x545a42['lifeSteaItem']);const _0x465fbe=String(RegExp['$1'])[_0x39c48d(0xf8)]()['trim'](),_0x58cbb4=Number(RegExp['$2'])*0.01;if(_0x465fbe!==_0xfdfd43)continue;return _0x58cbb4;}return 0x0;},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x9df)]=function(_0x28cc0b,_0x5b8d2e){const _0x145dfd=_0xabeb6b,_0x4d8eb7=VisuMZ[_0x145dfd(0x553)][_0x145dfd(0xa61)];let _0x3bf915=0x0;_0x28cc0b=_0x28cc0b['toUpperCase']()[_0x145dfd(0xd3)]();for(const _0x2657d4 of this['traitObjects']()){if(!_0x2657d4)continue;const _0x5da07d=_0x2657d4[_0x145dfd(0x6f8)]||'',_0x5a29ef=_0x5da07d[_0x145dfd(0xef)](_0x4d8eb7[_0x145dfd(0xb99)]);if(_0x5a29ef)for(const _0x17f916 of _0x5a29ef){_0x17f916['match'](_0x4d8eb7[_0x145dfd(0xb99)]);const _0x4be909=String(RegExp['$1'])[_0x145dfd(0xf8)]()[_0x145dfd(0xd3)](),_0x502613=String(RegExp['$2']),_0x3a1f1a=Number(RegExp['$3'])*0.01;if(_0x4be909!==_0x28cc0b)continue;if(_0x5b8d2e===Game_Action[_0x145dfd(0x2ec)]&&_0x502613['match'](/CERTAIN/i))_0x3bf915+=_0x3a1f1a;else{if(_0x5b8d2e===Game_Action[_0x145dfd(0x35e)]&&_0x502613[_0x145dfd(0xef)](/PHYS/i))_0x3bf915+=_0x3a1f1a;else _0x5b8d2e===Game_Action['HITTYPE_MAGICAL']&&_0x502613[_0x145dfd(0xef)](/MAGIC/i)&&(_0x3bf915+=_0x3a1f1a);}}}return _0x3bf915;},Game_BattlerBase['prototype'][_0xabeb6b(0x684)]=function(_0x12a1e8){const _0x37f0d1=_0xabeb6b;_0x12a1e8=_0x12a1e8[_0x37f0d1(0xf8)]()['trim']();const _0x3d35a5=VisuMZ['BattleCore'][_0x37f0d1(0xa61)];for(const _0x413778 of this[_0x37f0d1(0xa17)]()){if(!_0x413778)continue;const _0x2f35d6=_0x413778[_0x37f0d1(0x6f8)]||'';if(_0x2f35d6['match'](_0x3d35a5[_0x37f0d1(0x7a2)]))return!![];if(_0x12a1e8==='HP'&&_0x2f35d6[_0x37f0d1(0xef)](_0x3d35a5['disarmHpLifeSteal']))return!![];if(_0x12a1e8==='MP'&&_0x2f35d6[_0x37f0d1(0xef)](_0x3d35a5[_0x37f0d1(0x33b)]))return!![];}return![];},Game_BattlerBase['prototype']['isNegativeLifeSteal']=function(_0x378671){const _0x1f84a6=_0xabeb6b;_0x378671=_0x378671[_0x1f84a6(0xf8)]()[_0x1f84a6(0xd3)]();const _0x96291d=VisuMZ[_0x1f84a6(0x553)][_0x1f84a6(0xa61)];for(const _0x40ebb0 of this['traitObjects']()){if(!_0x40ebb0)continue;const _0x448df0=_0x40ebb0[_0x1f84a6(0x6f8)]||'';if(_0x448df0['match'](_0x96291d[_0x1f84a6(0x5fe)]))return!![];if(_0x378671==='HP'&&_0x448df0['match'](_0x96291d[_0x1f84a6(0x351)]))return!![];if(_0x378671==='MP'&&_0x448df0[_0x1f84a6(0xef)](_0x96291d[_0x1f84a6(0x8ab)]))return!![];}return![];},Game_BattlerBase['prototype'][_0xabeb6b(0x6b2)]=function(_0xbc198){const _0x161fa7=_0xabeb6b;_0xbc198=_0xbc198['toUpperCase']()['trim']();const _0x14c1db=VisuMZ[_0x161fa7(0x553)][_0x161fa7(0xa61)];for(const _0x44e7e4 of this[_0x161fa7(0xa17)]()){if(!_0x44e7e4)continue;const _0x45b21b=_0x44e7e4[_0x161fa7(0x6f8)]||'';if(_0x45b21b['match'](_0x14c1db[_0x161fa7(0xa5d)]))return!![];if(_0xbc198==='HP'&&_0x45b21b[_0x161fa7(0xef)](_0x14c1db['guardHpLifeSteal']))return!![];if(_0xbc198==='MP'&&_0x45b21b[_0x161fa7(0xef)](_0x14c1db[_0x161fa7(0x34c)]))return!![];}return![];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x669)]=Game_BattlerBase[_0xabeb6b(0xc8)]['initMembers'],Game_BattlerBase[_0xabeb6b(0xc8)]['initMembers']=function(){const _0x453841=_0xabeb6b;VisuMZ[_0x453841(0x553)]['Game_BattlerBase_initMembers'][_0x453841(0x378)](this),this[_0x453841(0x271)]();},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x271)]=function(){this['_immortal']=![];},VisuMZ['BattleCore']['Game_BattlerBase_refresh']=Game_BattlerBase['prototype'][_0xabeb6b(0x9f5)],Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x9f5)]=function(){const _0x3314cc=_0xabeb6b;this[_0x3314cc(0x10d)]={},VisuMZ[_0x3314cc(0x553)][_0x3314cc(0x1ac)]['call'](this);},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x332)]=function(_0x5a363b){const _0x432129=_0xabeb6b;return this['_cache']=this[_0x432129(0x10d)]||{},this[_0x432129(0x10d)][_0x5a363b]!==undefined;},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x517)]=function(){const _0x3028ff=_0xabeb6b;if(this['_cache'][_0x3028ff(0x517)]!==undefined)return this['_cache']['hardDamageCap'];const _0x2bd568=/<DAMAGE CAP:[ ](\d+)>/i,_0x5a5e4e=this[_0x3028ff(0xa17)]()['map'](_0x7211c4=>_0x7211c4&&_0x7211c4['note']['match'](_0x2bd568)?Number(RegExp['$1']):0x0);let _0x5cdfab=_0x5a5e4e['length']>0x0?Math[_0x3028ff(0xb72)](..._0x5a5e4e):0x0;if(_0x5cdfab<=0x0)_0x5cdfab=VisuMZ[_0x3028ff(0x553)][_0x3028ff(0x78f)][_0x3028ff(0x11a)][_0x3028ff(0x1de)];return this[_0x3028ff(0x10d)]['hardDamageCap']=_0x5cdfab,this[_0x3028ff(0x10d)][_0x3028ff(0x517)];},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0xb51)]=function(){const _0x1e5c9f=_0xabeb6b;if(this[_0x1e5c9f(0x10d)][_0x1e5c9f(0x14b)]!==undefined)return this[_0x1e5c9f(0x10d)][_0x1e5c9f(0x14b)];let _0x18e66c=VisuMZ[_0x1e5c9f(0x553)][_0x1e5c9f(0x78f)]['Damage']['DefaultSoftCap'];const _0x3958bc=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x23fb53=this[_0x1e5c9f(0xa17)]()[_0x1e5c9f(0x614)](_0x1c706d=>_0x1c706d&&_0x1c706d[_0x1e5c9f(0x6f8)][_0x1e5c9f(0xef)](_0x3958bc)?Number(RegExp['$1'])/0x64:0x0);return _0x18e66c=_0x23fb53[_0x1e5c9f(0x1f7)]((_0x211cde,_0x44a780)=>_0x211cde+_0x44a780,_0x18e66c),this[_0x1e5c9f(0x10d)]['softDamageCap']=_0x18e66c,this['_cache'][_0x1e5c9f(0x14b)]['clamp'](0.01,0x1);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x930)]=Game_BattlerBase['prototype'][_0xabeb6b(0xadf)],Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0xadf)]=function(){const _0x2686d7=_0xabeb6b;VisuMZ[_0x2686d7(0x553)][_0x2686d7(0x930)]['call'](this),SceneManager[_0x2686d7(0x87a)]()&&(this['requestMotion'](_0x2686d7(0x8f2)),this['_performDamageMotion']=undefined);},Game_BattlerBase['prototype'][_0xabeb6b(0x7bb)]=function(){const _0x18c739=_0xabeb6b;if(!SceneManager[_0x18c739(0x87a)]())return null;if(!SceneManager[_0x18c739(0x483)][_0x18c739(0x754)])return null;return SceneManager[_0x18c739(0x483)]['_spriteset'][_0x18c739(0x382)](this);},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x3f4)]=function(){const _0x3ec070=_0xabeb6b;return VisuMZ['BattleCore'][_0x3ec070(0x78f)]['Actor']['AnchorX'];},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x8b9)]=function(){const _0x39917c=_0xabeb6b;return VisuMZ[_0x39917c(0x553)]['Settings']['Actor'][_0x39917c(0x5e2)];},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x879)]=function(){const _0x5a5b9e=_0xabeb6b;return this[_0x5a5b9e(0xb6a)]&&this[_0x5a5b9e(0xb6a)]()?VisuMZ[_0x5a5b9e(0x553)][_0x5a5b9e(0x78f)][_0x5a5b9e(0x2b0)][_0x5a5b9e(0x96b)]:VisuMZ[_0x5a5b9e(0x553)][_0x5a5b9e(0x78f)][_0x5a5b9e(0xa08)][_0x5a5b9e(0x96b)];},Game_BattlerBase[_0xabeb6b(0xc8)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0xabeb6b(0xc8)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase['prototype'][_0xabeb6b(0x4f3)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0xabeb6b(0x6a2)]=function(_0x2801bf){const _0x408535=_0xabeb6b;if(!_0x2801bf)return 0x0;let _0x53f364=0x0;const _0x48e72f=_0x2801bf[_0x408535(0x6f8)];return _0x48e72f[_0x408535(0xef)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x53f364+=Number(RegExp['$1'])),_0x48e72f[_0x408535(0xef)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x53f364+=Number(RegExp['$1'])),_0x53f364;},Game_BattlerBase['prototype'][_0xabeb6b(0x4e8)]=function(_0x3086a9){const _0x4758d1=_0xabeb6b;if(!_0x3086a9)return 0x0;let _0x26502a=0x0;const _0x1576f6=_0x3086a9[_0x4758d1(0x6f8)];return _0x1576f6[_0x4758d1(0xef)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x26502a+=Number(RegExp['$1'])),_0x1576f6[_0x4758d1(0xef)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x26502a+=Number(RegExp['$2'])),_0x26502a;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x495)]=Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x5cd)],Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x5cd)]=function(_0x5d0e80){const _0x5a8ac4=_0xabeb6b;if(_0x5d0e80===this[_0x5a8ac4(0x50f)]()&&this[_0x5a8ac4(0x3bd)]())return!![];return VisuMZ['BattleCore']['Game_BattlerBase_isStateResist']['call'](this,_0x5d0e80);},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x3bd)]=function(){return this['_immortal'];},Game_BattlerBase['prototype']['setImmortal']=function(_0x4e3eb2){const _0x208ce3=_0xabeb6b;_0x4e3eb2?this[_0x208ce3(0x4da)]():this[_0x208ce3(0xe7)]();},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x4da)]=function(){const _0x35ce93=_0xabeb6b;if(this[_0x35ce93(0x69e)]())return;this[_0x35ce93(0x83a)]=!![],this[_0x35ce93(0x3f6)]=![];},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0xe7)]=function(){const _0x4738fb=_0xabeb6b,_0x283542=this[_0x4738fb(0x946)]();this['_immortal']=![],_0x283542&&this[_0x4738fb(0x3f6)]&&this['die'](),this['_deathStateApplied']=![],this[_0x4738fb(0x9f5)](),this['isDead']()&&_0x283542&&(this[_0x4738fb(0xbad)](),this['requestMotionRefresh']());},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x1e6)]=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xb3b)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xb3b)]=function(){const _0x5bdd49=_0xabeb6b;return this[_0x5bdd49(0xb39)]()?VisuMZ['BattleCore'][_0x5bdd49(0x1e6)][_0x5bdd49(0x378)](this):0x0;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x3f2)]=Game_Action['prototype'][_0xabeb6b(0x64b)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0x64b)]=function(){const _0x3ee567=_0xabeb6b;if(this[_0x3ee567(0x316)]()&&this[_0x3ee567(0x316)]()[_0x3ee567(0x29c)]())VisuMZ[_0x3ee567(0x553)][_0x3ee567(0x3f2)][_0x3ee567(0x378)](this);else BattleManager[_0x3ee567(0x9f2)]?VisuMZ['BattleCore']['Game_Action_setAttack'][_0x3ee567(0x378)](this):this[_0x3ee567(0x500)]();},VisuMZ[_0xabeb6b(0x553)]['Game_BattlerBase_canAttack']=Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x29c)],Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x29c)]=function(){const _0x135242=_0xabeb6b;if(!this[_0x135242(0x3ae)]())return![];return VisuMZ['BattleCore']['Game_BattlerBase_canAttack'][_0x135242(0x378)](this);},Game_BattlerBase['prototype'][_0xabeb6b(0x3ae)]=function(){const _0x2b4f73=_0xabeb6b;for(const _0x37045f of this[_0x2b4f73(0xa17)]()){if(!_0x37045f)continue;if(_0x37045f['note'][_0x2b4f73(0xef)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0xabeb6b(0x553)]['Game_Action_setGuard']=Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xa69)],Game_Action[_0xabeb6b(0xc8)][_0xabeb6b(0xa69)]=function(){const _0x1c8743=_0xabeb6b;this[_0x1c8743(0x316)]()['canGuard']()&&VisuMZ[_0x1c8743(0x553)][_0x1c8743(0x688)][_0x1c8743(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x490)]=Game_BattlerBase['prototype'][_0xabeb6b(0x47d)],Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x47d)]=function(){const _0x33bd05=_0xabeb6b;if(!this[_0x33bd05(0x8d4)]())return![];return VisuMZ['BattleCore'][_0x33bd05(0x490)]['call'](this);},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x8d4)]=function(){const _0x46ddad=_0xabeb6b;for(const _0x4b9cd5 of this[_0x46ddad(0xa17)]()){if(!_0x4b9cd5)continue;if(_0x4b9cd5[_0x46ddad(0x6f8)][_0x46ddad(0xef)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase['prototype']['canUseItemCommand']=function(){const _0xd1c1ea=_0xabeb6b;for(const _0x52128f of this['traitObjects']()){if(!_0x52128f)continue;if(_0x52128f[_0xd1c1ea(0x6f8)][_0xd1c1ea(0xef)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x53e)]=Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x87c)],Game_BattlerBase[_0xabeb6b(0xc8)]['meetsUsableItemConditions']=function(_0x53a2b2){const _0x245881=_0xabeb6b;if(_0x53a2b2&&_0x53a2b2[_0x245881(0x6f8)][_0x245881(0xef)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x5a239d=this[_0x245881(0xa4a)]()['aliveMembers']();if(_0x5a239d[_0x245881(0x93a)]===0x1&&_0x5a239d[0x0]===this)return![];}return VisuMZ[_0x245881(0x553)][_0x245881(0x53e)][_0x245881(0x378)](this,_0x53a2b2);},Game_Battler['prototype'][_0xabeb6b(0x7d6)]=function(){const _0x3cb43e=_0xabeb6b;return VisuMZ[_0x3cb43e(0x553)][_0x3cb43e(0x78f)][_0x3cb43e(0xf3)]['AllowRandomSpeed'];},VisuMZ['BattleCore']['Game_Battler_regenerateAll']=Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x598)],Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x598)]=function(){const _0x830283=_0xabeb6b;if(SceneManager['isSceneBattle']()){if(BattleManager[_0x830283(0x4a3)]()){if(this[_0x830283(0xb37)]()<=0x0)return;}else{if($gameTroop['turnCount']()<=0x0)return;}}if(SceneManager[_0x830283(0x87a)]()&&BattleManager[_0x830283(0x4a3)]()&&this[_0x830283(0x379)]===Graphics[_0x830283(0x791)])return;this[_0x830283(0x379)]=Graphics[_0x830283(0x791)],SceneManager[_0x830283(0x87a)]()&&this[_0x830283(0x806)](_0x830283(0x504)),VisuMZ[_0x830283(0x553)][_0x830283(0x5d7)][_0x830283(0x378)](this),SceneManager[_0x830283(0x87a)]()&&(this[_0x830283(0x207)](),this['processBattleCoreJS']('PostRegenerateJS'));},Game_Battler['prototype']['regenerateAllBattleCore']=function(){const _0x4e04ae=_0xabeb6b;if(SceneManager[_0x4e04ae(0x87a)]())for(const _0x37d575 of this[_0x4e04ae(0xa17)]()){if(!_0x37d575)continue;this[_0x4e04ae(0x459)](_0x37d575);}},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x459)]=function(_0x2d3037){const _0x5ccd06=_0xabeb6b;if(!Imported[_0x5ccd06(0x765)])return;if(!SceneManager[_0x5ccd06(0x87a)]())return;if(this['isDead']())return;if(this[_0x5ccd06(0xb6)]())return;if(_0x2d3037[_0x5ccd06(0x6f8)][_0x5ccd06(0xef)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x464eca=Number(RegExp['$1']);$gameTemp[_0x5ccd06(0x558)]([this],_0x464eca,![],![]);}},VisuMZ[_0xabeb6b(0x553)]['Game_Battler_startTpbTurn']=Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x99a)],Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x99a)]=function(){const _0x40fc2a=_0xabeb6b;this['processBattleCoreJS'](_0x40fc2a(0x116)),VisuMZ[_0x40fc2a(0x553)][_0x40fc2a(0x100)][_0x40fc2a(0x378)](this),this['processBattleCoreJS']('PostStartTurnJS');},VisuMZ['BattleCore']['Game_Battler_onTurnEnd']=Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x101)],Game_Battler['prototype']['onTurnEnd']=function(){const _0x1d22d2=_0xabeb6b;this[_0x1d22d2(0x806)](_0x1d22d2(0x6df)),VisuMZ[_0x1d22d2(0x553)][_0x1d22d2(0x330)][_0x1d22d2(0x378)](this),VisuMZ[_0x1d22d2(0x553)]['Settings'][_0x1d22d2(0xf3)][_0x1d22d2(0x66b)]&&this[_0x1d22d2(0x7ea)](),this[_0x1d22d2(0x806)](_0x1d22d2(0x6ca));},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x806)]=function(_0x1b167f){const _0x276d6c=_0xabeb6b;if(this['_tempBattler']||this[_0x276d6c(0xa84)])return;const _0x3c1f2d=VisuMZ[_0x276d6c(0x553)][_0x276d6c(0x78f)][_0x276d6c(0xf3)];if(_0x3c1f2d[_0x1b167f])_0x3c1f2d[_0x1b167f]['call'](this);for(const _0xe46a44 of this[_0x276d6c(0xa17)]()){if(!_0xe46a44)continue;key=VisuMZ['BattleCore'][_0x276d6c(0x613)](_0xe46a44,_0x1b167f),VisuMZ[_0x276d6c(0x553)]['JS'][key]&&VisuMZ[_0x276d6c(0x553)]['JS'][key]['call'](this,this,this,_0xe46a44,0x0);}},Game_Battler['prototype'][_0xabeb6b(0x668)]=function(){const _0x390fb4=_0xabeb6b;return VisuMZ['BattleCore'][_0x390fb4(0x78f)][_0x390fb4(0x2b0)][_0x390fb4(0x152)]||![];},Game_Battler[_0xabeb6b(0xc8)]['isChanting']=function(){const _0x183969=_0xabeb6b;if(this[_0x183969(0xa63)]()){if(this[_0x183969(0x668)]()){if(this[_0x183969(0x22e)]['some'](_0x3c3130=>_0x3c3130['item']()&&_0x3c3130[_0x183969(0xad5)]()))return!![];}else{if(this['_actions'][_0x183969(0x886)](_0x1f2cde=>_0x1f2cde[_0x183969(0xb39)]()&&_0x1f2cde['isMagicSkill']()))return!![];}}if(BattleManager[_0x183969(0x4a3)]()&&this['_tpbState']===_0x183969(0x22c))return this[_0x183969(0x668)]()?this[_0x183969(0x5ca)]()&&this[_0x183969(0x5ca)]()[_0x183969(0xb39)]()&&this[_0x183969(0x5ca)]()[_0x183969(0xad5)]():this[_0x183969(0x5ca)]()&&this['currentAction']()[_0x183969(0xb39)]()&&this[_0x183969(0x5ca)]()[_0x183969(0x74c)]();return![];},Game_Battler['prototype'][_0xabeb6b(0x127)]=function(){const _0x1ea201=_0xabeb6b;if(BattleManager[_0x1ea201(0x4a3)]()&&this[_0x1ea201(0x2d1)]===_0x1ea201(0x22c))return this[_0x1ea201(0x668)]()?this[_0x1ea201(0x5ca)]()&&this[_0x1ea201(0x5ca)]()['item']()&&!this['currentAction']()[_0x1ea201(0xad5)]():this[_0x1ea201(0x5ca)]()&&this[_0x1ea201(0x5ca)]()[_0x1ea201(0xb39)]()&&!this[_0x1ea201(0x5ca)]()[_0x1ea201(0x74c)]();return![];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x29f)]=Game_Battler[_0xabeb6b(0xc8)]['clearDamagePopup'],Game_Battler[_0xabeb6b(0xc8)]['clearDamagePopup']=function(){const _0xdaefcd=_0xabeb6b;VisuMZ[_0xdaefcd(0x553)][_0xdaefcd(0x29f)]['call'](this),this[_0xdaefcd(0x566)]=[];},Game_Battler['prototype'][_0xabeb6b(0x758)]=function(){const _0x50dd40=_0xabeb6b;if(!this['_damagePopupArray'])this[_0x50dd40(0x7cc)]();return this['_damagePopupArray'][_0x50dd40(0x93a)]>0x0;},Game_Battler[_0xabeb6b(0xc8)]['startDamagePopup']=function(){const _0x4971d2=_0xabeb6b;if(!SceneManager[_0x4971d2(0x87a)]())return;if(BattleManager[_0x4971d2(0x720)]())return;if(!this[_0x4971d2(0x566)])this[_0x4971d2(0x7cc)]();this[_0x4971d2(0x17a)]();const _0x3caae6=this[_0x4971d2(0x7bb)]();if(_0x3caae6)_0x3caae6[_0x4971d2(0x554)]();},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x17a)]=function(){const _0x2b5727=_0xabeb6b,_0x144361=this[_0x2b5727(0x96a)]();if(_0x144361[_0x2b5727(0x8e8)]||_0x144361[_0x2b5727(0x301)]){const _0xf5323c=JsonEx[_0x2b5727(0x562)](_0x144361);_0xf5323c[_0x2b5727(0xbba)]=![],_0xf5323c[_0x2b5727(0x24e)]=0x0,this[_0x2b5727(0x566)][_0x2b5727(0x5cb)](_0xf5323c);if(!_0x144361[_0x2b5727(0x88b)]&&!_0x144361['mpDamage'])return;}if(_0x144361['hpAffected']){const _0x19582e=JsonEx[_0x2b5727(0x562)](_0x144361);_0x19582e['missed']=![],_0x19582e[_0x2b5727(0x301)]=![],_0x19582e[_0x2b5727(0x24e)]=0x0,this[_0x2b5727(0x566)][_0x2b5727(0x5cb)](_0x19582e);}if(_0x144361['mpDamage']!==0x0){const _0x3039a0=JsonEx[_0x2b5727(0x562)](_0x144361);_0x3039a0['missed']=![],_0x3039a0['evaded']=![],_0x3039a0['hpAffected']=![],this[_0x2b5727(0x566)][_0x2b5727(0x5cb)](_0x3039a0);}},Game_Battler['prototype'][_0xabeb6b(0x2e4)]=function(){const _0x2a41a1=_0xabeb6b;if(!this[_0x2a41a1(0x566)])this[_0x2a41a1(0x7cc)]();return VisuMZ[_0x2a41a1(0x553)][_0x2a41a1(0x78f)][_0x2a41a1(0x11a)][_0x2a41a1(0x2e0)]?this[_0x2a41a1(0x566)][_0x2a41a1(0x95f)]():this[_0x2a41a1(0x566)][_0x2a41a1(0x85e)]();},Game_Battler['prototype']['setupTextPopup']=function(_0x389b16,_0x20eb16){const _0x31818c=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x31818c(0x7bb)]())return;if(_0x389b16['length']<=0x0)return;_0x20eb16=_0x20eb16||{},_0x20eb16['textColor']=_0x20eb16['textColor']||_0x31818c(0x3b8),_0x20eb16['flashColor']=_0x20eb16[_0x31818c(0x5a5)]||[0x0,0x0,0x0,0x0],_0x20eb16['flashDuration']=_0x20eb16[_0x31818c(0xad0)]||0x0,this['battler']()[_0x31818c(0x400)](_0x389b16,_0x20eb16);},Game_Battler[_0xabeb6b(0xc8)]['setupIconTextPopup']=function(_0x34cf33,_0x274aa7,_0x5001b3){const _0x40ed4a=_0xabeb6b;if(!SceneManager[_0x40ed4a(0x87a)]())return;if(BattleManager[_0x40ed4a(0x720)]())return;if(!this[_0x40ed4a(0x7bb)]())return;if(_0x274aa7[_0x40ed4a(0x93a)]<=0x0)return;_0x5001b3=_0x5001b3||{},_0x5001b3['textColor']=_0x5001b3['textColor']||_0x40ed4a(0x3b8),_0x5001b3[_0x40ed4a(0x5a5)]=_0x5001b3['flashColor']||[0x0,0x0,0x0,0x0],_0x5001b3[_0x40ed4a(0xad0)]=_0x5001b3[_0x40ed4a(0xad0)]||0x0,this['battler']()[_0x40ed4a(0x280)](_0x34cf33,_0x274aa7,_0x5001b3);},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x250)]=function(){const _0x3be48c=_0xabeb6b;if(this[_0x3be48c(0xb6)]())return![];if(this[_0x3be48c(0x946)]()&&this[_0x3be48c(0x46a)]())return!![];if(this[_0x3be48c(0x54b)]()&&this[_0x3be48c(0x5dc)]()){if(this[_0x3be48c(0x69e)]()&&this[_0x3be48c(0x695)]())return![];}else{if(this[_0x3be48c(0x69e)]())return![];}return!![];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x1d7)]=Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xb19)],Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xb19)]=function(){const _0x1d0b6b=_0xabeb6b;VisuMZ[_0x1d0b6b(0x553)][_0x1d0b6b(0x1d7)][_0x1d0b6b(0x378)](this),this['clearFreezeMotion']();},Game_Battler[_0xabeb6b(0xc8)]['canBattlerMove']=function(){return!![];},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x8f3)]=function(){return![];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x541)]=Game_Battler[_0xabeb6b(0xc8)]['onBattleStart'],Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x916)]=function(_0x371256){const _0x24768c=_0xabeb6b;VisuMZ[_0x24768c(0x553)][_0x24768c(0x541)][_0x24768c(0x378)](this,_0x371256),this['onBattleStartBattleCore'](_0x371256),this[_0x24768c(0x7cc)]();},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x4df)]=function(_0x1badd8){const _0x230330=_0xabeb6b;this[_0x230330(0xa26)](![]),this['_forcedHomeX']=undefined,this[_0x230330(0x59e)]=undefined;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xab3)]=Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x6e0)],Game_Battler[_0xabeb6b(0xc8)]['onBattleEnd']=function(){const _0x501e8e=_0xabeb6b;VisuMZ['BattleCore'][_0x501e8e(0xab3)][_0x501e8e(0x378)](this),this[_0x501e8e(0x222)]();},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x222)]=function(){const _0xc5d826=_0xabeb6b;this[_0xc5d826(0x3ed)]=undefined,this[_0xc5d826(0x59e)]=undefined;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x444)]=Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xa23)],Game_Battler['prototype'][_0xabeb6b(0xa23)]=function(_0x3cc6bc){const _0x1c8928=_0xabeb6b;VisuMZ[_0x1c8928(0x553)][_0x1c8928(0x444)]['call'](this,_0x3cc6bc);if(!_0x3cc6bc[_0x1c8928(0x6a8)]()){const _0x3ccb17=this['battler']();_0x3ccb17&&_0x3ccb17['stepForward']();}this[_0x1c8928(0xa26)](![]);},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x476)]=function(){const _0x3d8693=_0xabeb6b;this['_performDamageMotion']=undefined;const _0x5c5091=this['_flinched'];this['_flinched']=![];if(BattleManager[_0x3d8693(0xb6c)]()&&this[_0x3d8693(0x8bb)]()){const _0x48d5cb=this['battler']();if(_0x48d5cb&&_0x5c5091)_0x48d5cb[_0x3d8693(0xe3)]();return;}const _0x4029a0=this[_0x3d8693(0x7bb)]();if(_0x4029a0)_0x4029a0[_0x3d8693(0x84b)]();this[_0x3d8693(0xa26)](![]),this['requestMotionRefresh']();},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x4b1)]=function(_0x40e3cd){const _0x3e3643=_0xabeb6b;if(_0x40e3cd[_0x3e3643(0x76c)]())this[_0x3e3643(0xbd6)]();else{if(_0x40e3cd[_0x3e3643(0x6a8)]())this[_0x3e3643(0x67a)](_0x3e3643(0xb63));else{if(_0x40e3cd[_0x3e3643(0xad5)]())this['requestMotion'](_0x3e3643(0x933));else{if(_0x40e3cd[_0x3e3643(0x901)]())[0x1,0x2,0x5,0x6][_0x3e3643(0x5d8)](_0x40e3cd[_0x3e3643(0xb39)]()['damage'][_0x3e3643(0x2f9)])?this[_0x3e3643(0xbd6)]():this[_0x3e3643(0x67a)](_0x3e3643(0x3a1));else _0x40e3cd[_0x3e3643(0x7fb)]()&&this['requestMotion'](_0x3e3643(0xb39));}}}},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x2f2)]=function(){const _0x49dcc1=_0xabeb6b;return $dataSystem[_0x49dcc1(0x91d)][0x0];},Game_Battler[_0xabeb6b(0xc8)]['getAttackWeaponAnimationId']=function(){const _0x229a11=_0xabeb6b,_0x1bb290=this[_0x229a11(0x2f2)]();return _0x1bb290?_0x1bb290[_0x229a11(0x49e)]:0x0;},Game_Battler[_0xabeb6b(0xc8)]['performSubstitute']=function(_0x3d3131){const _0x445d02=_0xabeb6b;if(!$gameSystem[_0x445d02(0x4d5)]())return;const _0x3036df=this[_0x445d02(0x7bb)](),_0x348d8c=_0x3d3131[_0x445d02(0x7bb)]();if(!_0x3036df||!_0x348d8c)return;const _0x40f6fc=_0x348d8c[_0x445d02(0x945)],_0x389797=_0x348d8c[_0x445d02(0xb85)];this[_0x445d02(0x79b)](_0x40f6fc,_0x389797,0x0,![],_0x445d02(0x899),-0x1),_0x3036df['updatePosition']();const _0x7f2464=VisuMZ[_0x445d02(0x553)][_0x445d02(0x78f)][_0x445d02(0xc4)];let _0xc31b72=(_0x348d8c[_0x445d02(0x461)]+_0x3036df['width'])/0x2;_0xc31b72*=this[_0x445d02(0xb6a)]()?0x1:-0x1;let _0x3b70d3=_0x7f2464['StepDistanceY']*(this['isActor']()?0x1:-0x1);_0x3d3131[_0x445d02(0x976)](_0xc31b72,_0x3b70d3,0x0,![],_0x445d02(0x899)),_0x348d8c[_0x445d02(0x8df)]();},Game_Battler[_0xabeb6b(0xc8)]['requestMotion']=function(_0x5320cb){const _0x429820=_0xabeb6b;if(SceneManager[_0x429820(0x87a)]()){const _0x581e9c=this['battler']();_0x581e9c&&(_0x581e9c['forceMotion'](_0x5320cb),[_0x429820(0xd7),_0x429820(0x4d8),'missile'][_0x429820(0x5d8)](_0x5320cb)&&this['performWeaponAnimation']());}this[_0x429820(0x355)]();},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xa2c)]=function(){},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xa0b)]=function(_0x178d21){const _0x276b56=_0xabeb6b;if(SceneManager[_0x276b56(0x87a)]()){const _0x42840=this[_0x276b56(0x7bb)]();if(_0x42840)_0x42840[_0x276b56(0x3a7)](_0x178d21);}},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x8cd)]=function(){const _0x2a901e=_0xabeb6b;if(SceneManager['isSceneBattle']()){const _0x2a33f5=this[_0x2a901e(0x5cc)]();this[_0x2a901e(0xa0b)](_0x2a33f5);}},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x8e6)]=function(_0xfb094a,_0x20e8ac){const _0x2823db=_0xabeb6b;if(!_0xfb094a)return;if(!_0xfb094a['item']())return;if(_0xfb094a[_0x2823db(0x76c)]())return;if(_0xfb094a[_0x2823db(0x6a8)]())return;if(_0xfb094a[_0x2823db(0x7fb)]())return;if($gameTemp[_0x2823db(0x971)])return;let _0x11a554=0x0;const _0x14ae56=VisuMZ[_0x2823db(0x553)]['Settings'][_0x2823db(0xc4)],_0x18655c=_0xfb094a[_0x2823db(0xb39)]()[_0x2823db(0x6f8)];if(_0x18655c['match'](/<CAST ANIMATION: (\d+)>/i))_0x11a554=Number(RegExp['$1']);else{if(_0x18655c[_0x2823db(0xef)](/<NO CAST ANIMATION>/i))return;else{if(_0xfb094a[_0x2823db(0x19c)]())_0x11a554=_0x14ae56[_0x2823db(0xa9b)];else{if(_0xfb094a['isPhysical']())_0x11a554=_0x14ae56['CastPhysical'];else _0xfb094a[_0x2823db(0xad5)]()&&(_0x11a554=_0x14ae56[_0x2823db(0x78a)]);}}}_0x11a554>0x0&&$gameTemp[_0x2823db(0x6d5)]([this],_0x11a554,!!_0x20e8ac);},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x7e6)]=function(){const _0x2aa49f=_0xabeb6b;SoundManager[_0x2aa49f(0x4e3)]();let _0x11c6f2=VisuMZ['BattleCore'][_0x2aa49f(0x78f)]['ActionSequence'][_0x2aa49f(0xa37)];_0x11c6f2>0x0&&(Imported[_0x2aa49f(0x765)]?$gameTemp['requestFauxAnimation']([this],_0x11c6f2):$gameTemp[_0x2aa49f(0x6d5)]([this],_0x11c6f2));},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x3f3)]=function(){const _0x40f7bd=_0xabeb6b;if(!$gameSystem[_0x40f7bd(0x4d5)]())return![];if(!BattleManager[_0x40f7bd(0xb6c)]())return![];if(!this[_0x40f7bd(0x946)]())return![];if(this[_0x40f7bd(0x8bb)]())return!![];if(this[_0x40f7bd(0xd8)]())return!![];if(this[_0x40f7bd(0xb4e)]>=0x1)return!![];return![];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x13c)]=Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x1a5)],Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x1a5)]=function(){const _0x2d6028=_0xabeb6b;this[_0x2d6028(0x3f3)]()&&(this['_performDamageMotion']=!![]),VisuMZ[_0x2d6028(0x553)][_0x2d6028(0x13c)][_0x2d6028(0x378)](this),this['performFlinch'](),this[_0x2d6028(0x75f)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x79a)]=Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x7f4)],Game_Battler[_0xabeb6b(0xc8)]['performMiss']=function(){const _0x331b71=_0xabeb6b;this[_0x331b71(0x3f3)]()&&(this[_0x331b71(0xd2)]=!![]),VisuMZ['BattleCore']['Game_Battler_performMiss']['call'](this),this[_0x331b71(0x7d5)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xb2e)]=Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x658)],Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x658)]=function(){const _0x190f0f=_0xabeb6b;this[_0x190f0f(0x3f3)]()&&(this[_0x190f0f(0xd2)]=!![]),VisuMZ[_0x190f0f(0x553)][_0x190f0f(0xb2e)]['call'](this),this[_0x190f0f(0x7d5)]();},Game_Battler[_0xabeb6b(0xc8)]['performFlinch']=function(){const _0x20d587=_0xabeb6b;if(!$gameSystem[_0x20d587(0x4d5)]())return;if(this[_0x20d587(0x71f)])return;this['_flinched']=!![];const _0xc8ca2b=this['battler']();if(_0xc8ca2b)_0xc8ca2b['stepFlinch']();},Game_Battler['prototype'][_0xabeb6b(0x75f)]=function(){const _0x1aed40=_0xabeb6b;if(!this[_0x1aed40(0x1bc)]())return;const _0x4362a2=VisuMZ[_0x1aed40(0x553)][_0x1aed40(0x78f)][_0x1aed40(0x2b0)];if(!(_0x4362a2[_0x1aed40(0xb1a)]??![]))return;if(this[_0x1aed40(0x5af)]<=0x0)return;const _0x46968d=this[_0x1aed40(0x7bb)]();if(_0x46968d){const _0x12996d=this[_0x1aed40(0x5af)],_0x19018c=(_0x12996d/this[_0x1aed40(0x78d)])['clamp'](0.8,0x1),_0x1a0623=_0x4362a2[_0x1aed40(0x3e8)]??0x30,_0x1434f4=_0x19018c*_0x1a0623;_0x46968d[_0x1aed40(0xae6)](_0x1434f4,_0x19018c);}},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x1b7)]=function(){const _0x378443=_0xabeb6b;if(this[_0x378443(0x69e)]()&&this[_0x378443(0x60a)]!==_0x378443(0x8f2)){this['requestMotion'](_0x378443(0x8f2));return;}if(this[_0x378443(0x69e)]()&&this[_0x378443(0x60a)]===_0x378443(0x8f2))return;if(!!this[_0x378443(0x726)])return;if(this[_0x378443(0x54b)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x378443(0x4ee)]){if(this[_0x378443(0x7bb)]())this[_0x378443(0x7bb)]()[_0x378443(0x543)]();}this['clearFreezeMotion']();return;}if(this[_0x378443(0x60a)]===_0x378443(0xa5f))return;if(this[_0x378443(0x60a)]==='escape'&&!BattleManager['isInputting']())return;if(this['_motionType']==='guard'&&!BattleManager[_0x378443(0x8bb)]())return;this[_0x378443(0xb19)]();if(BattleManager[_0x378443(0xb6c)]()&&this===BattleManager['_subject'])return;if(this[_0x378443(0x7bb)]()&&BattleManager[_0x378443(0x8bb)]()){this[_0x378443(0x7bb)]()[_0x378443(0x543)](),this['clearFreezeMotion']();return;}this[_0x378443(0x7bb)]()&&BattleManager[_0x378443(0xb6c)]()&&this!==BattleManager['_subject']&&this['battler']()[_0x378443(0x543)]();},Game_Enemy[_0xabeb6b(0xc8)]['isDuringNonLoopingMotion']=function(){const _0x2a72b3=_0xabeb6b;if(!this['hasSvBattler']())return![];const _0x4c820a=this[_0x2a72b3(0x7bb)]();if(!_0x4c820a)return![];const _0x58b893=_0x4c820a[_0x2a72b3(0x766)];if(!_0x58b893)return![];const _0x3b32df=_0x58b893['_motion'];return _0x3b32df&&!_0x3b32df[_0x2a72b3(0x6cb)];},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x94b)]=function(){return this['_isBattlerFlipped'];},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xa26)]=function(_0xb4e7e6){const _0x41319d=_0xabeb6b;if(!$gameSystem[_0x41319d(0x4d5)]())return;this[_0x41319d(0x769)]=_0xb4e7e6;const _0x4552a3=this[_0x41319d(0x7bb)]();if(_0x4552a3)_0x4552a3[_0x41319d(0x4d9)]();},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xb5c)]=function(_0xcbbbc2,_0x5806ab,_0x4783b4){const _0x4e188a=_0xabeb6b;if(!$gameSystem['isSideView']())return;const _0x5c9bf4=this['battler']();if(!_0x5c9bf4)return;if(_0xcbbbc2===_0x5c9bf4[_0x4e188a(0x945)])return;let _0x6134f1=![];if(this[_0x4e188a(0xb6a)]()){if(_0xcbbbc2>_0x5c9bf4['_baseX'])_0x6134f1=!![];if(_0xcbbbc2<_0x5c9bf4[_0x4e188a(0x945)])_0x6134f1=![];}else{if(this[_0x4e188a(0x54b)]()){if(_0xcbbbc2>_0x5c9bf4[_0x4e188a(0x945)])_0x6134f1=![];if(_0xcbbbc2<_0x5c9bf4[_0x4e188a(0x945)])_0x6134f1=!![];}};this[_0x4e188a(0xa26)](_0x4783b4?!_0x6134f1:_0x6134f1),_0x5c9bf4[_0x4e188a(0x4d9)]();},Game_Battler[_0xabeb6b(0xc8)]['moveBattlerDistance']=function(_0x359009,_0x4ad368,_0x4a85f6,_0x2d2a68,_0x20f1a2){const _0x185646=_0xabeb6b;if(!$gameSystem[_0x185646(0x4d5)]())return;const _0x10d2ea=this[_0x185646(0x7bb)]();if(!_0x10d2ea)return;if(_0x2d2a68)this[_0x185646(0xb5c)](_0x359009+_0x10d2ea['_baseX'],_0x4ad368+_0x10d2ea[_0x185646(0xb85)],![]);_0x359009+=_0x10d2ea['_baseX']-_0x10d2ea[_0x185646(0x615)],_0x4ad368+=_0x10d2ea['_baseY']-_0x10d2ea[_0x185646(0x3a2)],_0x10d2ea[_0x185646(0xbc4)](_0x359009,_0x4ad368,_0x4a85f6);if(Imported[_0x185646(0x765)])_0x10d2ea[_0x185646(0x3be)](_0x20f1a2||_0x185646(0x899));},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x79b)]=function(_0x2d9784,_0x5e3204,_0x2a6874,_0x1a9b4f,_0x1919ce,_0x1338bb){const _0x414302=_0xabeb6b;if(!$gameSystem['isSideView']())return;const _0x514ca8=this['battler']();if(!_0x514ca8)return;if(_0x2d9784===Infinity||_0x5e3204===Infinity)return;if(isNaN(_0x2d9784)||isNaN(_0x5e3204))return;_0x1338bb=_0x1338bb||0x0;if(_0x1338bb>0x0){if(_0x514ca8[_0x414302(0x945)]>_0x2d9784)_0x2d9784+=_0x514ca8[_0x414302(0x461)]/0x2+_0x1338bb;if(_0x514ca8[_0x414302(0x945)]<_0x2d9784)_0x2d9784-=_0x514ca8[_0x414302(0x461)]/0x2+_0x1338bb;}if(_0x1a9b4f)this['setBattlerFacePoint'](_0x2d9784,_0x5e3204,![]);_0x2d9784-=_0x514ca8[_0x414302(0x615)],_0x5e3204-=_0x514ca8['_homeY'],_0x514ca8[_0x414302(0xbc4)](_0x2d9784,_0x5e3204,_0x2a6874);if(Imported[_0x414302(0x765)])_0x514ca8[_0x414302(0x3be)](_0x1919ce||_0x414302(0x899));},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xbe4)]=function(_0x565ab6,_0x6319a5,_0x236c9f,_0x3d44e4,_0xcb8115){const _0x365b69=_0xabeb6b;if(!$gameSystem[_0x365b69(0x4d5)]())return;const _0x1be077=this['battler']();if(!_0x1be077)return;if(_0x3d44e4)this[_0x365b69(0xb5c)](_0x565ab6+_0x1be077[_0x365b69(0x945)],_0x6319a5+_0x1be077[_0x365b69(0xb85)],![]);_0x565ab6+=_0x1be077[_0x365b69(0x615)],_0x6319a5+=_0x1be077[_0x365b69(0x3a2)],_0x1be077['startHomeMove'](_0x565ab6,_0x6319a5,_0x236c9f,_0xcb8115),this[_0x365b69(0x3ed)]=_0x565ab6,this[_0x365b69(0x59e)]=_0x6319a5;},Game_Battler['prototype'][_0xabeb6b(0x544)]=function(_0x2b684d,_0x17e235,_0x1d0741,_0x463d95,_0x43dd8d,_0x4a6f68){const _0x445049=_0xabeb6b;if(!$gameSystem[_0x445049(0x4d5)]())return;const _0xa3720c=this[_0x445049(0x7bb)]();if(!_0xa3720c)return;_0x4a6f68=_0x4a6f68||0x0;if(_0x4a6f68>0x0){if(_0xa3720c[_0x445049(0x945)]>_0x2b684d)_0x2b684d+=_0xa3720c[_0x445049(0x461)]/0x2+_0x4a6f68;if(_0xa3720c[_0x445049(0x945)]<_0x2b684d)_0x2b684d-=_0xa3720c['width']/0x2+_0x4a6f68;}if(_0x463d95)this['setBattlerFacePoint'](_0x2b684d,_0x17e235,![]);_0xa3720c[_0x445049(0xaa9)](_0x2b684d,_0x17e235,_0x1d0741,_0x43dd8d),this['_forcedHomeX']=_0x2b684d,this['_forcedHomeY']=_0x17e235;},Game_Battler[_0xabeb6b(0xc8)]['floatBattler']=function(_0x19ada0,_0x226dbc,_0x4c686a){const _0x1b1733=_0xabeb6b;if(!$gameSystem[_0x1b1733(0x4d5)]())return;const _0x3720e8=this[_0x1b1733(0x7bb)]();if(!_0x3720e8)return;_0x3720e8[_0x1b1733(0xa98)](_0x19ada0,_0x226dbc,_0x4c686a);},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x776)]=function(_0xd862,_0x52f830){const _0x380c0a=_0xabeb6b;if(!$gameSystem[_0x380c0a(0x4d5)]())return;const _0x565fdb=this['battler']();if(!_0x565fdb)return;_0x565fdb[_0x380c0a(0x89b)](_0xd862,_0x52f830);},Game_Battler[_0xabeb6b(0xc8)]['spinBattler']=function(_0x37e7b4,_0x59350f,_0x31e152,_0x4fbe1e){const _0x5e1624=_0xabeb6b;if(!$gameSystem[_0x5e1624(0x4d5)]())return;const _0x45a948=this[_0x5e1624(0x7bb)]();if(!_0x45a948)return;_0x45a948[_0x5e1624(0x463)](_0x37e7b4,_0x59350f,_0x31e152,_0x4fbe1e);},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x51c)]=function(_0x562141,_0x44a120,_0x44fd31,_0x9d3b17){const _0x3a1a84=_0xabeb6b;if(!$gameSystem[_0x3a1a84(0x4d5)]())return;const _0x53d381=this[_0x3a1a84(0x7bb)]();if(!_0x53d381)return;this[_0x3a1a84(0xb6a)]()&&(_0x562141*=-0x1,_0x44a120*=-0x1),_0x53d381[_0x3a1a84(0x486)](_0x562141,_0x44a120,_0x44fd31,_0x9d3b17);},Game_Battler[_0xabeb6b(0xc8)]['growBattler']=function(_0x3b7226,_0x4636bd,_0xe3828b,_0x30fc0c){const _0x9dfb81=_0xabeb6b;if(!$gameSystem[_0x9dfb81(0x4d5)]())return;const _0x1dc4fc=this[_0x9dfb81(0x7bb)]();if(!_0x1dc4fc)return;_0x1dc4fc['startGrow'](_0x3b7226,_0x4636bd,_0xe3828b,_0x30fc0c);},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x56c)]=function(_0x328ae0,_0x33eac2,_0x4a3180){const _0x100c74=_0xabeb6b;if(!$gameSystem['isSideView']())return;const _0x2b8742=this[_0x100c74(0x7bb)]();if(!_0x2b8742)return;_0x2b8742[_0x100c74(0x447)](_0x328ae0,_0x33eac2,_0x4a3180);},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x355)]=function(){const _0x31c936=_0xabeb6b,_0x257817=!!this[_0x31c936(0x726)];this[_0x31c936(0x726)]=undefined,_0x257817&&(this['requestMotionRefresh'](),this[_0x31c936(0x22d)]());},Game_Battler['prototype'][_0xabeb6b(0x22d)]=function(){const _0x178608=_0xabeb6b;if(!SceneManager[_0x178608(0x87a)]())return;const _0x324b93=this[_0x178608(0x7bb)]();if(!_0x324b93)return;let _0x57c48d=this[_0x178608(0xb6a)]()?_0x324b93[_0x178608(0x51d)]:_0x324b93[_0x178608(0x766)]['_weaponSprite'];_0x57c48d&&_0x57c48d[_0x178608(0x3a5)](0x0);},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x970)]=function(_0x201710,_0x223883,_0x17b125){const _0x464acb=_0xabeb6b;if(this[_0x464acb(0x54b)]()&&!this[_0x464acb(0x5dc)]())return;let _0x304e49=0x0,_0xf6f0b3=0x0;_0x201710[_0x464acb(0xef)](/ATTACK[ ](\d+)/i)&&(_0xf6f0b3=Number(RegExp['$1']),_0xf6f0b3--);if(this['isActor']()){const _0x1fb92d=this[_0x464acb(0x2e5)]();_0x304e49=_0x1fb92d[_0xf6f0b3]?_0x1fb92d[_0xf6f0b3][_0x464acb(0x449)]:0x0;}else this[_0x464acb(0x54b)]()&&(_0x304e49=this[_0x464acb(0x8ae)]()['wtypeId']||0x0);const _0x184fd2=$dataSystem['attackMotions'][_0x304e49];_0x201710['match'](/attack/i)&&(_0x201710=['thrust',_0x464acb(0xd7),_0x464acb(0x717)][_0x184fd2['type']]||_0x464acb(0xd7)),this[_0x464acb(0x726)]={'motionType':_0x201710,'weaponImageId':_0x223883?_0x184fd2[_0x464acb(0x49e)]:0x0,'pattern':_0x17b125};},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x825)]=function(_0x5acd03){const _0x58088c=_0xabeb6b;if(!_0x5acd03)return![];return _0x5acd03[_0x58088c(0xa4a)]()===this[_0x58088c(0xa4a)]();},Game_Battler[_0xabeb6b(0xc8)]['isOpponent']=function(_0x7cdd04){const _0x285971=_0xabeb6b;if(!_0x7cdd04)return![];return _0x7cdd04[_0x285971(0xb00)]()===this[_0x285971(0xa4a)]();},Game_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x3dc)]=function(){return![];},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x3dc)]=function(){const _0xe88363=_0xabeb6b;return this['battlerName']()[_0xe88363(0xef)](/\$/i);},Game_Enemy['prototype'][_0xabeb6b(0x3dc)]=function(){const _0x499e06=_0xabeb6b;return this['hasSvBattler']()&&this[_0x499e06(0x6bd)]()[_0x499e06(0xef)](/\$/i);},VisuMZ['BattleCore'][_0xabeb6b(0x195)]=Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x3a5)],Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x3a5)]=function(_0x1f26aa){const _0x2ffa43=_0xabeb6b;VisuMZ[_0x2ffa43(0x553)][_0x2ffa43(0x195)]['call'](this,_0x1f26aa),this[_0x2ffa43(0x465)]();},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x465)]=function(){const _0x1b89a8=_0xabeb6b;this[_0x1b89a8(0x255)]='',this[_0x1b89a8(0x70a)]()&&this[_0x1b89a8(0x70a)]()[_0x1b89a8(0x6f8)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x1b89a8(0x255)]=String(RegExp['$1']));},Game_Actor[_0xabeb6b(0xc8)]['getBattlePortraitFilename']=function(){const _0x49f928=_0xabeb6b;if(this[_0x49f928(0x7a7)]()!=='')return this['getBattlePortrait']();else{if(Imported[_0x49f928(0x83f)]&&this['getMenuImage']()!=='')return this[_0x49f928(0xa3f)]();}return'';},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x7a7)]=function(){const _0x32341f=_0xabeb6b;if(this[_0x32341f(0x255)]===undefined)this[_0x32341f(0x465)]();return this[_0x32341f(0x255)];},Game_Actor['prototype'][_0xabeb6b(0x3fa)]=function(_0x466824){const _0xd6785b=_0xabeb6b;if(this[_0xd6785b(0x255)]===undefined)this[_0xd6785b(0x465)]();this[_0xd6785b(0x255)]=_0x466824;if(SceneManager[_0xd6785b(0x87a)]()&&$gameParty[_0xd6785b(0x786)]()[_0xd6785b(0x5d8)](this)){const _0x5c6f18=SceneManager[_0xd6785b(0x483)]['_statusWindow'];_0x5c6f18&&_0x5c6f18[_0xd6785b(0x6fe)](this);}},Game_Actor[_0xabeb6b(0xc8)]['isSpriteVisible']=function(){return!![];},Game_Actor['prototype'][_0xabeb6b(0xbbc)]=function(){const _0x1c426b=_0xabeb6b;if(!this['isConfused']()&&BattleManager['_autoBattle'])return!![];return Game_Battler['prototype'][_0x1c426b(0xbbc)][_0x1c426b(0x378)](this);},VisuMZ[_0xabeb6b(0x553)]['Game_Actor_makeActionList']=Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x6d3)],Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x6d3)]=function(){const _0x3b14d8=_0xabeb6b;if(BattleManager['_autoBattle']&&!ConfigManager['autoBattleUseSkills'])return this['makeActionListAutoAttack']();else{return VisuMZ[_0x3b14d8(0x553)][_0x3b14d8(0x644)]['call'](this);;}},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x306)]=function(){const _0x50c8f7=_0xabeb6b,_0x26f1d0=[],_0x5acd9c=new Game_Action(this);return _0x5acd9c[_0x50c8f7(0x64b)](),_0x26f1d0[_0x50c8f7(0x5cb)](_0x5acd9c),_0x26f1d0;},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x213)]=function(){const _0x131f0f=_0xabeb6b;return this[_0x131f0f(0xba)]()[_0x131f0f(0x6f8)][_0x131f0f(0xef)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x131f0f(0x8e9)](/[\r\n]+/):VisuMZ['BattleCore']['Settings']['ActorCmd'][_0x131f0f(0x894)];},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x3f4)]=function(){const _0xfca22c=_0xabeb6b;if(this['_cache'][_0xfca22c(0x71d)]!==undefined)return this[_0xfca22c(0x10d)][_0xfca22c(0x71d)];return this[_0xfca22c(0x70a)]()['note']['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0xfca22c(0x71d)]=eval(RegExp['$1']),this[_0xfca22c(0x10d)][_0xfca22c(0x4c7)]=eval(RegExp['$2'])):this[_0xfca22c(0x10d)][_0xfca22c(0x71d)]=Game_Battler[_0xfca22c(0xc8)][_0xfca22c(0x3f4)][_0xfca22c(0x378)](this),this[_0xfca22c(0x10d)][_0xfca22c(0x71d)];},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x8b9)]=function(){const _0x2c044e=_0xabeb6b;if(this[_0x2c044e(0x10d)][_0x2c044e(0x4c7)]!==undefined)return this['_cache'][_0x2c044e(0x4c7)];return this[_0x2c044e(0x70a)]()['note'][_0x2c044e(0xef)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x2c044e(0x10d)][_0x2c044e(0x71d)]=eval(RegExp['$1']),this[_0x2c044e(0x10d)][_0x2c044e(0x4c7)]=eval(RegExp['$2'])):this[_0x2c044e(0x10d)]['svAnchorY']=Game_Battler[_0x2c044e(0xc8)][_0x2c044e(0x8b9)]['call'](this),this['_cache'][_0x2c044e(0x4c7)];},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x879)]=function(){const _0x2f57fe=_0xabeb6b;if(this['_cache']['svShadow']!==undefined)return this[_0x2f57fe(0x10d)]['svShadow'];if(this[_0x2f57fe(0x70a)]()[_0x2f57fe(0x6f8)][_0x2f57fe(0xef)](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x2f57fe(0x411)]=!![];else this[_0x2f57fe(0x70a)]()[_0x2f57fe(0x6f8)][_0x2f57fe(0xef)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x2f57fe(0x10d)]['svShadow']=![]:this[_0x2f57fe(0x10d)][_0x2f57fe(0x411)]=Game_Battler[_0x2f57fe(0xc8)]['svBattlerShadowVisible'][_0x2f57fe(0x378)](this);return this[_0x2f57fe(0x10d)][_0x2f57fe(0x411)];},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x8b8)]=function(){const _0x352e5d=_0xabeb6b;return VisuMZ[_0x352e5d(0x553)]['Settings'][_0x352e5d(0x2b0)][_0x352e5d(0xbdb)];},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0xa2c)]=function(){const _0x206dbc=_0xabeb6b,_0xf75089=this[_0x206dbc(0x2e5)](),_0x37651a=_0xf75089[0x0]?_0xf75089[0x0][_0x206dbc(0x449)]:0x0,_0x573de7=$dataSystem['attackMotions'][_0x37651a];_0x573de7&&this[_0x206dbc(0xa0b)](_0x573de7[_0x206dbc(0x49e)]);},Game_Actor['prototype'][_0xabeb6b(0x402)]=function(_0x1fe3cc){const _0x12259e=_0xabeb6b;Game_Battler['prototype'][_0x12259e(0x402)]['call'](this,_0x1fe3cc),this[_0x12259e(0x4b1)](_0x1fe3cc);},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x2f2)]=function(){const _0x4d31a7=_0xabeb6b,_0x308d12=this[_0x4d31a7(0x2e5)](),_0x8d91a3=_0x308d12[0x0]?_0x308d12[0x0][_0x4d31a7(0x449)]:0x0;return $dataSystem[_0x4d31a7(0x91d)][_0x8d91a3];},Game_Actor['prototype'][_0xabeb6b(0x8f5)]=function(_0x5a929d){const _0x56fdce=_0xabeb6b;_0x5a929d=_0x5a929d||0x1,_0x5a929d--;const _0x5e3c30=this[_0x56fdce(0x2e5)]();return _0x5e3c30[_0x5a929d]?_0x5e3c30[_0x5a929d][_0x56fdce(0x43e)]:0x0;},Game_Actor['prototype'][_0xabeb6b(0x39d)]=function(_0x2a640f){const _0xbe9389=_0xabeb6b;_0x2a640f=_0x2a640f||0x1,_0x2a640f--;const _0x2cfc5d=this[_0xbe9389(0x2e5)](),_0x2b4b72=_0x2cfc5d[_0x2a640f]?_0x2cfc5d[_0x2a640f][_0xbe9389(0x449)]:0x0;return $dataSystem['attackMotions'][_0x2b4b72];},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x713)]=function(_0x1f7815){const _0x11869b=_0xabeb6b;_0x1f7815=_0x1f7815||0x1,_0x1f7815--;const _0xb490a=this[_0x11869b(0x2e5)](),_0x47b309=_0xb490a[_0x1f7815]?_0xb490a[_0x1f7815][_0x11869b(0x449)]:0x0,_0x54e230=$dataSystem[_0x11869b(0x91d)][_0x47b309];if(_0x54e230){if(_0x54e230[_0x11869b(0x2f9)]===0x0)this[_0x11869b(0x67a)](_0x11869b(0x4d8));else{if(_0x54e230[_0x11869b(0x2f9)]===0x1)this[_0x11869b(0x67a)](_0x11869b(0xd7));else _0x54e230[_0x11869b(0x2f9)]===0x2&&this['requestMotion'](_0x11869b(0x717));}this[_0x11869b(0xa0b)](_0x54e230['weaponImageId']);}},Game_Battler['prototype'][_0xabeb6b(0x8fa)]=function(_0x46ca31){const _0x3935a7=_0xabeb6b;if(this[_0x3935a7(0xb6a)]()){const _0x3dfb1a=this[_0x3935a7(0x2e5)]();if(_0x3dfb1a[_0x3935a7(0x93a)]>0x0){const _0x1dcdca=_0x3dfb1a[_0x46ca31];if(_0x1dcdca)_0x46ca31=this[_0x3935a7(0x540)]()[_0x3935a7(0x996)](_0x1dcdca);}}this[_0x3935a7(0x6c9)]=_0x46ca31||0x0,this[_0x3935a7(0x10d)]={};},Game_Battler['prototype']['nextActiveWeaponSlot']=function(){const _0x56e648=_0xabeb6b;this[_0x56e648(0x6c9)]=this[_0x56e648(0x6c9)]||0x0,this['_activeWeaponSlot']++,this[_0x56e648(0x10d)]={};},Game_Battler['prototype']['clearActiveWeaponSlot']=function(){const _0x2fd04c=_0xabeb6b;this['_activeWeaponSlot']=undefined,this[_0x2fd04c(0x10d)]={};},VisuMZ['BattleCore'][_0xabeb6b(0x295)]=Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x540)],Game_Actor[_0xabeb6b(0xc8)]['equips']=function(){const _0xda3ff8=_0xabeb6b;let _0x186763=VisuMZ[_0xda3ff8(0x553)][_0xda3ff8(0x295)][_0xda3ff8(0x378)](this);if(this[_0xda3ff8(0x645)])return _0x186763;if(this['_activeWeaponSlot']!==undefined){this['_tempEquipCheck']=!![];const _0x45c843=this[_0xda3ff8(0x4e4)]();for(let _0x12d15b=0x0;_0x12d15b<_0x45c843[_0xda3ff8(0x93a)];_0x12d15b++){_0x45c843[_0x12d15b]===0x1&&this[_0xda3ff8(0x6c9)]!==_0x12d15b&&(_0x186763[_0x12d15b]=null);}this[_0xda3ff8(0x645)]=undefined;}return _0x186763;},Window_BattleLog[_0xabeb6b(0xc8)]['getDualWieldTimes']=function(_0xc5e838){const _0x1f14e2=_0xabeb6b;return _0xc5e838[_0x1f14e2(0xb6a)]()?_0xc5e838[_0x1f14e2(0x2e5)]()[_0x1f14e2(0x93a)]||0x1:0x1;},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x4dc)]=function(_0x3466e3,_0x1ab92e){const _0x42ef6a=_0xabeb6b;_0x3466e3&&_0x3466e3[_0x42ef6a(0xb6a)]()&&_0x3466e3[_0x42ef6a(0x8fa)](_0x1ab92e),this[_0x42ef6a(0x8e7)]();},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x7ca)]=function(_0x295c0e){const _0x25d226=_0xabeb6b;_0x295c0e&&_0x295c0e[_0x25d226(0xb6a)]()&&_0x295c0e[_0x25d226(0x71b)](),this[_0x25d226(0x8e7)]();},Game_Actor[_0xabeb6b(0xc8)]['battleUIOffsetX']=function(){const _0x2067b3=_0xabeb6b;let _0x316f61=_0x2067b3(0xb25);if(this[_0x2067b3(0x332)](_0x316f61))return this[_0x2067b3(0x10d)][_0x316f61];return this[_0x2067b3(0x10d)][_0x316f61]=this['createBattleUIOffsetX'](this[_0x2067b3(0x70a)]()),this[_0x2067b3(0x10d)][_0x316f61];},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x4f3)]=function(){const _0x17bece=_0xabeb6b;let _0x3b1a4d='battleUIOffsetY';if(this[_0x17bece(0x332)](_0x3b1a4d))return this['_cache'][_0x3b1a4d];return this['_cache'][_0x3b1a4d]=this[_0x17bece(0x4e8)](this[_0x17bece(0x70a)]()),this[_0x17bece(0x10d)][_0x3b1a4d];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x7ce)]=Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x3a5)],Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x3a5)]=function(_0x4e598f,_0x15d858,_0x2449a6){const _0x439410=_0xabeb6b;_0x4e598f=DataManager['swapEnemyIDs'](_0x4e598f),VisuMZ['BattleCore'][_0x439410(0x7ce)][_0x439410(0x378)](this,_0x4e598f,_0x15d858,_0x2449a6),Imported[_0x439410(0x12c)]&&this[_0x439410(0x621)](),this[_0x439410(0x8bf)](),this[_0x439410(0x2b3)](),this[_0x439410(0x9dd)](),Imported[_0x439410(0x12c)]&&this[_0x439410(0x455)]();},Game_Enemy['prototype'][_0xabeb6b(0x8bf)]=function(){const _0x388873=_0xabeb6b,_0x1051ed=VisuMZ[_0x388873(0x553)][_0x388873(0x78f)]['Enemy'];this[_0x388873(0xacd)]=_0x1051ed[_0x388873(0x29d)],this[_0x388873(0x57e)]={},this[_0x388873(0x151)]();},Game_Enemy['prototype'][_0xabeb6b(0x2b3)]=function(){const _0x2c0627=_0xabeb6b,_0x163b91=VisuMZ[_0x2c0627(0x553)][_0x2c0627(0x78f)][_0x2c0627(0xa08)],_0x4c278a=this[_0x2c0627(0x7d3)]()[_0x2c0627(0x6f8)];this[_0x2c0627(0x57e)]={'name':'','wtypeId':_0x163b91['WtypeId'],'collapse':_0x163b91[_0x2c0627(0x876)],'motionIdle':_0x163b91[_0x2c0627(0x19e)],'width':_0x163b91[_0x2c0627(0x3d7)]||0x40,'height':_0x163b91['Height']||0x40,'anchorX':_0x163b91[_0x2c0627(0x505)]||0x0,'anchorY':_0x163b91[_0x2c0627(0x5e2)]||0x0,'shadow':_0x163b91[_0x2c0627(0x96b)]};_0x4c278a[_0x2c0627(0xef)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x1cd9cb=this[_0x2c0627(0x57e)];if(_0x4c278a[_0x2c0627(0xef)](/<SIDEVIEW BATTLER: (.*)>/i))_0x1cd9cb[_0x2c0627(0x6e8)]=String(RegExp['$1']);else{if(_0x4c278a[_0x2c0627(0xef)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x46c0c4=String(RegExp['$1'])[_0x2c0627(0x8e9)](/[\r\n]+/)['remove']('');_0x1cd9cb[_0x2c0627(0x6e8)]=DataManager[_0x2c0627(0x123)](_0x46c0c4);}}_0x4c278a['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x1cd9cb['anchorX']=eval(RegExp['$1']),_0x1cd9cb['anchorY']=eval(RegExp['$2']));if(_0x4c278a[_0x2c0627(0xef)](/<SIDEVIEW COLLAPSE>/i))_0x1cd9cb[_0x2c0627(0x310)]=!![];else _0x4c278a['match'](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x1cd9cb['collapse']=![]);if(_0x4c278a[_0x2c0627(0xef)](/<SIDEVIEW SHOW SHADOW>/i))_0x1cd9cb[_0x2c0627(0xa42)]=!![];else _0x4c278a['match'](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x1cd9cb['shadow']=![]);if(_0x4c278a['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x1cd9cb[_0x2c0627(0x3c2)]=String(RegExp['$1'])[_0x2c0627(0xa5b)]()['trim']();else{if(_0x4c278a['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x28249e=String(RegExp['$1'])[_0x2c0627(0x8e9)](/[\r\n]+/)[_0x2c0627(0x858)]('');_0x1cd9cb[_0x2c0627(0x3c2)]=DataManager[_0x2c0627(0x123)](_0x28249e);}}_0x4c278a[_0x2c0627(0xef)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x1cd9cb['width']=Number(RegExp['$1']),_0x1cd9cb[_0x2c0627(0x1ee)]=Number(RegExp['$2']));if(_0x4c278a[_0x2c0627(0xef)](/<SIDEVIEW WEAPON: (.*)>/i))_0x1cd9cb[_0x2c0627(0x449)]=DataManager[_0x2c0627(0x8ba)](RegExp['$1']);else{if(_0x4c278a['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x28ed46=String(RegExp['$1'])[_0x2c0627(0x8e9)](/[\r\n]+/)['remove'](''),_0x3ef04b=DataManager[_0x2c0627(0x123)](_0x28ed46);_0x1cd9cb[_0x2c0627(0x449)]=DataManager[_0x2c0627(0x8ba)](_0x3ef04b);}}if(Imported[_0x2c0627(0x12c)]){const _0x141a00=this[_0x2c0627(0x710)]();for(const _0x5db3e9 of _0x141a00){const _0x228166=this['traitSet'](_0x5db3e9)[_0x2c0627(0x46e)]['toUpperCase']()['trim'](),_0x11c253=_0x5db3e9[_0x2c0627(0xf8)]()[_0x2c0627(0xd3)]();if(_0x4c278a[_0x2c0627(0xef)](VisuMZ[_0x2c0627(0x4ac)][_0x2c0627(0x5d3)][_0x2c0627(0x52e)['format'](_0x11c253,_0x228166)]))_0x1cd9cb[_0x2c0627(0x6e8)]=String(RegExp['$1']);else{if(_0x4c278a[_0x2c0627(0xef)](VisuMZ['ElementStatusCore'][_0x2c0627(0x5d3)][_0x2c0627(0xb7f)[_0x2c0627(0x782)](_0x11c253,_0x228166)])){const _0x29e149=String(RegExp['$1'])[_0x2c0627(0x8e9)](/[\r\n]+/)['remove']('');_0x1cd9cb['name']=DataManager[_0x2c0627(0x123)](_0x29e149);}}if(_0x4c278a[_0x2c0627(0xef)](VisuMZ[_0x2c0627(0x4ac)][_0x2c0627(0x5d3)][_0x2c0627(0x48d)[_0x2c0627(0x782)](_0x11c253,_0x228166)]))_0x1cd9cb[_0x2c0627(0x449)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x4c278a[_0x2c0627(0xef)](VisuMZ[_0x2c0627(0x4ac)][_0x2c0627(0x5d3)][_0x2c0627(0x69c)[_0x2c0627(0x782)](_0x11c253,_0x228166)])){const _0x3174ca=String(RegExp['$1'])[_0x2c0627(0x8e9)](/[\r\n]+/)['remove'](''),_0x53e7ca=DataManager['processRandomizedData'](_0x3174ca);_0x1cd9cb[_0x2c0627(0x449)]=DataManager[_0x2c0627(0x8ba)](_0x53e7ca);}}if(_0x4c278a[_0x2c0627(0xef)](VisuMZ[_0x2c0627(0x4ac)][_0x2c0627(0x5d3)][_0x2c0627(0x7a5)[_0x2c0627(0x782)](_0x11c253,_0x228166)]))_0x1cd9cb[_0x2c0627(0x3c2)]=String(RegExp['$1'])[_0x2c0627(0xa5b)]()[_0x2c0627(0xd3)]();else{if(_0x4c278a[_0x2c0627(0xef)](VisuMZ[_0x2c0627(0x4ac)]['RegExp'][_0x2c0627(0xb93)['format'](_0x11c253,_0x228166)])){const _0x33510c=String(RegExp['$1'])[_0x2c0627(0x8e9)](/[\r\n]+/)[_0x2c0627(0x858)]('');_0x1cd9cb[_0x2c0627(0x3c2)]=DataManager[_0x2c0627(0x123)](_0x33510c);}}}}},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0xbc9)]=function(){const _0x36d5bf=_0xabeb6b;return this[_0x36d5bf(0xacd)]||0x0;},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x171)]=function(){const _0xbb2552=_0xabeb6b;return this[_0xbb2552(0xbc9)]();},Game_Enemy[_0xabeb6b(0xc8)]['attackAnimationIdSlot']=function(_0x35e683){const _0xf4bca=_0xabeb6b;return this[_0xf4bca(0xbc9)]();},Game_Enemy[_0xabeb6b(0xc8)]['canBattlerMove']=function(){const _0x53dd90=_0xabeb6b;if(this[_0x53dd90(0x7d3)]()[_0x53dd90(0x6f8)][_0x53dd90(0xef)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x53dd90(0xc8)][_0x53dd90(0x1bc)][_0x53dd90(0x378)](this);},Game_Enemy['prototype'][_0xabeb6b(0x8f3)]=function(){const _0x507a0d=_0xabeb6b;if(this[_0x507a0d(0x7d3)]()['note'][_0x507a0d(0xef)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x655)]=function(){const _0x5a6b19=_0xabeb6b,_0x46dd34=[];for(const _0x4b4ab3 of this['enemy']()[_0x5a6b19(0x6a4)]){const _0x419785=$dataSkills[_0x4b4ab3[_0x5a6b19(0x90d)]];if(_0x419785&&!_0x46dd34[_0x5a6b19(0x5d8)](_0x419785))_0x46dd34[_0x5a6b19(0x5cb)](_0x419785);}return _0x46dd34;},Game_Enemy['prototype'][_0xabeb6b(0xb25)]=function(){const _0x2624eb=_0xabeb6b;let _0x4c3bf4=_0x2624eb(0xb25);if(this[_0x2624eb(0x332)](_0x4c3bf4))return this[_0x2624eb(0x10d)][_0x4c3bf4];return this['_cache'][_0x4c3bf4]=this[_0x2624eb(0x6a2)](this[_0x2624eb(0x7d3)]()),this['_cache'][_0x4c3bf4];},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x4f3)]=function(){const _0x51a01f=_0xabeb6b;let _0x12c4cc='battleUIOffsetY';if(this[_0x51a01f(0x332)](_0x12c4cc))return this[_0x51a01f(0x10d)][_0x12c4cc];return this[_0x51a01f(0x10d)][_0x12c4cc]=this[_0x51a01f(0x4e8)](this[_0x51a01f(0x7d3)]()),this[_0x51a01f(0x10d)][_0x12c4cc];},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x8ae)]=function(){const _0x4a2516=_0xabeb6b;if(this['_svBattlerData']!==undefined)return this[_0x4a2516(0x57e)];return this[_0x4a2516(0x2b3)](),this[_0x4a2516(0x57e)];},Game_Enemy[_0xabeb6b(0xc8)]['hasSvBattler']=function(){return this['svBattlerData']()['name']!=='';},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x6bd)]=function(){const _0x240bd8=_0xabeb6b;return this[_0x240bd8(0x8ae)]()[_0x240bd8(0x6e8)];},Game_Enemy[_0xabeb6b(0xc8)]['battlerSmoothImage']=function(){const _0x20d065=_0xabeb6b;return this[_0x20d065(0x5dc)]()?VisuMZ['BattleCore'][_0x20d065(0x78f)][_0x20d065(0x2b0)][_0x20d065(0xbdb)]:VisuMZ[_0x20d065(0x553)][_0x20d065(0x78f)]['Enemy']['SmoothImage'];},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x402)]=function(_0x24d084){const _0x191421=_0xabeb6b;Game_Battler[_0x191421(0xc8)]['performAction'][_0x191421(0x378)](this,_0x24d084);if(this[_0x191421(0x5dc)]())this[_0x191421(0x4b1)](_0x24d084);},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0xbd6)]=function(){const _0x1cd055=_0xabeb6b,_0x82cf6=this[_0x1cd055(0x8ae)]()[_0x1cd055(0x449)]||0x0,_0x31c973=$dataSystem[_0x1cd055(0x91d)][_0x82cf6];if(_0x31c973){if(_0x31c973['type']===0x0)this[_0x1cd055(0x67a)](_0x1cd055(0x4d8));else{if(_0x31c973[_0x1cd055(0x2f9)]===0x1)this[_0x1cd055(0x67a)](_0x1cd055(0xd7));else _0x31c973[_0x1cd055(0x2f9)]===0x2&&this[_0x1cd055(0x67a)](_0x1cd055(0x717));}}},Game_Enemy['prototype']['performWeaponAnimation']=function(){const _0x435f33=_0xabeb6b,_0x5e176a=this[_0x435f33(0x8ae)]()[_0x435f33(0x449)]||0x0,_0x5e5941=$dataSystem[_0x435f33(0x91d)][_0x5e176a];_0x5e5941&&this[_0x435f33(0xa0b)](_0x5e5941[_0x435f33(0x49e)]);},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x2f2)]=function(){const _0x14d1c3=_0xabeb6b,_0x2f2392=this['svBattlerData']()[_0x14d1c3(0x449)]||0x0;return $dataSystem[_0x14d1c3(0x91d)][_0x2f2392];},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x39d)]=function(_0x1a3e64){return this['getAttackMotion']();},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x1a5)]=function(){const _0x21bc81=_0xabeb6b;Game_Battler['prototype'][_0x21bc81(0x1a5)][_0x21bc81(0x378)](this),this['isSpriteVisible']()&&this[_0x21bc81(0x5dc)]()&&this[_0x21bc81(0x67a)]('damage'),SoundManager[_0x21bc81(0x201)]();},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x658)]=function(){const _0x4958bc=_0xabeb6b;Game_Battler['prototype'][_0x4958bc(0x658)][_0x4958bc(0x378)](this),this['requestMotion']('evade');},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x1f0)]=function(){const _0x3d698d=_0xabeb6b;Game_Battler[_0x3d698d(0xc8)][_0x3d698d(0x1f0)][_0x3d698d(0x378)](this),this[_0x3d698d(0x67a)](_0x3d698d(0xa02));},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x42f)]=function(){const _0x21625f=_0xabeb6b;Game_Battler[_0x21625f(0xc8)][_0x21625f(0x42f)][_0x21625f(0x378)](this),this[_0x21625f(0xbd6)]();},Game_Enemy['prototype'][_0xabeb6b(0x695)]=function(){const _0x41a7e4=_0xabeb6b;if(this[_0x41a7e4(0x5dc)]()){if(this[_0x41a7e4(0x228)]()>=0x1)return!![];return this[_0x41a7e4(0x8ae)]()[_0x41a7e4(0x310)];}else return!![];},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x3f4)]=function(){const _0x1821ad=_0xabeb6b;return this[_0x1821ad(0x8ae)]()[_0x1821ad(0x454)];},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x8b9)]=function(){const _0x2139b8=_0xabeb6b;return this[_0x2139b8(0x8ae)]()[_0x2139b8(0x59a)];},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x879)]=function(){const _0x5880e2=_0xabeb6b;return this[_0x5880e2(0x8ae)]()[_0x5880e2(0xa42)];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x6f2)]=Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x29e)],Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x29e)]=function(_0xca85d1){const _0x6ceff6=_0xabeb6b;VisuMZ['BattleCore'][_0x6ceff6(0x6f2)]['call'](this,_0xca85d1),this[_0x6ceff6(0x8bf)](),this[_0x6ceff6(0x2b3)]();const _0x1d02e4=this[_0x6ceff6(0x7bb)]();_0x1d02e4&&(_0x1d02e4[_0x6ceff6(0x253)]=undefined,_0x1d02e4[_0x6ceff6(0x2b8)](this));},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x151)]=function(){const _0x57f1e1=_0xabeb6b,_0x403963=VisuMZ['BattleCore'][_0x57f1e1(0x78f)]['Enemy'];this['_nameTempVisibleDuration']=_0x403963['NameDamageVisibility']??0x0;},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x1f1)]=function(){const _0x7a67e7=_0xabeb6b;return this['_nameTempVisibleDuration']&&this[_0x7a67e7(0xaf2)]>0x0;},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0xafc)]=function(){const _0x4c733b=_0xabeb6b;this[_0x4c733b(0xaf2)]&&this['_nameTempVisibleDuration']>0x0&&this[_0x4c733b(0xaf2)]--;},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x5da)]=function(){this['_nameTempVisibleDuration']=0x0;},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x9dd)]=function(){const _0x2ab36d=_0xabeb6b;this[_0x2ab36d(0x16b)]();const _0x549a84=this['enemy']()[_0x2ab36d(0x6f8)]||'';if(_0x549a84[_0x2ab36d(0xef)](/<ASPECT NAME:[ ](.*)>/i)){const _0x2c9ac8=String(RegExp['$1']);this['getAspectData']()[_0x2ab36d(0x6e8)]=_0x2c9ac8[_0x2ab36d(0x782)](this[_0x2ab36d(0xa53)]());}_0x549a84[_0x2ab36d(0xef)](/<ASPECT ICON:[ ](\d+)>/i)&&(this[_0x2ab36d(0x5c7)]()[_0x2ab36d(0xf7)]=Number(RegExp['$1'])),_0x549a84['match'](/<ASPECT COLOR:[ ](.*)>/i)&&(this[_0x2ab36d(0x5c7)]()[_0x2ab36d(0x54d)]=String(RegExp['$1'])),_0x549a84['match'](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this[_0x2ab36d(0x5c7)]()[_0x2ab36d(0x84f)]=String(RegExp['$1']));},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x16b)]=function(){const _0x56adba=_0xabeb6b,_0x52c476=VisuMZ[_0x56adba(0x553)][_0x56adba(0x78f)][_0x56adba(0xa08)][_0x56adba(0x867)]??_0x56adba(0xb87);this[_0x56adba(0x1e1)]={'name':_0x52c476[_0x56adba(0x782)](this[_0x56adba(0xa53)]()),'iconIndex':VisuMZ[_0x56adba(0x553)][_0x56adba(0x78f)][_0x56adba(0xa08)][_0x56adba(0x990)]??0x1a,'nameColor':VisuMZ[_0x56adba(0x553)][_0x56adba(0x78f)]['Enemy'][_0x56adba(0x37a)]??'2','description':''};},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x5c7)]=function(){const _0x3fb4bf=_0xabeb6b;if(this[_0x3fb4bf(0x1e1)]===undefined)this[_0x3fb4bf(0x9dd)]();return this[_0x3fb4bf(0x1e1)];},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0xd6)]=function(){const _0x42533b=_0xabeb6b;return(this[_0x42533b(0x5c7)]()[_0x42533b(0x84f)]||'')[_0x42533b(0x93a)]>0x0;},Game_BattlerBase['prototype'][_0xabeb6b(0x9e6)]=function(){const _0x3f5af5=_0xabeb6b;return VisuMZ[_0x3f5af5(0x553)][_0x3f5af5(0x78f)][_0x3f5af5(0x11a)][_0x3f5af5(0x4a4)];},Game_Enemy['prototype'][_0xabeb6b(0x9e6)]=function(){const _0x1acefb=_0xabeb6b,_0x178d43=this[_0x1acefb(0x7d3)]()?this[_0x1acefb(0x7d3)]()[_0x1acefb(0x6f8)]||'':'';if(_0x178d43[_0x1acefb(0xef)](/<POPUP POSITION: HEAD>/i))return _0x1acefb(0xa89);else{if(_0x178d43[_0x1acefb(0xef)](/<POPUP POSITION: CENTER>/i))return'center';else{if(_0x178d43['match'](/<POPUP POSITION: BASE>/i))return _0x1acefb(0x3ce);}}return Game_BattlerBase[_0x1acefb(0xc8)]['damagePopupPosition']['call'](this);},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x721)]=function(){return 0x0;},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x721)]=function(){const _0x5e9164=_0xabeb6b,_0xe438a9=this['enemy']()?this['enemy']()['note']||'':'';if(_0xe438a9[_0x5e9164(0xef)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x5e9164(0xc8)][_0x5e9164(0x721)][_0x5e9164(0x378)](this);},Game_BattlerBase['prototype'][_0xabeb6b(0x50d)]=function(){return 0x0;},Game_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x50d)]=function(){const _0x56b062=_0xabeb6b,_0x20bdac=this[_0x56b062(0x7d3)]()?this[_0x56b062(0x7d3)]()[_0x56b062(0x6f8)]||'':'';if(_0x20bdac[_0x56b062(0xef)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x56b062(0xc8)][_0x56b062(0x50d)][_0x56b062(0x378)](this);},Game_Unit[_0xabeb6b(0xc8)][_0xabeb6b(0x806)]=function(_0x5eff9d){const _0x366440=_0xabeb6b;for(const _0x2c6109 of this[_0x366440(0x85a)]()){if(_0x2c6109)_0x2c6109[_0x366440(0x806)](_0x5eff9d);}},Game_Unit[_0xabeb6b(0xc8)][_0xabeb6b(0xad4)]=function(){const _0x58a4e9=_0xabeb6b,_0x160b61=this[_0x58a4e9(0x120)]();return _0x160b61[Math[_0x58a4e9(0xb4f)](_0x160b61[_0x58a4e9(0x93a)])];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xdf)]=Game_Party[_0xabeb6b(0xc8)][_0xabeb6b(0x557)],Game_Party[_0xabeb6b(0xc8)][_0xabeb6b(0x557)]=function(_0x11ee1c){const _0x596173=_0xabeb6b;VisuMZ['BattleCore'][_0x596173(0xdf)][_0x596173(0x378)](this,_0x11ee1c),BattleManager[_0x596173(0x3ec)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x507)]=Game_Party['prototype'][_0xabeb6b(0x810)],Game_Party[_0xabeb6b(0xc8)][_0xabeb6b(0x810)]=function(_0x2417d2){const _0x9ecfa2=_0xabeb6b;VisuMZ[_0x9ecfa2(0x553)][_0x9ecfa2(0x507)][_0x9ecfa2(0x378)](this,_0x2417d2),BattleManager[_0x9ecfa2(0x3ec)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x40b)]=Game_Troop[_0xabeb6b(0xc8)][_0xabeb6b(0x3a5)],Game_Troop['prototype'][_0xabeb6b(0x3a5)]=function(_0x112aa5){const _0x33f555=_0xabeb6b;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x33f555(0x913)](_0x112aa5),VisuMZ[_0x33f555(0x553)][_0x33f555(0x40b)]['call'](this,_0x112aa5),this[_0x33f555(0x39f)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x954)]=Game_Troop[_0xabeb6b(0xc8)]['expTotal'],Game_Troop[_0xabeb6b(0xc8)][_0xabeb6b(0x77a)]=function(){const _0x3f2cf7=_0xabeb6b;let _0x1c3e49=VisuMZ['BattleCore'][_0x3f2cf7(0x954)][_0x3f2cf7(0x378)](this);return this['expRate']&&(_0x1c3e49*=this[_0x3f2cf7(0x623)]()),Math[_0x3f2cf7(0x534)](_0x1c3e49);},Game_Troop[_0xabeb6b(0xc8)][_0xabeb6b(0x623)]=function(){return 0x1;},Game_Troop[_0xabeb6b(0xc8)][_0xabeb6b(0x39f)]=function(){const _0x3382f3=_0xabeb6b,_0x26f166=DataManager[_0x3382f3(0x5fc)](this['troop']()['id']);if(_0x26f166[_0x3382f3(0xef)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x2a2c54=RegExp['$1']['split'](',')[_0x3382f3(0x614)](_0x34c5ee=>Number(_0x34c5ee));this[_0x3382f3(0x6d2)](),this[_0x3382f3(0xb2b)](_0x2a2c54);}},Game_Troop['prototype'][_0xabeb6b(0x6d2)]=function(){const _0x41734d=_0xabeb6b;let _0x4092e7=_0x41734d(0x702)+'\x0a';_0x4092e7+=_0x41734d(0xb74),Imported[_0x41734d(0x126)]&&(VisuMZ[_0x41734d(0xb54)][_0x41734d(0x729)]<1.11&&(alert(_0x4092e7[_0x41734d(0x782)](_0x41734d(0x186))),SceneManager[_0x41734d(0x9d8)]())),Imported[_0x41734d(0x985)]&&(VisuMZ[_0x41734d(0x3cd)]['version']<1.19&&(alert(_0x4092e7[_0x41734d(0x782)](_0x41734d(0x5aa))),SceneManager[_0x41734d(0x9d8)]())),Imported[_0x41734d(0x3b4)]&&(VisuMZ['BattleSystemSTB'][_0x41734d(0x729)]<1.15&&(alert(_0x4092e7[_0x41734d(0x782)]('STB')),SceneManager['exit']()));},Game_Troop[_0xabeb6b(0xc8)][_0xabeb6b(0xb2b)]=function(_0x483e5e){const _0x2dc317=_0xabeb6b;this[_0x2dc317(0x32d)]={};for(const _0xcf0680 of this[_0x2dc317(0x85a)]()){if(!_0xcf0680)continue;_0xcf0680[_0x2dc317(0xa20)]('');}for(const _0x230260 of _0x483e5e){const _0x2c014b=$dataTroops[_0x230260];if(_0x2c014b)this[_0x2dc317(0x503)](_0x2c014b);}this[_0x2dc317(0x528)]();},Game_Troop['prototype'][_0xabeb6b(0x503)]=function(_0x234aa9){const _0x2ed86b=_0xabeb6b;for(const _0x56fde7 of _0x234aa9[_0x2ed86b(0x85a)]){if($dataEnemies[_0x56fde7[_0x2ed86b(0x2e1)]]){const _0x1e82ea=_0x56fde7[_0x2ed86b(0x2e1)],_0x1b1008=_0x56fde7['x'],_0x5084c8=_0x56fde7['y'],_0x2ffe70=new Game_Enemy(_0x1e82ea,_0x1b1008,_0x5084c8);_0x56fde7[_0x2ed86b(0x140)]&&_0x2ffe70['hide'](),this[_0x2ed86b(0x680)][_0x2ed86b(0x5cb)](_0x2ffe70);}}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x209)]=Game_Map[_0xabeb6b(0xc8)]['setupBattleback'],Game_Map[_0xabeb6b(0xc8)][_0xabeb6b(0x6e2)]=function(){VisuMZ['BattleCore']['Game_Map_setupBattleback']['call'](this),this['setupBattlebackBattleCore']();},Game_Map[_0xabeb6b(0xc8)][_0xabeb6b(0x9ed)]=function(){const _0x459264=_0xabeb6b;this[_0x459264(0x491)]={},this[_0x459264(0x640)]={};if(!$dataMap)return;const _0x2188dc=$dataMap['note'];if(!_0x2188dc)return;const _0x1fa4ec=_0x2188dc['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x1fa4ec)for(const _0xdd38a of _0x1fa4ec){_0xdd38a[_0x459264(0xef)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x249f69=Number(RegExp['$1']),_0x1fa473=Number(RegExp['$2']),_0x1a603e=_0x1fa473===0x1?this['_regionBattleback1']:this['_regionBattleback2'],_0x2bf67d=String(RegExp['$3']);_0x1a603e[_0x249f69]=_0x2bf67d;}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xa79)]=Game_Map[_0xabeb6b(0xc8)][_0xabeb6b(0x4d2)],Game_Map['prototype'][_0xabeb6b(0x4d2)]=function(){const _0x1fbbf4=_0xabeb6b;if(!BattleManager[_0x1fbbf4(0x31e)]()){const _0x52acb3=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x1fbbf4(0x491)]&&this['_regionBattleback1'][_0x52acb3])return this[_0x1fbbf4(0x491)][_0x52acb3];}return VisuMZ[_0x1fbbf4(0x553)][_0x1fbbf4(0xa79)][_0x1fbbf4(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x51f)]=Game_Map[_0xabeb6b(0xc8)][_0xabeb6b(0x43a)],Game_Map[_0xabeb6b(0xc8)][_0xabeb6b(0x43a)]=function(){const _0x1b0e52=_0xabeb6b;if(!BattleManager[_0x1b0e52(0x31e)]()){const _0x283afd=$gamePlayer[_0x1b0e52(0xb59)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x1b0e52(0x640)][_0x283afd])return this[_0x1b0e52(0x640)][_0x283afd];}return VisuMZ[_0x1b0e52(0x553)][_0x1b0e52(0x51f)][_0x1b0e52(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x2af)]=Game_Map[_0xabeb6b(0xc8)][_0xabeb6b(0x537)],Game_Map[_0xabeb6b(0xc8)][_0xabeb6b(0x537)]=function(){const _0x3ef8ba=_0xabeb6b;let _0x4c2576=JsonEx['makeDeepCopy'](VisuMZ['BattleCore']['Game_Map_encounterList'][_0x3ef8ba(0x378)](this));return VisuMZ[_0x3ef8ba(0x553)][_0x3ef8ba(0x7d2)](_0x4c2576);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x7d2)]=function(_0xe79600){const _0x58d523=_0xabeb6b;var _0x5a70e6,_0x298c5e,_0x40d89d;for(_0x40d89d=_0xe79600[_0x58d523(0x93a)]-0x1;_0x40d89d>0x0;_0x40d89d--){_0x5a70e6=Math[_0x58d523(0x108)](Math[_0x58d523(0x17c)]()*(_0x40d89d+0x1)),_0x298c5e=_0xe79600[_0x40d89d],_0xe79600[_0x40d89d]=_0xe79600[_0x5a70e6],_0xe79600[_0x5a70e6]=_0x298c5e;}return _0xe79600;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x50b)]=Game_Interpreter[_0xabeb6b(0xc8)]['command357'],Game_Interpreter[_0xabeb6b(0xc8)][_0xabeb6b(0x6c8)]=function(_0x3a06b0){const _0x1a95d9=_0xabeb6b;return $gameTemp[_0x1a95d9(0x953)](this),VisuMZ[_0x1a95d9(0x553)][_0x1a95d9(0x50b)]['call'](this,_0x3a06b0);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x231)]=Game_Interpreter[_0xabeb6b(0xc8)]['updateWaitMode'],Game_Interpreter['prototype'][_0xabeb6b(0x800)]=function(){const _0x3db75a=_0xabeb6b;if(SceneManager[_0x3db75a(0x87a)]())switch(this[_0x3db75a(0x117)]){case _0x3db75a(0x568):if(Imported[_0x3db75a(0x510)]){if($gameScreen[_0x3db75a(0x515)]()['angleDuration']>0x0)return!![];this[_0x3db75a(0x117)]='';}break;case'battleAnimation':if(BattleManager['_spriteset'][_0x3db75a(0x7e2)]())return!![];this[_0x3db75a(0x117)]='';break;case _0x3db75a(0x836):if(BattleManager[_0x3db75a(0x754)][_0x3db75a(0x3a0)]())return!![];this[_0x3db75a(0x117)]='';break;case'battleCamera':if(Imported[_0x3db75a(0x510)]){if($gameScreen[_0x3db75a(0x515)]()['cameraDuration']>0x0)return!![];if($gameScreen[_0x3db75a(0x515)]()[_0x3db75a(0x364)]>0x0)return!![];this[_0x3db75a(0x117)]='';}break;case _0x3db75a(0x51e):if(BattleManager[_0x3db75a(0x754)][_0x3db75a(0xaa8)]())return!![];this[_0x3db75a(0x117)]='';break;case _0x3db75a(0xf2):if(BattleManager[_0x3db75a(0x754)]['isAnyoneFloating']())return!![];this[_0x3db75a(0x117)]='';break;case'battleJump':if(BattleManager[_0x3db75a(0x754)]['isAnyoneJumping']())return!![];this[_0x3db75a(0x117)]='';break;case _0x3db75a(0x555):if(BattleManager[_0x3db75a(0x6c2)][_0x3db75a(0xbdd)]())return!![];this[_0x3db75a(0x117)]='';break;case _0x3db75a(0x66f):if(BattleManager[_0x3db75a(0x754)][_0x3db75a(0x79e)]())return!![];this[_0x3db75a(0x117)]='';break;case'battleOpacity':if(BattleManager[_0x3db75a(0x754)][_0x3db75a(0x853)]())return!![];this[_0x3db75a(0x117)]='';break;case _0x3db75a(0x158):if(BattleManager['_spriteset']['isAnyoneGrowing']())return!![];this[_0x3db75a(0x117)]='';break;case _0x3db75a(0x845):if(BattleManager['_spriteset'][_0x3db75a(0x47f)]())return!![];this[_0x3db75a(0x117)]='';break;case _0x3db75a(0x9fc):if(Imported[_0x3db75a(0x257)]){if(BattleManager['_spriteset'][_0x3db75a(0x7b5)]())return!![];this[_0x3db75a(0x117)]='';}break;case'battleSkew':if(Imported[_0x3db75a(0x510)]){if($gameScreen[_0x3db75a(0x515)]()[_0x3db75a(0x982)]>0x0)return!![];this[_0x3db75a(0x117)]='';}break;case _0x3db75a(0xb95):if(BattleManager[_0x3db75a(0x754)][_0x3db75a(0x5f7)]())return!![];this[_0x3db75a(0x117)]='';break;case'battleZoom':if(Imported[_0x3db75a(0x510)]){if($gameScreen[_0x3db75a(0x515)]()['zoomDuration']>0x0)return!![];this[_0x3db75a(0x117)]='';}break;case _0x3db75a(0x6cf):if(Imported[_0x3db75a(0xab5)]){if(BattleManager['_spriteset'][_0x3db75a(0x443)]){if(BattleManager[_0x3db75a(0x754)][_0x3db75a(0x443)]())return!![];this[_0x3db75a(0x117)]='battleInjectAni';}else this[_0x3db75a(0x117)]='';break;}break;case _0x3db75a(0x731):if(Imported[_0x3db75a(0xab5)]){if(BattleManager[_0x3db75a(0x754)]['isAnyoneInjectAnimating']())return!![];this[_0x3db75a(0x117)]='';}break;}return VisuMZ['BattleCore'][_0x3db75a(0x231)][_0x3db75a(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x95a)]=Game_Interpreter[_0xabeb6b(0xc8)][_0xabeb6b(0x947)],Game_Interpreter[_0xabeb6b(0xc8)]['command301']=function(_0x5c1bd8){const _0x273b68=_0xabeb6b;return!$gameParty['inBattle']()?this[_0x273b68(0x9ef)](_0x5c1bd8):VisuMZ[_0x273b68(0x553)][_0x273b68(0x95a)][_0x273b68(0x378)](this,_0x5c1bd8);},Game_Interpreter[_0xabeb6b(0xc8)][_0xabeb6b(0x3d6)]=function(_0xd02c04){const _0x443a74=_0xabeb6b;return VisuMZ['BattleCore'][_0x443a74(0x95a)][_0x443a74(0x378)](this,_0xd02c04),BattleManager[_0x443a74(0xd5)](_0xfc3c01=>{const _0x32405c=_0x443a74;this[_0x32405c(0x682)][this[_0x32405c(0xd4)]]=_0xfc3c01;}),!![];},VisuMZ['BattleCore'][_0xabeb6b(0x827)]=function(_0xe4a8d){const _0x21f642=_0xabeb6b,_0x478796=$dataCommonEvents[_0xe4a8d];if(!_0x478796)return![];if(_0x478796[_0x21f642(0x907)][_0x21f642(0x93a)]<=0x1)return![];return!![];},Game_Interpreter['prototype']['command301_PreBattleEvent']=function(_0x5a25fc){const _0x5eb36d=_0xabeb6b,_0x303b4a=VisuMZ[_0x5eb36d(0x553)][_0x5eb36d(0x78f)][_0x5eb36d(0xf3)],_0x156cb2=_0x303b4a[_0x5eb36d(0x50e)],_0x32c7f0=$dataCommonEvents[_0x156cb2];if(_0x32c7f0&&VisuMZ['BattleCore'][_0x5eb36d(0x827)](_0x156cb2)){const _0xaafc70=this[_0x5eb36d(0x636)]()?this[_0x5eb36d(0x69d)]:0x0,_0x42acff=_0x32c7f0['list'];this[_0x5eb36d(0xa88)](_0x42acff,_0xaafc70),this[_0x5eb36d(0xac2)]=JsonEx['makeDeepCopy'](this['_list']);const _0x5acb13={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx['makeDeepCopy'](_0x5a25fc)};return this[_0x5eb36d(0xac2)][_0x5eb36d(0x656)](this[_0x5eb36d(0x25b)]+0x1,0x0,_0x5acb13),!![];}else return VisuMZ[_0x5eb36d(0x553)]['Game_Interpreter_command301'][_0x5eb36d(0x378)](this,_0x5a25fc);},VisuMZ['BattleCore'][_0xabeb6b(0x42e)]=BattleManager[_0xabeb6b(0x1ed)],BattleManager[_0xabeb6b(0x1ed)]=function(){const _0x22482b=_0xabeb6b;VisuMZ['BattleCore'][_0x22482b(0x42e)]['call'](this),this[_0x22482b(0x30a)]();},BattleManager[_0xabeb6b(0x30a)]=function(){const _0x47e9af=_0xabeb6b,_0x5cab68=VisuMZ['BattleCore']['Settings'][_0x47e9af(0xf3)],_0x53d351=_0x5cab68['BattleStartEvent'];_0x53d351&&VisuMZ[_0x47e9af(0x553)][_0x47e9af(0x827)](_0x53d351)&&(this[_0x47e9af(0x9af)]=!![],$gameTemp[_0x47e9af(0x5f1)](_0x5cab68[_0x47e9af(0x50e)]),$gameMap[_0x47e9af(0x903)](),$gameMap[_0x47e9af(0x290)]['_preBattleCommonEvent']=!![]),_0x5cab68[_0x47e9af(0xa55)]>0x0&&(this['_canLose']=!![]);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x1cb)]=Scene_Map[_0xabeb6b(0xc8)][_0xabeb6b(0x6ef)],Scene_Map['prototype'][_0xabeb6b(0x6ef)]=function(){const _0x2d33b1=_0xabeb6b;if(BattleManager['_battleCoreBattleStartEvent'])return;VisuMZ[_0x2d33b1(0x553)][_0x2d33b1(0x1cb)][_0x2d33b1(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x7b2)]=Scene_Map['prototype'][_0xabeb6b(0x3e1)],Scene_Map[_0xabeb6b(0xc8)][_0xabeb6b(0x3e1)]=function(){const _0x125efe=_0xabeb6b;BattleManager[_0x125efe(0x9af)]?this[_0x125efe(0x343)]():VisuMZ[_0x125efe(0x553)][_0x125efe(0x7b2)][_0x125efe(0x378)](this);},Scene_Map['prototype']['battleCorePreBattleCommonEvent']=function(){const _0x411644=_0xabeb6b;this[_0x411644(0x4ed)]=!![];},VisuMZ[_0xabeb6b(0x553)]['SceneManager_isSceneChanging']=SceneManager[_0xabeb6b(0x912)],SceneManager[_0xabeb6b(0x912)]=function(){const _0x1b177e=_0xabeb6b;if(BattleManager[_0x1b177e(0x9af)])return![];return VisuMZ[_0x1b177e(0x553)]['SceneManager_isSceneChanging'][_0x1b177e(0x378)](this);},VisuMZ['BattleCore'][_0xabeb6b(0xb18)]=Game_Interpreter['prototype'][_0xabeb6b(0xa6e)],Game_Interpreter['prototype'][_0xabeb6b(0xa6e)]=function(){const _0x1d5b7d=_0xabeb6b;VisuMZ[_0x1d5b7d(0x553)][_0x1d5b7d(0xb18)][_0x1d5b7d(0x378)](this),this[_0x1d5b7d(0x361)]&&(this[_0x1d5b7d(0x361)]=undefined,SceneManager[_0x1d5b7d(0x483)][_0x1d5b7d(0x548)]());},Scene_Map[_0xabeb6b(0xc8)][_0xabeb6b(0x548)]=function(){const _0xa7f865=_0xabeb6b;BattleManager[_0xa7f865(0x9af)]=undefined,BattleManager[_0xa7f865(0x9d3)]=!![],this[_0xa7f865(0xb89)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xfb)]=Scene_Map[_0xabeb6b(0xc8)]['initialize'],Scene_Map[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)]=function(){const _0x1bd43d=_0xabeb6b;VisuMZ[_0x1bd43d(0x553)][_0x1bd43d(0xfb)][_0x1bd43d(0x378)](this),BattleManager['_battleCoreBattleResumeAfter']&&(this[_0x1bd43d(0x4ed)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xb22)]=Scene_Map['prototype'][_0xabeb6b(0x8ea)],Scene_Map[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)]=function(){const _0x48c767=_0xabeb6b;VisuMZ['BattleCore'][_0x48c767(0xb22)]['call'](this),$gameTemp['clearForcedGameTroopSettingsBattleCore']();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xba6)]=Scene_ItemBase[_0xabeb6b(0xc8)][_0xabeb6b(0x25f)],Scene_ItemBase[_0xabeb6b(0xc8)]['applyItem']=function(){const _0x27f65e=_0xabeb6b;VisuMZ['BattleCore'][_0x27f65e(0xba6)]['call'](this);if(this['item']()['note']['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x27f65e(0xb39)]()[_0x27f65e(0x6f8)][_0x27f65e(0xef)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x27f65e(0x847)]=[]),DataManager[_0x27f65e(0x824)](this[_0x27f65e(0xb39)]())&&($gameTemp[_0x27f65e(0x847)]=[]);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x5a3)]=Scene_Options['prototype'][_0xabeb6b(0x176)],Scene_Options[_0xabeb6b(0xc8)][_0xabeb6b(0x176)]=function(){const _0x5adbfc=_0xabeb6b;let _0x43ca43=VisuMZ['BattleCore']['Scene_Options_maxCommands'][_0x5adbfc(0x378)](this);const _0x47b506=VisuMZ[_0x5adbfc(0x553)][_0x5adbfc(0x78f)];if(_0x47b506['AutoBattle'][_0x5adbfc(0xb3c)]&&_0x47b506['AutoBattle'][_0x5adbfc(0x4b9)])_0x43ca43+=0x2;if(_0x47b506[_0x5adbfc(0x2f4)][_0x5adbfc(0xb3c)]&&_0x47b506['HpGauge']['AdjustRect'])_0x43ca43+=0x1;return _0x43ca43;},VisuMZ[_0xabeb6b(0x553)]['Scene_Battle_initialize']=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)],Scene_Battle[_0xabeb6b(0xc8)]['initialize']=function(){const _0x2d74de=_0xabeb6b;VisuMZ[_0x2d74de(0x553)]['Scene_Battle_initialize'][_0x2d74de(0x378)](this),this[_0x2d74de(0x12b)]();},VisuMZ['BattleCore'][_0xabeb6b(0x3db)]=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x97d)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x97d)]=function(){const _0x2f0824=_0xabeb6b;SceneManager['isPreviousSceneBattleTransitionable']()?(Scene_Message[_0x2f0824(0xc8)]['start'][_0x2f0824(0x378)](this),this[_0x2f0824(0x754)]&&this[_0x2f0824(0x754)][_0x2f0824(0x5bc)](),BattleManager[_0x2f0824(0x638)]&&BattleManager[_0x2f0824(0xb5f)]()):(VisuMZ[_0x2f0824(0x553)][_0x2f0824(0x3db)][_0x2f0824(0x378)](this),$gameTroop['onBattleStartOnceParallels']());},VisuMZ['BattleCore'][_0xabeb6b(0x5e8)]=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xb89)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xb89)]=function(){const _0x380533=_0xabeb6b;SceneManager[_0x380533(0x70b)]()?Scene_Message[_0x380533(0xc8)][_0x380533(0xb89)][_0x380533(0x378)](this):VisuMZ[_0x380533(0x553)][_0x380533(0x5e8)]['call'](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x1b4)]=Scene_Battle['prototype'][_0xabeb6b(0xa6e)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xa6e)]=function(){const _0x3f3216=_0xabeb6b;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x3f3216(0xc8)]['terminate'][_0x3f3216(0x378)](this):VisuMZ[_0x3f3216(0x553)][_0x3f3216(0x1b4)][_0x3f3216(0x378)](this),$gameTemp[_0x3f3216(0x305)](),this[_0x3f3216(0x12b)]();},Scene_Battle['prototype'][_0xabeb6b(0x563)]=function(){const _0x25457c=_0xabeb6b;if(ConfigManager[_0x25457c(0x5ed)]&&ConfigManager[_0x25457c(0x815)]!==undefined)return ConfigManager[_0x25457c(0x815)];else{if(this[_0x25457c(0x3fb)]()===_0x25457c(0x2d0))return![];else{return Scene_Message['prototype'][_0x25457c(0x563)][_0x25457c(0x378)](this);;}}},VisuMZ[_0xabeb6b(0x553)]['Scene_Battle_createCancelButton']=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x7e1)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x7e1)]=function(){const _0x4834cf=_0xabeb6b;VisuMZ[_0x4834cf(0x553)]['Scene_Battle_createCancelButton']['call'](this),this[_0x4834cf(0x3fb)]()===_0x4834cf(0x2d0)&&this[_0x4834cf(0x3aa)]();},Scene_Battle[_0xabeb6b(0xc8)]['setVisibleUI']=function(_0x54bb48){const _0x4a88ab=_0xabeb6b;_0x54bb48?(this['_windowLayer']['x']=(Graphics[_0x4a88ab(0x461)]-Graphics['boxWidth'])/0x2,this['_windowLayer']['y']=(Graphics[_0x4a88ab(0x1ee)]-Graphics[_0x4a88ab(0x588)])/0x2):(this[_0x4a88ab(0x93b)]['x']=Graphics[_0x4a88ab(0x461)]*0xa,this['_windowLayer']['y']=Graphics[_0x4a88ab(0x1ee)]*0xa);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x409)]=Scene_Battle['prototype'][_0xabeb6b(0x3cb)],Scene_Battle['prototype'][_0xabeb6b(0x3cb)]=function(){const _0x82af3c=_0xabeb6b,_0x13a0e9=BattleManager['actor']();VisuMZ['BattleCore'][_0x82af3c(0x409)]['call'](this);if(_0x13a0e9){if(_0x13a0e9===BattleManager[_0x82af3c(0x70a)]())return;if(_0x13a0e9===BattleManager['_subject'])return;if(_0x13a0e9['battler']())_0x13a0e9[_0x82af3c(0x7bb)]()[_0x82af3c(0x84b)]();}},VisuMZ[_0xabeb6b(0x553)]['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x823)],Scene_Battle['prototype'][_0xabeb6b(0x823)]=function(){const _0x255390=_0xabeb6b,_0x12d7e4=BattleManager[_0x255390(0x70a)]();if(_0x12d7e4&&_0x12d7e4[_0x255390(0x7bb)])_0x12d7e4[_0x255390(0x7bb)]()[_0x255390(0x84b)]();VisuMZ[_0x255390(0x553)]['Scene_Battle_selectPreviousCommand'][_0x255390(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x7ec)]=Scene_Battle[_0xabeb6b(0xc8)]['createAllWindows'],Scene_Battle['prototype'][_0xabeb6b(0x226)]=function(){const _0x1f6f19=_0xabeb6b;this[_0x1f6f19(0x55b)](),VisuMZ[_0x1f6f19(0x553)]['Scene_Battle_createAllWindows'][_0x1f6f19(0x378)](this),this[_0x1f6f19(0x730)]();},VisuMZ[_0xabeb6b(0x553)]['Scene_Battle_logWindowRect']=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x610)],Scene_Battle[_0xabeb6b(0xc8)]['logWindowRect']=function(){const _0x4c1642=_0xabeb6b;if(VisuMZ[_0x4c1642(0x553)][_0x4c1642(0x78f)][_0x4c1642(0xabe)]['BattleLogRectJS'])return VisuMZ[_0x4c1642(0x553)][_0x4c1642(0x78f)][_0x4c1642(0xabe)]['BattleLogRectJS']['call'](this);return VisuMZ[_0x4c1642(0x553)][_0x4c1642(0xaf0)][_0x4c1642(0x378)](this);},VisuMZ['BattleCore'][_0xabeb6b(0x190)]=Scene_Battle['prototype']['createPartyCommandWindow'],Scene_Battle['prototype'][_0xabeb6b(0x565)]=function(){const _0x1236a4=_0xabeb6b;VisuMZ[_0x1236a4(0x553)][_0x1236a4(0x190)][_0x1236a4(0x378)](this),this[_0x1236a4(0x596)]();},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x596)]=function(){const _0x1a2a63=_0xabeb6b,_0x2d2cfc=this[_0x1a2a63(0x3bf)];_0x2d2cfc[_0x1a2a63(0x6c6)](_0x1a2a63(0xca),this[_0x1a2a63(0x7ed)][_0x1a2a63(0xa39)](this)),_0x2d2cfc['setHandler'](_0x1a2a63(0xaff),this[_0x1a2a63(0x6a5)][_0x1a2a63(0xa39)](this));const _0x11734c=this[_0x1a2a63(0x3fb)]();switch(_0x11734c){case'xp':case _0x1a2a63(0x62b):return this[_0x1a2a63(0x3bf)][_0x1a2a63(0x1a1)](0x1);break;}},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x7ed)]=function(){const _0x17025b=_0xabeb6b;BattleManager['_autoBattle']=!![],$gameParty['makeActions'](),this[_0x17025b(0x3cb)](),BattleManager['isTpb']()&&(BattleManager[_0x17025b(0x681)]=![]);},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x6a5)]=function(){const _0x7f4bd6=_0xabeb6b;this[_0x7f4bd6(0x7e4)]()?(this[_0x7f4bd6(0x492)]=!![],this[_0x7f4bd6(0x6c2)]['push']('addText',VisuMZ[_0x7f4bd6(0x553)][_0x7f4bd6(0x78f)][_0x7f4bd6(0x153)]['ActiveTpbOptionsMessage'])):this['callOptions']();},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x7e4)]=function(){const _0x19c45b=_0xabeb6b;return BattleManager[_0x19c45b(0xb6c)]();},Scene_Battle['prototype']['callOptions']=function(){const _0x47c469=_0xabeb6b;this[_0x47c469(0x492)]=![],this[_0x47c469(0x754)][_0x47c469(0x5bc)](),this['_windowLayer'][_0x47c469(0xbc2)]=![];if(BattleManager[_0x47c469(0x31e)]())($dataSystem[_0x47c469(0x4d2)]||$dataSystem[_0x47c469(0x43a)])&&SceneManager[_0x47c469(0x88d)]();else($gameMap[_0x47c469(0x4d2)]()||$gameMap[_0x47c469(0x43a)]())&&SceneManager['snapForBackground']();SceneManager[_0x47c469(0x5cb)](Scene_Options),BattleManager['isTpb']()&&(BattleManager[_0x47c469(0x638)]=BattleManager[_0x47c469(0x70a)]());},VisuMZ[_0xabeb6b(0x553)]['Scene_Battle_updateBattleProcess']=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xaf3)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xaf3)]=function(){const _0x163899=_0xabeb6b;VisuMZ[_0x163899(0x553)]['Scene_Battle_updateBattleProcess'][_0x163899(0x378)](this);if(this[_0x163899(0x492)]&&!BattleManager[_0x163899(0x4ee)])this[_0x163899(0x4c0)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xc9)]=Scene_Battle[_0xabeb6b(0xc8)]['update'],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x5bc)]=function(){const _0x400cc3=_0xabeb6b;VisuMZ[_0x400cc3(0x553)][_0x400cc3(0xc9)][_0x400cc3(0x378)](this),this[_0x400cc3(0x288)]();},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x730)]=function(){const _0x1100a6=_0xabeb6b,_0x2fa168=this[_0x1100a6(0xb4c)]();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x2fa168),this['_autoBattleWindow'][_0x1100a6(0x855)](),this[_0x1100a6(0x8d3)](this[_0x1100a6(0x4b0)]);},Scene_Battle[_0xabeb6b(0xc8)]['autoBattleWindowRect']=function(){const _0x5acf9b=_0xabeb6b;return VisuMZ['BattleCore']['Settings'][_0x5acf9b(0xb92)][_0x5acf9b(0x9c9)][_0x5acf9b(0x378)](this);},Scene_Battle[_0xabeb6b(0xc8)]['clearOnceParallelInterpreters']=function(){const _0x3284b5=_0xabeb6b;this[_0x3284b5(0x7c3)]=[];},Scene_Battle['prototype'][_0xabeb6b(0x288)]=function(){const _0x4e2b35=_0xabeb6b;if(!this['_onceParallelInterpreters'])return;for(const _0x243600 of this[_0x4e2b35(0x7c3)]){_0x243600&&_0x243600[_0x4e2b35(0x5bc)]();}},Scene_Battle[_0xabeb6b(0xc8)]['playOnceParallelInterpreter']=function(_0xf159d2){const _0x4f2c38=$dataCommonEvents[_0xf159d2];if(!_0x4f2c38)return;const _0x46434d=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x46434d),_0x46434d['setCommonEvent'](_0xf159d2);},Scene_Battle['prototype'][_0xabeb6b(0x5e4)]=function(_0x31fb6b){const _0x3ced7c=_0xabeb6b;this[_0x3ced7c(0x7c3)]=this[_0x3ced7c(0x7c3)]||[],this[_0x3ced7c(0x7c3)][_0x3ced7c(0x5cb)](_0x31fb6b);},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x177)]=function(_0x2be85e){const _0x244033=_0xabeb6b;this[_0x244033(0x7c3)]=this[_0x244033(0x7c3)]||[],this[_0x244033(0x7c3)][_0x244033(0x858)](_0x2be85e);},Game_Troop['prototype'][_0xabeb6b(0x2f0)]=function(){const _0xa702b9=_0xabeb6b;for(const _0x545c68 of this[_0xa702b9(0xa75)]()[_0xa702b9(0xf1)]){if(!this[_0xa702b9(0x724)](_0x545c68))continue;SceneManager[_0xa702b9(0x483)][_0xa702b9(0x5de)](_0x545c68);}},Game_Troop[_0xabeb6b(0xc8)][_0xabeb6b(0x724)]=function(_0x8635ca){const _0x43786e=_0xabeb6b;if(!_0x8635ca)return;for(const _0x15ada9 of _0x8635ca[_0x43786e(0x907)]){if([0x6c,0x198][_0x43786e(0x5d8)](_0x15ada9[_0x43786e(0xb65)])){const _0x336ef2=_0x15ada9[_0x43786e(0x631)][0x0];if(_0x336ef2[_0x43786e(0xef)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle['prototype'][_0xabeb6b(0x5de)]=function(_0x2469a3){const _0x22db04=_0xabeb6b;if(!_0x2469a3)return;const _0x417f81=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x417f81),_0x417f81[_0x22db04(0x1ad)](_0x2469a3);};function Game_BattleOnceParallelInterpreter(){const _0x498cc8=_0xabeb6b;this[_0x498cc8(0x8ea)](...arguments);}Game_BattleOnceParallelInterpreter[_0xabeb6b(0xc8)]=Object['create'](Game_Interpreter[_0xabeb6b(0xc8)]),Game_BattleOnceParallelInterpreter[_0xabeb6b(0xc8)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype']['setCommonEvent']=function(_0x31227d){const _0x57d5be=_0xabeb6b,_0x3a7211=$dataCommonEvents[_0x31227d];_0x3a7211?this[_0x57d5be(0x3a5)](_0x3a7211['list'],0x0):this['terminate']();},Game_BattleOnceParallelInterpreter['prototype'][_0xabeb6b(0xa6e)]=function(){const _0x167d1a=_0xabeb6b;if(!SceneManager[_0x167d1a(0x87a)]())return;SceneManager[_0x167d1a(0x483)][_0x167d1a(0x177)](this),Game_Interpreter[_0x167d1a(0xc8)]['terminate'][_0x167d1a(0x378)](this);},Game_BattleOnceParallelInterpreter['prototype'][_0xabeb6b(0x1ad)]=function(_0x51570b){const _0x57dc10=_0xabeb6b;_0x51570b?this[_0x57dc10(0x3a5)](_0x51570b[_0x57dc10(0x907)],0x0):this[_0x57dc10(0xa6e)]();},Scene_Battle[_0xabeb6b(0xc8)]['isPartyCommandWindowDisabled']=function(){const _0x589f17=_0xabeb6b;return VisuMZ[_0x589f17(0x553)][_0x589f17(0x78f)]['PartyCmd']['DisablePartyCmd'];},VisuMZ['BattleCore'][_0xabeb6b(0x4cf)]=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xbb2)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xbb2)]=function(){const _0x28390a=_0xabeb6b;this[_0x28390a(0xa5c)]()?this[_0x28390a(0x7ee)]():VisuMZ[_0x28390a(0x553)][_0x28390a(0x4cf)][_0x28390a(0x378)](this);},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x7ee)]=function(){const _0x31c6cb=_0xabeb6b;if(BattleManager[_0x31c6cb(0x33d)]())this[_0x31c6cb(0x3cb)]();else BattleManager[_0x31c6cb(0x4a3)]()&&VisuMZ[_0x31c6cb(0x553)][_0x31c6cb(0x4cf)][_0x31c6cb(0x378)](this);},VisuMZ['BattleCore'][_0xabeb6b(0x148)]=Scene_Battle['prototype'][_0xabeb6b(0x8de)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x8de)]=function(){const _0x472625=_0xabeb6b;BattleManager['isTpb']()?(this['tpbCommandFight'](),this[_0x472625(0x715)]()):VisuMZ['BattleCore'][_0x472625(0x148)][_0x472625(0x378)](this);},Scene_Battle[_0xabeb6b(0xc8)]['tpbCommandFight']=function(){const _0x25dadc=_0xabeb6b;if(!VisuMZ[_0x25dadc(0x553)]['TpbActiveChangeEnabled'])return;if(Imported[_0x25dadc(0x985)]&&BattleManager[_0x25dadc(0x525)]())return;const _0xa2f6a0=$gameParty[_0x25dadc(0x120)]()[_0x25dadc(0x959)](_0x31eef9=>_0x31eef9['isTpbCharged']()&&_0x31eef9['canInput']());BattleManager[_0x25dadc(0x2ad)]=_0xa2f6a0[0x0]||null,BattleManager[_0x25dadc(0x2ad)]&&BattleManager[_0x25dadc(0x2ad)][_0x25dadc(0x7f7)]('inputting');},VisuMZ['BattleCore']['Scene_Battle_commandEscape']=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x3c1)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x3c1)]=function(){const _0x17dee0=_0xabeb6b;VisuMZ[_0x17dee0(0x553)][_0x17dee0(0x5f2)]['call'](this);if(!BattleManager[_0x17dee0(0x4a3)]())BattleManager['_currentActor']=null;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xb68)]=Scene_Battle['prototype']['createActorCommandWindow'],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x39b)]=function(){const _0x908ae0=_0xabeb6b;VisuMZ[_0x908ae0(0x553)][_0x908ae0(0xb68)][_0x908ae0(0x378)](this),this['createActorCommandWindowBattleCore']();},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x9fe)]=function(){const _0x3347a7=_0xabeb6b,_0x3e457e=this[_0x3347a7(0x637)];_0x3e457e[_0x3347a7(0x6c6)]('escape',this['actorCommandEscape'][_0x3347a7(0xa39)](this)),_0x3e457e[_0x3347a7(0x6c6)](_0x3347a7(0xca),this['actorCommandAutoBattle'][_0x3347a7(0xa39)](this)),_0x3e457e[_0x3347a7(0x6c6)](_0x3347a7(0xad6),this[_0x3347a7(0x546)][_0x3347a7(0xa39)](this)),BattleManager[_0x3347a7(0x4a3)]()&&(this[_0x3347a7(0xa5c)]()?delete _0x3e457e[_0x3347a7(0x477)][_0x3347a7(0xbb5)]:_0x3e457e['setHandler'](_0x3347a7(0xbb5),this[_0x3347a7(0x929)][_0x3347a7(0xa39)](this)));},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x36b)]=function(){const _0x50713d=_0xabeb6b;this[_0x50713d(0x3c1)]();},Scene_Battle['prototype']['actorCommandAutoBattle']=function(){const _0x413a77=_0xabeb6b;BattleManager[_0x413a77(0x70a)]()[_0x413a77(0x35b)](),BattleManager[_0x413a77(0xbe0)](),BattleManager['selectNextActor'](),this[_0x413a77(0x6a1)]();},Scene_Battle[_0xabeb6b(0xc8)]['actorCommandSingleSkill']=function(){const _0x544773=_0xabeb6b,_0x301c33=BattleManager['inputtingAction'](),_0x46849b=this[_0x544773(0x637)][_0x544773(0x5d6)]();_0x301c33[_0x544773(0x61a)](_0x46849b),BattleManager[_0x544773(0x70a)]()[_0x544773(0x467)]($dataSkills[_0x46849b]),this[_0x544773(0x9f1)]();},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x929)]=function(){const _0xed79d9=_0xabeb6b;this[_0xed79d9(0x96f)]()?this[_0xed79d9(0x345)]():this[_0xed79d9(0x527)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x62a)]=![],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x96f)]=function(){const _0x3dc2a5=_0xabeb6b;if(Imported[_0x3dc2a5(0x985)]&&BattleManager[_0x3dc2a5(0x525)]())return![];else{if(!VisuMZ['BattleCore'][_0x3dc2a5(0x62a)])return![];const _0x255a9c=$gameParty[_0x3dc2a5(0x120)]()[_0x3dc2a5(0x959)](_0x3f9a95=>_0x3f9a95[_0x3dc2a5(0x585)]()&&_0x3f9a95[_0x3dc2a5(0xb31)]());return _0x255a9c[_0x3dc2a5(0x93a)]>0x0&&BattleManager[_0x3dc2a5(0x70a)]()!==_0x255a9c[_0x255a9c[_0x3dc2a5(0x93a)]-0x1];}},Scene_Battle[_0xabeb6b(0xc8)]['performTpbActiveCheckSwitch']=function(){const _0xcbaf74=_0xabeb6b,_0x13a529=BattleManager[_0xcbaf74(0x70a)](),_0x474a65=_0x13a529['battler']();if(_0x474a65)_0x474a65[_0xcbaf74(0x84b)]();const _0x33bc11=$gameParty['aliveMembers']()[_0xcbaf74(0x959)](_0x34113c=>_0x34113c[_0xcbaf74(0x585)]()&&_0x34113c[_0xcbaf74(0xb31)]()),_0x4f4ffa=_0x33bc11['indexOf'](_0x13a529),_0x2e8834=_0x33bc11[_0x4f4ffa+0x1];BattleManager[_0xcbaf74(0x2ad)]=_0x2e8834||null;if(_0x2e8834)_0x2e8834[_0xcbaf74(0x7f7)](_0xcbaf74(0x46d));_0x13a529['setActionState'](_0xcbaf74(0xb08)),this['changeInputWindow']();},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x527)]=function(){const _0xa06261=_0xabeb6b;this[_0xa06261(0x3bf)][_0xa06261(0x3a5)](),this[_0xa06261(0x637)][_0xa06261(0xaba)]();if(!VisuMZ['BattleCore'][_0xa06261(0x62a)])return;if(Imported[_0xa06261(0x985)]&&BattleManager['isCTB']())return;if(BattleManager[_0xa06261(0x2ad)]){BattleManager[_0xa06261(0x2ad)][_0xa06261(0x7f7)](_0xa06261(0xb08));const _0x48fab6=BattleManager[_0xa06261(0x2ad)][_0xa06261(0x7bb)]();if(_0x48fab6)_0x48fab6[_0xa06261(0x84b)]();}BattleManager[_0xa06261(0x2ad)]=null;},VisuMZ['BattleCore'][_0xabeb6b(0x593)]=Scene_Battle['prototype'][_0xabeb6b(0x732)],Scene_Battle[_0xabeb6b(0xc8)]['createHelpWindow']=function(){const _0x44fbad=_0xabeb6b;VisuMZ[_0x44fbad(0x553)]['Scene_Battle_createHelpWindow']['call'](this),this[_0x44fbad(0x41a)]();},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x41a)]=function(){const _0x2b311d=_0xabeb6b;this['_actorCommandWindow'][_0x2b311d(0x648)](this[_0x2b311d(0x80a)]),this[_0x2b311d(0x3bf)][_0x2b311d(0x648)](this[_0x2b311d(0x80a)]);},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x55b)]=function(){const _0x498646=_0xabeb6b;if(!VisuMZ[_0x498646(0x553)][_0x498646(0x78f)][_0x498646(0xa08)][_0x498646(0x49a)])return;this['_enemyNameContainer']=new Sprite(),this['_enemyNameContainer']['x']=this[_0x498646(0x93b)]['x'],this[_0x498646(0x3d3)]['y']=this['_windowLayer']['y'];const _0x720602=this['children'][_0x498646(0x996)](this[_0x498646(0x93b)]);this[_0x498646(0xa58)](this['_enemyNameContainer'],_0x720602);for(let _0x1fe63f=0x0;_0x1fe63f<0x8;_0x1fe63f++){const _0xc7a96=new Window_EnemyName(_0x1fe63f);this['_enemyNameContainer'][_0x498646(0x8d3)](_0xc7a96);}},VisuMZ['BattleCore'][_0xabeb6b(0xbc7)]=Scene_Battle['prototype'][_0xabeb6b(0x1b3)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x1b3)]=function(){const _0x34f651=_0xabeb6b;VisuMZ[_0x34f651(0x553)][_0x34f651(0xbc7)][_0x34f651(0x378)](this),this[_0x34f651(0x65a)]();},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x65a)]=function(){const _0x5f4950=_0xabeb6b;this[_0x5f4950(0x85b)](!![]),this[_0x5f4950(0x85b)](![]);},Scene_Battle[_0xabeb6b(0xc8)]['multiTargetWindowRect']=function(_0x2d80d8){const _0x16dddf=_0xabeb6b,_0x38053b=Window_BattleMultiTarget[_0x16dddf(0x550)],_0x3663fa=this['calcWindowHeight'](0x1,!![]);let _0x4d31d6=_0x2d80d8?Graphics['boxWidth']-_0x38053b:0x0;_0x4d31d6+=_0x2d80d8?Window_BattleMultiTarget[_0x16dddf(0x68d)]:Window_BattleMultiTarget[_0x16dddf(0x577)];const _0x729a41=[_0x16dddf(0xa18)][_0x16dddf(0x5d8)](this['battleLayoutStyle']())?0x0:this[_0x16dddf(0x4ab)][_0x16dddf(0x1ee)];let _0x44925b=Graphics[_0x16dddf(0x588)]-_0x729a41-_0x3663fa;return _0x44925b+=_0x2d80d8?Window_BattleMultiTarget[_0x16dddf(0x25c)]:Window_BattleMultiTarget[_0x16dddf(0x883)],new Rectangle(_0x4d31d6,_0x44925b,_0x38053b,_0x3663fa);},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x85b)]=function(_0x185ff2){const _0x1ec3c8=_0xabeb6b,_0x5b632a=this[_0x1ec3c8(0x1d6)](_0x185ff2),_0x2861e1=new Window_BattleMultiTarget(_0x5b632a,_0x185ff2);this['addWindow'](_0x2861e1),_0x185ff2?this[_0x1ec3c8(0x22b)]=_0x2861e1:this[_0x1ec3c8(0x3a6)]=_0x2861e1;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x7da)]=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xb6f)],Scene_Battle['prototype'][_0xabeb6b(0xb6f)]=function(){const _0x50075e=_0xabeb6b;if(this[_0x50075e(0x352)])return![];return VisuMZ['BattleCore'][_0x50075e(0x7da)]['call'](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x7cf)]=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x337)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x337)]=function(){const _0x4dafe3=_0xabeb6b;if(this['_cancelButton']&&this[_0x4dafe3(0x352)]){this[_0x4dafe3(0xaad)][_0x4dafe3(0xbc2)]=!![];return;}VisuMZ[_0x4dafe3(0x553)][_0x4dafe3(0x7cf)][_0x4dafe3(0x378)](this);},VisuMZ['BattleCore']['Scene_Battle_isTimeActiveIBS']=Scene_Battle[_0xabeb6b(0xc8)]['isTimeActive'],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x261)]=function(){const _0x3b0f6e=_0xabeb6b;if(this[_0x3b0f6e(0x352)])return![];return VisuMZ['BattleCore']['Scene_Battle_isTimeActiveIBS']['call'](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x90a)]=Scene_Battle['prototype'][_0xabeb6b(0x226)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x226)]=function(){const _0x2609cb=_0xabeb6b;VisuMZ['BattleCore'][_0x2609cb(0x90a)][_0x2609cb(0x378)](this),this[_0x2609cb(0x344)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x42c)]=Scene_Battle[_0xabeb6b(0xc8)]['createPartyCommandWindow'],Scene_Battle['prototype'][_0xabeb6b(0x565)]=function(){const _0x5d4663=_0xabeb6b;VisuMZ[_0x5d4663(0x553)][_0x5d4663(0x42c)][_0x5d4663(0x378)](this);const _0x20f62c=this[_0x5d4663(0x3bf)];_0x20f62c[_0x5d4663(0x6c6)](_0x5d4663(0x94a),this[_0x5d4663(0x5a4)][_0x5d4663(0xa39)](this,_0x20f62c));},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x833)]=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x39b)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x39b)]=function(){const _0x4a15a0=_0xabeb6b;VisuMZ[_0x4a15a0(0x553)]['Scene_Battle_createActorCommandWindowIBS'][_0x4a15a0(0x378)](this);const _0x5b9951=this[_0x4a15a0(0x637)];_0x5b9951[_0x4a15a0(0x6c6)](_0x4a15a0(0x94a),this[_0x4a15a0(0x5a4)][_0x4a15a0(0xa39)](this,_0x5b9951));},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x344)]=function(){const _0x37e9eb=_0xabeb6b,_0x34e3b5=this[_0x37e9eb(0x68b)](),_0x51b16f=new Window_InBattleStatus(_0x34e3b5);this[_0x37e9eb(0x381)](_0x51b16f),_0x51b16f['hide'](),_0x51b16f[_0x37e9eb(0xaba)](),this['_inBattleStatusWindow']=_0x51b16f;},Scene_Battle[_0xabeb6b(0xc8)]['inBattleStatusWindowRect']=function(){const _0x16da9f=_0xabeb6b;if(VisuMZ[_0x16da9f(0x553)][_0x16da9f(0x78f)][_0x16da9f(0xa85)]['StatusWindow_RectJS'])return VisuMZ[_0x16da9f(0x553)][_0x16da9f(0x78f)]['InBattleStatus']['StatusWindow_RectJS'][_0x16da9f(0x378)](this);const _0x327587=Graphics[_0x16da9f(0x143)]>0x3e8?0x78:0x0,_0x2a335b=this[_0x16da9f(0x80a)]['y']+this[_0x16da9f(0x80a)][_0x16da9f(0x1ee)],_0x11c157=Graphics[_0x16da9f(0x143)]-_0x327587*0x2,_0x25832d=Graphics[_0x16da9f(0x588)]-_0x2a335b-this[_0x16da9f(0xbde)]();return new Rectangle(_0x327587,_0x2a335b,_0x11c157,_0x25832d);},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x5a4)]=function(_0x47be82){const _0x1b47ec=_0xabeb6b;this[_0x1b47ec(0x381)](this['_inBattleStatusWindow']),this[_0x1b47ec(0x352)]=!![],this[_0x1b47ec(0x80a)][_0x1b47ec(0x6eb)]();const _0x15e92c=['xp',_0x1b47ec(0x62b),_0x1b47ec(0x2d0),_0x1b47ec(0x56a),_0x1b47ec(0xa18)];let _0xe74713=_0x15e92c[_0x1b47ec(0x5d8)](this['battleLayoutStyle']());_0xe74713&&(_0x47be82[_0x1b47ec(0x855)](),_0x47be82[_0x1b47ec(0xaba)]()),this[_0x1b47ec(0x155)][_0x1b47ec(0x2b8)](BattleManager['actor']()||$gameParty['battleMembers']()[0x0]),this['_inBattleStatusWindow'][_0x1b47ec(0x28a)](_0x47be82),this[_0x1b47ec(0x155)][_0x1b47ec(0x6eb)](),this['_inBattleStatusWindow'][_0x1b47ec(0xaac)]();},Scene_Battle[_0xabeb6b(0xc8)]['endInBattleStatus']=function(){const _0x5882cc=_0xabeb6b;this[_0x5882cc(0x352)]=![],this[_0x5882cc(0x80a)]['hide']();const _0x446d5a=this[_0x5882cc(0x155)][_0x5882cc(0x508)]();_0x446d5a[_0x5882cc(0x6eb)](),_0x446d5a[_0x5882cc(0xaac)](),_0x446d5a[_0x5882cc(0x440)](),this[_0x5882cc(0x155)]['hide'](),this[_0x5882cc(0x155)][_0x5882cc(0xaba)]();},Scene_Battle['prototype'][_0xabeb6b(0x3fb)]=function(){const _0x33c330=_0xabeb6b;if($gameTemp[_0x33c330(0x5fb)]!==undefined)return $gameTemp[_0x33c330(0x5fb)];if(this[_0x33c330(0x2b9)])return this[_0x33c330(0x2b9)];return this[_0x33c330(0x2b9)]=VisuMZ[_0x33c330(0x553)]['Settings'][_0x33c330(0x198)][_0x33c330(0x472)][_0x33c330(0xa5b)]()[_0x33c330(0xd3)](),this[_0x33c330(0x2b9)]===_0x33c330(0x56a)&&!Imported[_0x33c330(0x7c9)]&&(this[_0x33c330(0x2b9)]='default'),this[_0x33c330(0x2b9)]==='frontview_ui'&&!Imported['VisuMZ_3_FrontviewBattleUI']&&(this['_battleLayoutStyle']=_0x33c330(0xfd)),this[_0x33c330(0x2b9)];},VisuMZ['BattleCore'][_0xabeb6b(0x137)]=Scene_Battle['prototype'][_0xabeb6b(0xbde)],Scene_Battle['prototype'][_0xabeb6b(0xbde)]=function(){const _0x1e7259=_0xabeb6b,_0x53b908=this['battleLayoutStyle']();switch(_0x53b908){case'list':return this[_0x1e7259(0x1ef)](Math[_0x1e7259(0xb72)](0x1,$gameParty['maxBattleMembers']()),!![]);break;case _0x1e7259(0x2d0):return this['calcWindowHeight'](0x4,!![]);break;default:return VisuMZ[_0x1e7259(0x553)][_0x1e7259(0x137)][_0x1e7259(0x378)](this);break;}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xd0)]=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xba2)],Scene_Battle['prototype']['helpWindowRect']=function(){const _0xb221fa=_0xabeb6b,_0x4152e0=this[_0xb221fa(0x3fb)]();switch(_0x4152e0){case _0xb221fa(0x2d0):return this[_0xb221fa(0xb6d)]();break;case _0xb221fa(0xfd):case _0xb221fa(0x907):case'xp':case _0xb221fa(0x62b):default:return VisuMZ[_0xb221fa(0x553)]['Scene_Battle_helpWindowRect']['call'](this);break;}},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x10a)]=function(){const _0x4eaf6e=_0xabeb6b,_0x142bf0=this['battleLayoutStyle']();switch(_0x142bf0){case'xp':case _0x4eaf6e(0x62b):return this['statusWindowRectXPStyle']();break;case _0x4eaf6e(0x2d0):return this[_0x4eaf6e(0x30f)]();break;case _0x4eaf6e(0xfd):case _0x4eaf6e(0x907):default:return this[_0x4eaf6e(0xaa3)]();break;}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x9b1)]=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xa7f)],Scene_Battle['prototype'][_0xabeb6b(0xa7f)]=function(){const _0x5deec3=_0xabeb6b,_0x28abe9=this[_0x5deec3(0x3fb)]();switch(_0x28abe9){case'xp':case _0x5deec3(0x62b):return this['partyCommandWindowRectXPStyle']();break;case _0x5deec3(0x2d0):return this[_0x5deec3(0x864)]();case _0x5deec3(0xfd):case'list':default:return this[_0x5deec3(0x9b5)]();break;}},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x9b5)]=function(){const _0x19ccf3=_0xabeb6b,_0x1443ea=VisuMZ['BattleCore']['Settings'][_0x19ccf3(0x198)],_0x2a86ac=_0x1443ea[_0x19ccf3(0x2a6)]||0xc0,_0x17bda4=this['windowAreaHeight'](),_0x459beb=this[_0x19ccf3(0x563)]()?Graphics[_0x19ccf3(0x143)]-_0x2a86ac:0x0,_0x36fc58=Graphics[_0x19ccf3(0x588)]-_0x17bda4;return new Rectangle(_0x459beb,_0x36fc58,_0x2a86ac,_0x17bda4);},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xa56)]=function(){const _0x470b67=_0xabeb6b;return this[_0x470b67(0xa7f)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xb94)]=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x336)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x336)]=function(){const _0x56e62f=_0xabeb6b;if(this[_0x56e62f(0x352)])return;const _0x5800c2=this[_0x56e62f(0x3fb)]();switch(_0x5800c2){case'xp':case _0x56e62f(0x62b):case'border':break;case _0x56e62f(0xfd):case _0x56e62f(0x907):default:VisuMZ['BattleCore']['Scene_Battle_updateStatusWindowPosition'][_0x56e62f(0x378)](this);break;}},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xaa3)]=function(){const _0x4d240a=_0xabeb6b,_0x4da1bd=VisuMZ['BattleCore'][_0x4d240a(0x78f)][_0x4d240a(0x198)],_0x14e09=Window_BattleStatus[_0x4d240a(0xc8)][_0x4d240a(0x74d)](),_0x2b2340=Graphics['boxWidth']-(_0x4da1bd[_0x4d240a(0x2a6)]||0xc0),_0x6f5feb=this['windowAreaHeight']()+_0x14e09,_0x488790=this[_0x4d240a(0x563)]()?0x0:Graphics['boxWidth']-_0x2b2340,_0x2de1f3=Graphics[_0x4d240a(0x588)]-_0x6f5feb+_0x14e09;return new Rectangle(_0x488790,_0x2de1f3,_0x2b2340,_0x6f5feb);},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x15c)]=function(){const _0x386a66=_0xabeb6b,_0x4ed0de=Window_BattleStatus[_0x386a66(0xc8)]['extraHeight'](),_0x1d3e70=Graphics[_0x386a66(0x143)],_0x237f62=this[_0x386a66(0xbde)]()+_0x4ed0de,_0x11da10=0x0,_0x1ac837=Graphics[_0x386a66(0x588)]-_0x237f62+_0x4ed0de;return new Rectangle(_0x11da10,_0x1ac837,_0x1d3e70,_0x237f62);},Scene_Battle['prototype'][_0xabeb6b(0x6a6)]=function(){const _0x30e9df=_0xabeb6b,_0x40174b=Graphics[_0x30e9df(0x143)]/0x2,_0x1b7731=this[_0x30e9df(0x1ef)](VisuMZ[_0x30e9df(0x553)][_0x30e9df(0x78f)][_0x30e9df(0x198)][_0x30e9df(0x871)],!![]),_0x359e9a=Math[_0x30e9df(0xb36)]((Graphics[_0x30e9df(0x143)]-_0x40174b)/0x2),_0x3081aa=Graphics['boxHeight']-_0x1b7731-this[_0x30e9df(0x15c)]()[_0x30e9df(0x1ee)];return new Rectangle(_0x359e9a,_0x3081aa,_0x40174b,_0x1b7731);},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xb6d)]=function(){const _0x44b9e0=_0xabeb6b,_0x29ba6d=Graphics[_0x44b9e0(0x461)],_0x4d843b=Math[_0x44b9e0(0xb36)]((Graphics[_0x44b9e0(0x143)]-_0x29ba6d)/0x2),_0xd62fd1=this[_0x44b9e0(0x407)](),_0x1038bf=(Graphics[_0x44b9e0(0x1ee)]-Graphics[_0x44b9e0(0x588)])/-0x2;return new Rectangle(_0x4d843b,_0x1038bf,_0x29ba6d,_0xd62fd1);},Scene_Battle['prototype'][_0xabeb6b(0x30f)]=function(){const _0xb0bff9=_0xabeb6b,_0x49f639=Graphics['width'],_0x35c54c=Math['round']((Graphics[_0xb0bff9(0x143)]-_0x49f639)/0x2),_0x2f6649=this['calcWindowHeight'](0x4,!![]),_0x21f558=Graphics[_0xb0bff9(0x588)]-_0x2f6649+(Graphics[_0xb0bff9(0x1ee)]-Graphics[_0xb0bff9(0x588)])/0x2;return new Rectangle(_0x35c54c,_0x21f558,_0x49f639,_0x2f6649);},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x864)]=function(){const _0x2018b4=_0xabeb6b,_0x36cae9=Math[_0x2018b4(0x108)](Graphics['width']/0x3),_0x5469a5=this['isRightInputMode']()?(Graphics[_0x2018b4(0x461)]+Graphics[_0x2018b4(0x143)])/0x2-_0x36cae9:(Graphics[_0x2018b4(0x461)]-Graphics['boxWidth'])/-0x2,_0x3eb5b7=this[_0x2018b4(0xb6d)](),_0x54b87a=_0x3eb5b7['y']+_0x3eb5b7[_0x2018b4(0x1ee)],_0x1a51f2=this[_0x2018b4(0x30f)](),_0x35f8e3=_0x1a51f2['y']-_0x54b87a;return new Rectangle(_0x5469a5,_0x54b87a,_0x36cae9,_0x35f8e3);},Scene_Battle['prototype'][_0xabeb6b(0x247)]=function(){const _0x2a59ce=_0xabeb6b,_0x4e8055=Math[_0x2a59ce(0x534)](Graphics['width']/0x3),_0x1e1700=Math[_0x2a59ce(0xb36)]((Graphics[_0x2a59ce(0x143)]-_0x4e8055)/0x2),_0x23ef8f=this[_0x2a59ce(0x864)](),_0x50d631=_0x23ef8f['y'],_0x36a1f8=_0x23ef8f['height'];return new Rectangle(_0x1e1700,_0x50d631,_0x4e8055,_0x36a1f8);},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x3aa)]=function(){const _0x18097a=_0xabeb6b;this[_0x18097a(0xaad)]['y']=this[_0x18097a(0x80a)]['y']+this[_0x18097a(0x80a)][_0x18097a(0x1ee)],this[_0x18097a(0x563)]()?this['battleLayoutStyle']()===_0x18097a(0x2d0)?this[_0x18097a(0xaad)]['x']=0x8:this[_0x18097a(0xaad)]['x']=-this[_0x18097a(0xaad)][_0x18097a(0x461)]-0x4:this[_0x18097a(0xaad)]['x']=Graphics['width']-(Graphics[_0x18097a(0x461)]-Graphics[_0x18097a(0x143)])/0x2-this['_cancelButton'][_0x18097a(0x461)]-0x4;},VisuMZ[_0xabeb6b(0x553)]['Scene_Battle_skillWindowRect']=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x4cc)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x4cc)]=function(){const _0x230ecf=_0xabeb6b;if(this[_0x230ecf(0x3fb)]()===_0x230ecf(0x2d0))return this['skillItemWindowRectBorderStyle']();else return this[_0x230ecf(0x418)]()?this[_0x230ecf(0xc5)]():VisuMZ[_0x230ecf(0x553)][_0x230ecf(0x326)]['call'](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xabb)]=Scene_Battle['prototype'][_0xabeb6b(0x75b)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x75b)]=function(){const _0x4aff03=_0xabeb6b;if(this[_0x4aff03(0x3fb)]()===_0x4aff03(0x2d0))return this[_0x4aff03(0x247)]();else return this['isSkillItemWindowsMiddle']()?this['skillItemWindowRectMiddle']():VisuMZ['BattleCore'][_0x4aff03(0xabb)][_0x4aff03(0x378)](this);},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x418)]=function(){const _0x454cbf=_0xabeb6b;return VisuMZ['BattleCore'][_0x454cbf(0x78f)][_0x454cbf(0x198)][_0x454cbf(0xbdc)];},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xc5)]=function(){const _0x5af91d=_0xabeb6b,_0x5e9182=Sprite_Button[_0x5af91d(0xc8)][_0x5af91d(0x2c0)]()*0x2+0x4;let _0x2d8faf=Graphics[_0x5af91d(0x143)]-_0x5e9182;Imported[_0x5af91d(0x765)]&&SceneManager[_0x5af91d(0x464)]()&&(_0x2d8faf+=_0x5e9182);const _0x42aaa9=this[_0x5af91d(0x718)](),_0x17ff79=Graphics['boxHeight']-_0x42aaa9-this[_0x5af91d(0x10a)]()[_0x5af91d(0x1ee)]+Window_BattleStatus[_0x5af91d(0xc8)][_0x5af91d(0x74d)](),_0x1c4bd6=0x0;return new Rectangle(_0x1c4bd6,_0x42aaa9,_0x2d8faf,_0x17ff79);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x639)]=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x3ea)],Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x3ea)]=function(){const _0x42f820=_0xabeb6b;VisuMZ[_0x42f820(0x553)][_0x42f820(0x639)]['call'](this),this[_0x42f820(0x43f)]();},VisuMZ[_0xabeb6b(0x553)]['Scene_Battle_startEnemySelection']=Scene_Battle['prototype'][_0xabeb6b(0x547)],Scene_Battle['prototype']['startEnemySelection']=function(){const _0x3dfb08=_0xabeb6b;VisuMZ[_0x3dfb08(0x553)][_0x3dfb08(0x1cc)][_0x3dfb08(0x378)](this),this['_enemyWindow'][_0x3dfb08(0x2ed)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x43f)]=function(){const _0x4f5ca5=_0xabeb6b,_0x42acc8=this[_0x4f5ca5(0x3fb)]();['xp',_0x4f5ca5(0x62b),'border'][_0x4f5ca5(0x5d8)](_0x42acc8)&&this[_0x4f5ca5(0x637)][_0x4f5ca5(0xaba)](),(_0x42acc8===_0x4f5ca5(0x2d0)||this[_0x4f5ca5(0x418)]())&&(this[_0x4f5ca5(0x999)][_0x4f5ca5(0xaba)](),this[_0x4f5ca5(0xa30)]['close']());},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xa12)]=Scene_Battle[_0xabeb6b(0xc8)]['onActorOk'],Scene_Battle['prototype'][_0xabeb6b(0xe1)]=function(){const _0x2a22b0=_0xabeb6b;VisuMZ[_0x2a22b0(0x553)][_0x2a22b0(0xa12)]['call'](this),this[_0x2a22b0(0x5e1)]();},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x32f)]=function(){const _0x2baa0c=_0xabeb6b;return[_0x2baa0c(0xa71),_0x2baa0c(0xb63),'singleSkill']['includes'](this[_0x2baa0c(0x637)][_0x2baa0c(0xb49)]());},VisuMZ['BattleCore'][_0xabeb6b(0x6aa)]=Scene_Battle['prototype'][_0xabeb6b(0x401)],Scene_Battle['prototype'][_0xabeb6b(0x401)]=function(){const _0x516c8c=_0xabeb6b;this[_0x516c8c(0x32f)]()?(this[_0x516c8c(0x4ab)][_0x516c8c(0x6eb)](),this[_0x516c8c(0x3c6)]['hide'](),this[_0x516c8c(0x637)][_0x516c8c(0x440)]()):VisuMZ['BattleCore'][_0x516c8c(0x6aa)][_0x516c8c(0x378)](this),this[_0x516c8c(0x887)]();},VisuMZ[_0xabeb6b(0x553)]['Scene_Battle_onEnemyOk']=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xb2c)],Scene_Battle[_0xabeb6b(0xc8)]['onEnemyOk']=function(){const _0x470b15=_0xabeb6b;if(!this[_0x470b15(0x389)]['enemy']()){this[_0x470b15(0x389)][_0x470b15(0x440)]();return;}const _0x23e230=BattleManager[_0x470b15(0x960)]();_0x23e230[_0x470b15(0xac7)](this[_0x470b15(0x389)]['enemy']()),this[_0x470b15(0x389)]['closeBattleActorWindow'](),VisuMZ[_0x470b15(0x553)][_0x470b15(0x6fd)][_0x470b15(0x378)](this),this[_0x470b15(0x5e1)]();},VisuMZ['BattleCore'][_0xabeb6b(0x3f9)]=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x6f5)],Scene_Battle[_0xabeb6b(0xc8)]['onEnemyCancel']=function(){const _0x537199=_0xabeb6b;this[_0x537199(0x32f)]()?(this['_statusWindow'][_0x537199(0x6eb)](),this[_0x537199(0x389)][_0x537199(0x855)](),this[_0x537199(0x637)]['activate']()):VisuMZ[_0x537199(0x553)][_0x537199(0x3f9)]['call'](this),this[_0x537199(0x887)](),this['_enemyWindow'][_0x537199(0x926)]();},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x5e1)]=function(){const _0x51cc2c=_0xabeb6b,_0x22c213=this[_0x51cc2c(0x3fb)]();(_0x22c213===_0x51cc2c(0x2d0)||this[_0x51cc2c(0x418)]())&&(this[_0x51cc2c(0x999)]['open'](),this[_0x51cc2c(0x999)]['active']&&this[_0x51cc2c(0x999)][_0x51cc2c(0x6eb)](),this[_0x51cc2c(0xa30)][_0x51cc2c(0xaac)](),this[_0x51cc2c(0xa30)][_0x51cc2c(0xc3)]&&this[_0x51cc2c(0xa30)]['show']());},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x887)]=function(){const _0x1d03e3=_0xabeb6b,_0x4a3733=this[_0x1d03e3(0x3fb)]();['xp','portrait','border'][_0x1d03e3(0x5d8)](_0x4a3733)&&this[_0x1d03e3(0x637)]['open'](),this['okTargetSelectionVisibility']();},Sprite_Battler[_0xabeb6b(0x723)]=VisuMZ['BattleCore'][_0xabeb6b(0x78f)][_0xabeb6b(0x2b0)][_0xabeb6b(0x3f7)],VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xae2)]=Sprite_Battler[_0xabeb6b(0xc8)]['initMembers'],Sprite_Battler['prototype'][_0xabeb6b(0x4e0)]=function(){const _0x159637=_0xabeb6b;VisuMZ['BattleCore'][_0x159637(0xae2)][_0x159637(0x378)](this),this[_0x159637(0x271)]();if(this[_0x159637(0x840)]===Sprite_Enemy)this[_0x159637(0x5ba)]();this['createDistortionSprite']();},Sprite_Battler['prototype'][_0xabeb6b(0x271)]=function(){const _0x555e7b=_0xabeb6b;this['_baseX']=0x0,this[_0x555e7b(0xb85)]=0x0,this[_0x555e7b(0x1b9)]=0x0,this[_0x555e7b(0xaca)]=0x0,this[_0x555e7b(0x801)]=0x0,this['_floatWholeDuration']=0x0,this[_0x555e7b(0x604)]='Linear',this[_0x555e7b(0x5a7)]=0x0,this[_0x555e7b(0x80e)]=0x0,this[_0x555e7b(0xb7c)]=0x0,this[_0x555e7b(0x792)]=0x0,this[_0x555e7b(0x18e)]=0xff,this['_opacityDuration']=0x0,this[_0x555e7b(0x35d)]=0x0,this[_0x555e7b(0x77e)]=_0x555e7b(0x899),this[_0x555e7b(0x539)]=0x0,this[_0x555e7b(0x14c)]=0x0,this[_0x555e7b(0xcf)]=0x0,this[_0x555e7b(0x82a)]=0x0,this[_0x555e7b(0x914)]=_0x555e7b(0x899),this[_0x555e7b(0x82b)]=!![],this[_0x555e7b(0xa33)]=0x0,this['_skewY']=0x0,this['_targetSkewX']=0x0,this['_targetSkewY']=0x0,this[_0x555e7b(0x665)]=0x0,this[_0x555e7b(0x9d6)]=0x0,this[_0x555e7b(0x8a6)]='Linear',this[_0x555e7b(0x725)]=0x1,this[_0x555e7b(0x167)]=0x1,this[_0x555e7b(0x3ff)]=0x1,this['_targetGrowY']=0x1,this[_0x555e7b(0x1c0)]=0x0,this[_0x555e7b(0xaeb)]=0x0,this[_0x555e7b(0xa7e)]=_0x555e7b(0x899),this['_flipScaleX']=0x1,this['_targetHomeX']=0x0,this['_targetHomeY']=0x0,this[_0x555e7b(0x9cc)]=0x0,this[_0x555e7b(0x431)]=0x0,this[_0x555e7b(0xb75)]='Linear',this['_shakeFlinchDuration']=0x0,this[_0x555e7b(0x41c)]=0x0;},Sprite_Battler['prototype']['createShadowSprite']=function(){const _0x2931cd=_0xabeb6b;this[_0x2931cd(0x43c)]=new Sprite(),this[_0x2931cd(0x43c)]['bitmap']=ImageManager[_0x2931cd(0x7a9)](_0x2931cd(0x3b5)),this[_0x2931cd(0x43c)][_0x2931cd(0xac0)][_0x2931cd(0x20b)]=VisuMZ[_0x2931cd(0x553)][_0x2931cd(0x78f)][_0x2931cd(0x2b0)][_0x2931cd(0xbdb)],this['_shadowSprite'][_0x2931cd(0xb3e)]['x']=0.5,this[_0x2931cd(0x43c)][_0x2931cd(0xb3e)]['y']=0.5,this[_0x2931cd(0x43c)]['y']=-0x2,this[_0x2931cd(0x43c)][_0x2931cd(0xbc2)]=![],this[_0x2931cd(0x8d3)](this[_0x2931cd(0x43c)]);},Sprite_Battler['prototype'][_0xabeb6b(0x26f)]=function(){const _0x244b5c=_0xabeb6b;this['_distortionSprite']=new Sprite(),this[_0x244b5c(0x277)][_0x244b5c(0xb3e)]['x']=0.5,this[_0x244b5c(0x277)][_0x244b5c(0xb3e)]['y']=0.5,this[_0x244b5c(0x8d3)](this[_0x244b5c(0x277)]);},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x65e)]=function(){const _0x4184a3=_0xabeb6b;if(this[_0x4184a3(0x9d9)]&&this[_0x4184a3(0x9d9)]()){Sprite[_0x4184a3(0xc8)][_0x4184a3(0x65e)]['call'](this);return;}const _0x852f01=this['_distortionSprite'];if(!_0x852f01)return;!_0x852f01['_colorFilter']&&_0x852f01[_0x4184a3(0x77d)](),_0x852f01[_0x4184a3(0x8d0)][_0x4184a3(0x3e9)](this['_hue']),_0x852f01[_0x4184a3(0x8d0)][_0x4184a3(0x37c)](this[_0x4184a3(0x8c5)]),_0x852f01[_0x4184a3(0x8d0)]['setColorTone'](this['_colorTone']);},Sprite_Battler['prototype'][_0xabeb6b(0x6c1)]=function(){const _0x23567d=_0xabeb6b;if(!this[_0x23567d(0x277)])return;if(this[_0x23567d(0x43c)]){const _0x82fc49=this[_0x23567d(0x4bc)](this[_0x23567d(0x277)]);this['addChildAt'](this[_0x23567d(0x43c)],_0x82fc49),this[_0x23567d(0x1df)]();}this[_0x23567d(0x766)]&&this['_distortionSprite']['addChild'](this['_svBattlerSprite']),this['_weaponSprite']&&this[_0x23567d(0x277)][_0x23567d(0x8d3)](this[_0x23567d(0x51d)]),this[_0x23567d(0x9f0)]&&this[_0x23567d(0x277)]['addChild'](this[_0x23567d(0x9f0)]),this[_0x23567d(0x37f)]&&this[_0x23567d(0x277)][_0x23567d(0x8d3)](this['_injectAnimationSprite']),this[_0x23567d(0x211)]&&this[_0x23567d(0x277)][_0x23567d(0x8d3)](this[_0x23567d(0x211)]);},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x1df)]=function(){const _0x45a395=_0xabeb6b;if(!this[_0x45a395(0x43c)])return;if(this[_0x45a395(0x2aa)]&&this[_0x45a395(0x2aa)][_0x45a395(0x879)]()){const _0x5e483d=this['_shadowSprite'][_0x45a395(0xac0)];this[_0x45a395(0x43c)][_0x45a395(0x927)](0x0,0x0,_0x5e483d[_0x45a395(0x461)],_0x5e483d[_0x45a395(0x1ee)]);}else this[_0x45a395(0x43c)][_0x45a395(0x927)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype'][_0xabeb6b(0x5bb)]=function(){const _0x466fcb=_0xabeb6b;return SceneManager[_0x466fcb(0x87a)]()?SceneManager[_0x466fcb(0x483)][_0x466fcb(0x754)][_0x466fcb(0x164)]:this['parent'];},Sprite_Battler[_0xabeb6b(0xc8)]['setupTextPopup']=function(_0x537d5d,_0x431906){const _0x36fb68=_0xabeb6b;if(!this[_0x36fb68(0x2aa)]['isSpriteVisible']())return;if(BattleManager[_0x36fb68(0x720)]())return;const _0x437faa=VisuMZ[_0x36fb68(0x553)]['Settings'][_0x36fb68(0x11a)],_0x2039a6=new Sprite_Damage();_0x2039a6['_duration']=_0x437faa[_0x36fb68(0x475)],this['sortDamageSprites'](_0x2039a6),_0x2039a6[_0x36fb68(0x400)](_0x537d5d,_0x431906),this[_0x36fb68(0x1ce)](_0x2039a6);},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x280)]=function(_0x409b42,_0x29a475,_0x52a2ba){const _0x8b6ba9=_0xabeb6b;if(!this[_0x8b6ba9(0x2aa)]['isSpriteVisible']())return;if(BattleManager[_0x8b6ba9(0x720)]())return;const _0x2a9490=VisuMZ[_0x8b6ba9(0x553)][_0x8b6ba9(0x78f)][_0x8b6ba9(0x11a)],_0x4abf2c=new Sprite_Damage();_0x4abf2c[_0x8b6ba9(0x608)]=_0x2a9490['PopupDuration'],this[_0x8b6ba9(0x9bd)](_0x4abf2c),_0x4abf2c[_0x8b6ba9(0x280)](_0x409b42,_0x29a475,_0x52a2ba),this['addDamageSprite'](_0x4abf2c);},Sprite_Battler[_0xabeb6b(0xc8)]['setupDamagePopup']=function(){const _0x2b9b90=_0xabeb6b;if(!this[_0x2b9b90(0x2aa)][_0x2b9b90(0x758)]())return;while(this[_0x2b9b90(0x2aa)][_0x2b9b90(0x758)]()){this['_battler'][_0x2b9b90(0x2be)]()&&this['createDamageSprite']();}this[_0x2b9b90(0x2aa)][_0x2b9b90(0x7cc)](),this[_0x2b9b90(0x2aa)][_0x2b9b90(0x219)]();},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x359)]=function(){const _0x45a516=_0xabeb6b;if(BattleManager[_0x45a516(0x720)]())return;const _0x5735f1=VisuMZ['BattleCore'][_0x45a516(0x78f)][_0x45a516(0x11a)],_0x1443fd=new Sprite_Damage();_0x1443fd[_0x45a516(0x608)]=_0x5735f1['PopupDuration'],this['sortDamageSprites'](_0x1443fd),_0x1443fd[_0x45a516(0x3a5)](this[_0x45a516(0x2aa)]),_0x1443fd[_0x45a516(0x4b4)](this[_0x45a516(0x2aa)]),this[_0x45a516(0x1ce)](_0x1443fd);},Sprite_Battler[_0xabeb6b(0xc8)]['addDamageSprite']=function(_0x28abdb){const _0x4507d0=_0xabeb6b;this[_0x4507d0(0x848)]['push'](_0x28abdb);if(this[_0x4507d0(0x82d)]()){const _0x1c990c=SceneManager[_0x4507d0(0x483)][_0x4507d0(0x4ab)];if(_0x1c990c)_0x1c990c['addDamageSprite'](_0x28abdb,this[_0x4507d0(0x2aa)]);}else{this[_0x4507d0(0x5bb)]()['addChild'](_0x28abdb);if(SceneManager[_0x4507d0(0x799)]())_0x28abdb[_0x4507d0(0xb4d)]['x']=-0x1;}},Sprite_Battler['prototype'][_0xabeb6b(0x82d)]=function(){const _0x5066b7=_0xabeb6b;return!$gameSystem[_0x5066b7(0x4d5)]()&&this[_0x5066b7(0x2aa)]&&this[_0x5066b7(0x2aa)][_0x5066b7(0xb6a)]();return!$gameSystem[_0x5066b7(0x4d5)]()&&this[_0x5066b7(0x2aa)]&&this['_battler'][_0x5066b7(0xb6a)]()&&Window_BattleStatus[_0x5066b7(0xc8)][_0x5066b7(0x3fb)]()==='portrait';},Sprite_Battler['prototype'][_0xabeb6b(0x9bd)]=function(_0x256946){const _0x3e0a4a=_0xabeb6b;this[_0x3e0a4a(0x32a)](_0x256946,!![]);const _0x4acc19=VisuMZ[_0x3e0a4a(0x553)][_0x3e0a4a(0x78f)][_0x3e0a4a(0x11a)],_0x49449a=SceneManager[_0x3e0a4a(0x799)]()?-0x1:0x1;if(_0x4acc19[_0x3e0a4a(0x2e0)])for(const _0x130f7f of this['_damages']){_0x130f7f['x']+=_0x4acc19[_0x3e0a4a(0x350)]*_0x49449a,_0x130f7f['y']+=_0x4acc19[_0x3e0a4a(0xa2d)];}else{const _0x420234=this[_0x3e0a4a(0x848)][this['_damages']['length']-0x1];_0x420234&&(_0x256946['x']=_0x420234['x']+_0x4acc19[_0x3e0a4a(0x350)]*_0x49449a,_0x256946['y']=_0x420234['y']+_0x4acc19[_0x3e0a4a(0xa2d)]);}},Sprite_Battler['prototype'][_0xabeb6b(0x32a)]=function(_0x3e4c26,_0x4cccb5){const _0x219832=_0xabeb6b,_0x430ade=SceneManager[_0x219832(0x799)]()?-0x1:0x1;let _0x23819d=this[_0x219832(0x945)];_0x23819d+=this['extraPositionX']();let _0xcabbbf=this[_0x219832(0xb85)];const _0x2e1f2d=this[_0x219832(0x277)][_0x219832(0xb4d)]['y'];_0xcabbbf+=this[_0x219832(0x36c)]();const _0x393ba1=SceneManager[_0x219832(0x483)][_0x219832(0x4ab)];if(_0x393ba1&&this[_0x219832(0xacc)]===_0x393ba1){_0x23819d+=_0x393ba1['x']-this[_0x219832(0x58c)]();const _0x2b2c9e=_0x393ba1['lineHeight']()*0x3/0x4;_0xcabbbf=_0x393ba1['y']+_0x2b2c9e,_0xcabbbf=Math[_0x219832(0x1be)](_0xcabbbf,_0x393ba1['y']+this['y']-this[_0x219832(0x1ee)]+_0x2b2c9e);}_0x3e4c26['x']=Math[_0x219832(0xb36)](_0x23819d+this['damageOffsetX']()*_0x430ade),_0x3e4c26['y']=Math[_0x219832(0xb36)](_0xcabbbf+this[_0x219832(0x234)]());},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x706)]=Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x58c)],Sprite_Battler['prototype'][_0xabeb6b(0x58c)]=function(){const _0x3e1548=_0xabeb6b;let _0x2c4496=VisuMZ[_0x3e1548(0x553)][_0x3e1548(0x706)][_0x3e1548(0x378)](this),_0x3f323a=VisuMZ[_0x3e1548(0x553)][_0x3e1548(0x78f)][_0x3e1548(0x11a)]['PopupOffsetX']||0x0;return _0x3f323a+=this[_0x3e1548(0x2aa)][_0x3e1548(0x721)](),Math[_0x3e1548(0xb36)](_0x2c4496+_0x3f323a);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x7b4)]=Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x234)],Sprite_Battler['prototype'][_0xabeb6b(0x234)]=function(){const _0x5ed4c4=_0xabeb6b;let _0x50de10=VisuMZ[_0x5ed4c4(0x553)][_0x5ed4c4(0x7b4)][_0x5ed4c4(0x378)](this);switch(this[_0x5ed4c4(0x2aa)]['damagePopupPosition']()){case _0x5ed4c4(0xa89):_0x50de10-=this[_0x5ed4c4(0x1ee)]*this[_0x5ed4c4(0xb4d)]['y'];break;case'center':_0x50de10-=this[_0x5ed4c4(0x1ee)]*this[_0x5ed4c4(0xb4d)]['y']*0.5;break;}let _0x4de2b9=VisuMZ[_0x5ed4c4(0x553)][_0x5ed4c4(0x78f)][_0x5ed4c4(0x11a)][_0x5ed4c4(0x19f)]||0x0;return _0x4de2b9+=this['_battler']['damagePopupOffsetY'](),Math['round'](_0x50de10+_0x4de2b9);},Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x58c)]=function(){const _0x32b182=_0xabeb6b;return Sprite_Battler[_0x32b182(0xc8)]['damageOffsetX'][_0x32b182(0x378)](this);},Sprite_Actor['prototype'][_0xabeb6b(0x234)]=function(){const _0x3cfae1=_0xabeb6b;return Sprite_Battler[_0x3cfae1(0xc8)][_0x3cfae1(0x234)]['call'](this);},Sprite_Battler['prototype'][_0xabeb6b(0xb28)]=function(_0x3c3b41){const _0x522169=_0xabeb6b;this[_0x522169(0x82d)]()?SceneManager[_0x522169(0x483)][_0x522169(0x4ab)][_0x522169(0x16d)](_0x3c3b41):(this[_0x522169(0x5bb)]()[_0x522169(0xe0)](_0x3c3b41),this[_0x522169(0x848)][_0x522169(0x858)](_0x3c3b41),_0x3c3b41['destroy']());},VisuMZ[_0xabeb6b(0x553)]['Sprite_Battler_setHome']=Sprite_Battler['prototype'][_0xabeb6b(0x4d7)],Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x4d7)]=function(_0x15504f,_0x321e4a){const _0x42fdfd=_0xabeb6b,_0x5ef416=VisuMZ['BattleCore'][_0x42fdfd(0x78f)];if(this[_0x42fdfd(0x840)]===Sprite_Actor)_0x15504f+=_0x5ef416[_0x42fdfd(0x2b0)][_0x42fdfd(0x163)]||0x0,_0x321e4a+=_0x5ef416[_0x42fdfd(0x2b0)][_0x42fdfd(0x8f0)]||0x0;else this[_0x42fdfd(0x840)]===Sprite_Enemy&&(_0x15504f+=_0x5ef416['Enemy'][_0x42fdfd(0x163)]||0x0,_0x321e4a+=_0x5ef416[_0x42fdfd(0xa08)]['OffsetY']||0x0);this['_battler']&&(_0x15504f=this[_0x42fdfd(0x2aa)][_0x42fdfd(0x3ed)]??_0x15504f,_0x321e4a=this[_0x42fdfd(0x2aa)][_0x42fdfd(0x59e)]??_0x321e4a),VisuMZ[_0x42fdfd(0x553)][_0x42fdfd(0x981)][_0x42fdfd(0x378)](this,_0x15504f,_0x321e4a),this[_0x42fdfd(0xab7)]=this[_0x42fdfd(0x615)],this[_0x42fdfd(0x2cc)]=this[_0x42fdfd(0x3a2)],this['_homeDuration']=0x0,this['_homeWholeDuration']=0x0,this['_homeEasing']=_0x42fdfd(0x899);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x861)]=Sprite_Battler['prototype'][_0xabeb6b(0x5bc)],Sprite_Battler[_0xabeb6b(0xc8)]['update']=function(){const _0x40a8c6=_0xabeb6b;VisuMZ[_0x40a8c6(0x553)][_0x40a8c6(0x861)][_0x40a8c6(0x378)](this),!this[_0x40a8c6(0x2aa)]&&this[_0x40a8c6(0x113)]&&(this[_0x40a8c6(0x113)][_0x40a8c6(0xbc2)]=![]);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x293)]=Sprite_Battler[_0xabeb6b(0xc8)]['updateMain'],Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x2fb)]=function(){const _0x2bb9d0=_0xabeb6b;this[_0x2bb9d0(0x405)](),this[_0x2bb9d0(0x7bd)](),this[_0x2bb9d0(0xdd)](),this['updateFlip'](),VisuMZ[_0x2bb9d0(0x553)]['Sprite_Battler_updateMain']['call'](this),this[_0x2bb9d0(0x5a6)](),this[_0x2bb9d0(0x89f)]();if(this['constructor']===Sprite_Enemy)this[_0x2bb9d0(0x817)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x81e)]=Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x8df)],Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x8df)]=function(){const _0x51caf0=_0xabeb6b;this['updateHomeMove'](),VisuMZ[_0x51caf0(0x553)][_0x51caf0(0x81e)]['call'](this),this[_0x51caf0(0xae8)](),this[_0x51caf0(0x7fd)]();},Sprite_Battler['prototype'][_0xabeb6b(0x292)]=function(){const _0x267635=_0xabeb6b,_0x1f0caa=this['mainSprite']();if(this[_0x267635(0x2aa)]['isSelected']())this[_0x267635(0x3e3)]++,Graphics[_0x267635(0x791)]%0x1e<0xf?_0x1f0caa[_0x267635(0x37c)]([0xff,0xff,0xff,0x40]):_0x1f0caa[_0x267635(0x37c)]([0x0,0x0,0x0,0x0]);else this[_0x267635(0x3e3)]>0x0&&(this[_0x267635(0x3e3)]=0x0,_0x1f0caa['setBlendColor']([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0xabeb6b(0xc8)]['silentHomeMove']=function(_0x378da9,_0x4720e4){const _0x568f9c=_0xabeb6b,_0x17c251=VisuMZ[_0x568f9c(0x553)]['Settings'];if(this[_0x568f9c(0x840)]===Sprite_Actor)_0x378da9+=_0x17c251['Actor'][_0x568f9c(0x163)]||0x0,_0x4720e4+=_0x17c251['Actor'][_0x568f9c(0x8f0)]||0x0;else this['constructor']===Sprite_Enemy&&(_0x378da9+=_0x17c251[_0x568f9c(0xa08)]['OffsetX']||0x0,_0x4720e4+=_0x17c251['Enemy']['OffsetY']||0x0);const _0x4e2d59=_0x378da9-this[_0x568f9c(0x615)],_0x590876=_0x4720e4-this['_homeY'];this[_0x568f9c(0x615)]=_0x378da9,this[_0x568f9c(0x3a2)]=_0x4720e4,this[_0x568f9c(0x911)]-=_0x4e2d59,this[_0x568f9c(0xb06)]-=_0x590876,this[_0x568f9c(0xea)]-=_0x4e2d59,this['_targetOffsetY']-=_0x590876,this[_0x568f9c(0x8df)]();},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xaa9)]=function(_0x5b7f6e,_0x1e1f11,_0x5a472b,_0x271d7c){const _0x41cf26=_0xabeb6b,_0x37ee96=VisuMZ[_0x41cf26(0x553)][_0x41cf26(0x78f)];if(this[_0x41cf26(0x840)]===Sprite_Actor)_0x5b7f6e+=_0x37ee96['Actor'][_0x41cf26(0x163)]||0x0,_0x1e1f11+=_0x37ee96['Actor'][_0x41cf26(0x8f0)]||0x0;else this['constructor']===Sprite_Enemy&&(_0x5b7f6e+=_0x37ee96[_0x41cf26(0xa08)]['OffsetX']||0x0,_0x1e1f11+=_0x37ee96[_0x41cf26(0xa08)]['OffsetY']||0x0);(this[_0x41cf26(0xab7)]!==_0x5b7f6e||this['_targetHomeY']!==_0x1e1f11)&&(this[_0x41cf26(0xab7)]=_0x5b7f6e,this[_0x41cf26(0x2cc)]=_0x1e1f11,this[_0x41cf26(0x9cc)]=_0x5a472b,this['_homeWholeDuration']=_0x5a472b,this[_0x41cf26(0xb75)]=_0x271d7c,_0x5a472b<=0x0&&this[_0x41cf26(0x8bd)]());},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x144)]=function(){const _0xe4148b=_0xabeb6b;if(this['_homeDuration']<=0x0)return;const _0x52bf9d=this[_0xe4148b(0x9cc)],_0x19c8d1=this[_0xe4148b(0x431)],_0x373c81=this[_0xe4148b(0xb75)];Imported[_0xe4148b(0x765)]?(this[_0xe4148b(0x615)]=this[_0xe4148b(0xa03)](this['_homeX'],this['_targetHomeX'],_0x52bf9d,_0x19c8d1,_0x373c81),this[_0xe4148b(0x3a2)]=this[_0xe4148b(0xa03)](this[_0xe4148b(0x3a2)],this[_0xe4148b(0x2cc)],_0x52bf9d,_0x19c8d1,_0x373c81)):(this[_0xe4148b(0x615)]=(this[_0xe4148b(0x615)]*(_0x52bf9d-0x1)+this[_0xe4148b(0xab7)])/_0x52bf9d,this[_0xe4148b(0x3a2)]=(this['_homeY']*(_0x52bf9d-0x1)+this[_0xe4148b(0x2cc)])/_0x52bf9d);this[_0xe4148b(0x9cc)]--;if(this['_homeDuration']<=0x0)this[_0xe4148b(0x8bd)]();},Sprite_Battler['prototype'][_0xabeb6b(0x8bd)]=function(){const _0x307f6c=_0xabeb6b;this[_0x307f6c(0x615)]=this[_0x307f6c(0xab7)],this[_0x307f6c(0x3a2)]=this[_0x307f6c(0x2cc)];},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xae8)]=function(){const _0x387ef9=_0xabeb6b;this['_baseX']=this['x'],this[_0x387ef9(0xb85)]=this['y'],this[_0x387ef9(0x13b)](),this[_0x387ef9(0x72c)](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x387ef9(0x36c)](),this['y']+=this[_0x387ef9(0x15d)](),this['x']=Math[_0x387ef9(0x108)](this['x']),this['y']=Math[_0x387ef9(0x108)](this['y']);},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xb21)]=function(){let _0x188461=0x0;return _0x188461;},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x36c)]=function(){const _0x190d79=_0xabeb6b;let _0xf612ea=0x0;return this[_0x190d79(0x2aa)]&&!this[_0x190d79(0x2aa)][_0x190d79(0x8f3)]()&&(_0xf612ea-=this['_floatHeight'],_0xf612ea-=this[_0x190d79(0x5a7)]),_0xf612ea;},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x15d)]=function(){const _0x1b28ba=_0xabeb6b;let _0x34a5cd=0x0;if(this[_0x1b28ba(0x277)]&&this['constructor']!==Sprite_SvEnemy){const _0x300c52=this[_0x1b28ba(0x277)][_0x1b28ba(0xb4d)]['y'];_0x34a5cd-=(_0x300c52-0x1)*this[_0x1b28ba(0x1ee)];}return _0x34a5cd;},Sprite_Battler['prototype'][_0xabeb6b(0x4d9)]=function(){const _0x49b267=_0xabeb6b,_0x3c89ea=this[_0x49b267(0x2aa)]&&this[_0x49b267(0x2aa)][_0x49b267(0x94b)]();this[_0x49b267(0x1d3)]=(_0x3c89ea?-0x1:0x1)*Math[_0x49b267(0x7e9)](this[_0x49b267(0xb4d)]['x']);},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xa98)]=function(_0x296788,_0x2ce6ac,_0x4bbf1e){const _0xcdd0ba=_0xabeb6b;if(!this['canMove']())return;if(this[_0xcdd0ba(0xaca)]===_0x296788)return;this[_0xcdd0ba(0xaca)]=_0x296788,this[_0xcdd0ba(0x801)]=_0x2ce6ac,this[_0xcdd0ba(0x194)]=_0x2ce6ac,this[_0xcdd0ba(0x604)]=_0x4bbf1e||_0xcdd0ba(0x899);if(_0x2ce6ac<=0x0)this[_0xcdd0ba(0x1b9)]=_0x296788;},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x13b)]=function(){const _0x44593a=_0xabeb6b;if(this[_0x44593a(0x801)]<=0x0)return;const _0x1aa801=this['_floatDuration'],_0x45298c=this['_floatWholeDuration'],_0x39f04a=this['_floatEasing'];Imported[_0x44593a(0x765)]?this[_0x44593a(0x1b9)]=this['applyEasing'](this[_0x44593a(0x1b9)],this[_0x44593a(0xaca)],_0x1aa801,_0x45298c,_0x39f04a):this[_0x44593a(0x1b9)]=(this[_0x44593a(0x1b9)]*(_0x1aa801-0x1)+this[_0x44593a(0xaca)])/_0x1aa801;this[_0x44593a(0x801)]--;if(this['_floatDuration']<=0x0)this['onFloatEnd']();},Sprite_Battler['prototype'][_0xabeb6b(0x8d6)]=function(){const _0x11ae0d=_0xabeb6b;this[_0x11ae0d(0x1b9)]=this[_0x11ae0d(0xaca)];},Sprite_Battler['prototype'][_0xabeb6b(0x989)]=function(){const _0x1de879=_0xabeb6b;return this[_0x1de879(0x801)]>0x0;},Sprite_Battler[_0xabeb6b(0xc8)]['startJump']=function(_0x2769e2,_0x459998){const _0x4f66f1=_0xabeb6b;if(!this[_0x4f66f1(0x84a)]())return;if(_0x459998<=0x0)return;this[_0x4f66f1(0x80e)]=_0x2769e2,this[_0x4f66f1(0xb7c)]=_0x459998,this[_0x4f66f1(0x792)]=_0x459998;},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x72c)]=function(){const _0x4a845c=_0xabeb6b;if(this[_0x4a845c(0xb7c)]<=0x0)return;const _0x35d264=this[_0x4a845c(0x792)]-this[_0x4a845c(0xb7c)],_0x4e2aca=this[_0x4a845c(0x792)]/0x2,_0x2756a2=this[_0x4a845c(0x80e)],_0xd1a4d=-_0x2756a2/Math[_0x4a845c(0x72a)](_0x4e2aca,0x2);this[_0x4a845c(0x5a7)]=_0xd1a4d*Math[_0x4a845c(0x72a)](_0x35d264-_0x4e2aca,0x2)+_0x2756a2,this['_jumpDuration']--;if(this['_jumpDuration']<=0x0)return this[_0x4a845c(0x606)]();},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x606)]=function(){const _0x4f3812=_0xabeb6b;this[_0x4f3812(0x5a7)]=0x0;},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xc1)]=function(){const _0x1a8901=_0xabeb6b;return this[_0x1a8901(0xb7c)]>0x0;},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x447)]=function(_0x462d15,_0x3d6234,_0xd8a0f9){const _0x20185b=_0xabeb6b;if(this[_0x20185b(0x18e)]===_0x462d15)return;this[_0x20185b(0x18e)]=_0x462d15,this[_0x20185b(0x8d5)]=_0x3d6234,this[_0x20185b(0x35d)]=_0x3d6234,this[_0x20185b(0x77e)]=_0xd8a0f9||'Linear';if(_0x3d6234<=0x0)this[_0x20185b(0x9ac)]=_0x462d15;},Sprite_Battler[_0xabeb6b(0xc8)]['updateOpacity']=function(){const _0x5ebeda=_0xabeb6b;if(this[_0x5ebeda(0x840)][_0x5ebeda(0x6e8)]===_0x5ebeda(0x691))return;if(this[_0x5ebeda(0x8d5)]<=0x0)return;const _0x339c4b=this[_0x5ebeda(0x8d5)],_0x47284c=this['_opacityWholeDuration'],_0x2f44a9=this[_0x5ebeda(0x77e)];Imported[_0x5ebeda(0x765)]?this['opacity']=this['applyEasing'](this[_0x5ebeda(0x9ac)],this['_targetOpacity'],_0x339c4b,_0x47284c,_0x2f44a9):this[_0x5ebeda(0x9ac)]=(this[_0x5ebeda(0x9ac)]*(_0x339c4b-0x1)+this[_0x5ebeda(0x18e)])/_0x339c4b;this[_0x5ebeda(0x8d5)]--;if(this[_0x5ebeda(0x8d5)]<=0x0)this[_0x5ebeda(0x972)]();},Sprite_Battler[_0xabeb6b(0xc8)]['onOpacityEnd']=function(){this['opacity']=this['_targetOpacity'];},Sprite_Battler['prototype']['isChangingOpacity']=function(){const _0x483ccc=_0xabeb6b;return this[_0x483ccc(0x8d5)]>0x0;},Sprite_Battler['prototype'][_0xabeb6b(0x817)]=function(){const _0x2566eb=_0xabeb6b;this[_0x2566eb(0x43c)][_0x2566eb(0xbc2)]=this[_0x2566eb(0x2aa)][_0x2566eb(0x5dc)](),this['updateShadowPosition']();},Sprite_Battler['prototype'][_0xabeb6b(0xa78)]=function(){const _0x212912=_0xabeb6b;if(!this[_0x212912(0x43c)])return;this[_0x212912(0x43c)]['y']=this['_baseY']-this['y']-0x2;},Sprite_Battler[_0xabeb6b(0xc8)]['updateShadowScale']=function(){const _0x11f963=_0xabeb6b;if(!this[_0x11f963(0x2aa)])return;this[_0x11f963(0x535)]=this[_0x11f963(0x2aa)][_0x11f963(0x5eb)](),this[_0x11f963(0x9d2)]=this['_battler'][_0x11f963(0x8f8)]();},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x5eb)]=function(){const _0x16f332=_0xabeb6b,_0x4f9f25=this[_0x16f332(0xb6a)]()?this[_0x16f332(0x70a)]():this[_0x16f332(0x7d3)]();if(_0x4f9f25){const _0x3c84dc=_0x4f9f25[_0x16f332(0x6f8)];if(_0x3c84dc['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x3c84dc[_0x16f332(0xef)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x8f8)]=function(){const _0x50a096=_0xabeb6b,_0x420a47=this[_0x50a096(0xb6a)]()?this['actor']():this[_0x50a096(0x7d3)]();if(_0x420a47){const _0x32efd5=_0x420a47[_0x50a096(0x6f8)];if(_0x32efd5[_0x50a096(0xef)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x32efd5[_0x50a096(0xef)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler['prototype'][_0xabeb6b(0x405)]=function(){const _0x150662=_0xabeb6b;if(this[_0x150662(0x840)]===Sprite_SvEnemy)return;this['updateGrow'](),this[_0x150662(0x662)]();},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x662)]=function(){const _0x4041b7=_0xabeb6b,_0x34191f=this['_distortionSprite'];_0x34191f&&(_0x34191f['scale']['x']=this[_0x4041b7(0x3f5)](),_0x34191f[_0x4041b7(0xb4d)]['y']=this[_0x4041b7(0x4aa)]());},Sprite_Battler['prototype'][_0xabeb6b(0x3f5)]=function(){const _0xc1fb7c=_0xabeb6b;let _0x518d20=0x1;return _0x518d20*=this[_0xc1fb7c(0x1d3)],_0x518d20*=this['_growX'],_0x518d20;},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x4aa)]=function(){const _0x39210a=_0xabeb6b;return 0x1*this[_0x39210a(0x167)];},Sprite_Battler['prototype']['mainSpriteWidth']=function(){const _0x5b9388=_0xabeb6b;return this['width']*this[_0x5b9388(0x3f5)]();},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x530)]=function(){const _0x3ecebb=_0xabeb6b;return this['height']*this[_0x3ecebb(0x4aa)]();},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x952)]=function(_0x172e1a,_0x18c948,_0x34bddf,_0x3513f4){const _0x3fb4ec=_0xabeb6b;if(!this['canMove']())return;if(!this['_distortionSprite'])return;if(this[_0x3fb4ec(0x3ff)]===_0x172e1a&&this['_targetGrowY']===_0x18c948)return;this[_0x3fb4ec(0x3ff)]=_0x172e1a,this['_targetGrowY']=_0x18c948,this[_0x3fb4ec(0x1c0)]=_0x34bddf,this[_0x3fb4ec(0xaeb)]=_0x34bddf,this['_growEasing']=_0x3513f4||'Linear',_0x34bddf<=0x0&&(this['_growX']=this['_targetGrowX'],this[_0x3fb4ec(0x167)]=this['_targetGrowY']);},Sprite_Battler['prototype']['updateGrow']=function(){const _0x74ab74=_0xabeb6b;if(this['_growDuration']<=0x0)return;if(!this['_distortionSprite'])return;const _0x34f900=this[_0x74ab74(0x1c0)],_0x14b698=this['_growWholeDuration'],_0x51bc19=this[_0x74ab74(0xa7e)];Imported['VisuMZ_0_CoreEngine']?(this[_0x74ab74(0x725)]=this[_0x74ab74(0xa03)](this[_0x74ab74(0x725)],this[_0x74ab74(0x3ff)],_0x34f900,_0x14b698,_0x51bc19),this['_growY']=this[_0x74ab74(0xa03)](this[_0x74ab74(0x167)],this[_0x74ab74(0x238)],_0x34f900,_0x14b698,_0x51bc19)):(this['_growX']=(this[_0x74ab74(0x725)]*(_0x34f900-0x1)+this[_0x74ab74(0x3ff)])/_0x34f900,this[_0x74ab74(0x167)]=(this[_0x74ab74(0x167)]*(_0x34f900-0x1)+this['_targetGrowY'])/_0x34f900);this['_growDuration']--;if(this['_growDuration']<=0x0)this[_0x74ab74(0x1d5)]();},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x1d5)]=function(){const _0xae5ff1=_0xabeb6b;this[_0xae5ff1(0x725)]=this[_0xae5ff1(0x3ff)],this['_growY']=this[_0xae5ff1(0x238)];},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x7d1)]=function(){const _0xc6ce09=_0xabeb6b;return this[_0xc6ce09(0x1c0)]>0x0;},Sprite_Battler['prototype'][_0xabeb6b(0x486)]=function(_0x4e9af7,_0x1f4686,_0x3940c8,_0x1a5f8b){const _0x41e95a=_0xabeb6b;if(!this[_0x41e95a(0x84a)]())return;if(!this['_distortionSprite'])return;if(this[_0x41e95a(0x354)]===_0x4e9af7&&this[_0x41e95a(0x6dc)]===_0x1f4686)return;this[_0x41e95a(0x354)]=_0x4e9af7,this[_0x41e95a(0x6dc)]=_0x1f4686,this[_0x41e95a(0x665)]=_0x3940c8,this[_0x41e95a(0x9d6)]=_0x3940c8,this[_0x41e95a(0x8a6)]=_0x1a5f8b||_0x41e95a(0x899),_0x3940c8<=0x0&&(this[_0x41e95a(0x277)]['skew']['x']=this[_0x41e95a(0x354)],this['_distortionSprite'][_0x41e95a(0x89c)]['y']=this[_0x41e95a(0x6dc)]);},Sprite_Battler[_0xabeb6b(0xc8)]['updateSkew']=function(){const _0x7f6d4d=_0xabeb6b;if(this[_0x7f6d4d(0x665)]<=0x0)return;if(!this[_0x7f6d4d(0x277)])return;const _0xb0a398=this[_0x7f6d4d(0x665)],_0xc3cc15=this[_0x7f6d4d(0x9d6)],_0x21e275=this[_0x7f6d4d(0x8a6)],_0x45060d=this[_0x7f6d4d(0x277)];Imported[_0x7f6d4d(0x765)]?(_0x45060d['skew']['x']=this[_0x7f6d4d(0xa03)](_0x45060d['skew']['x'],this[_0x7f6d4d(0x354)],_0xb0a398,_0xc3cc15,_0x21e275),_0x45060d[_0x7f6d4d(0x89c)]['y']=this[_0x7f6d4d(0xa03)](_0x45060d[_0x7f6d4d(0x89c)]['y'],this[_0x7f6d4d(0x6dc)],_0xb0a398,_0xc3cc15,_0x21e275)):(_0x45060d[_0x7f6d4d(0x89c)]['x']=(_0x45060d[_0x7f6d4d(0x89c)]['x']*(_0xb0a398-0x1)+this[_0x7f6d4d(0x354)])/_0xb0a398,_0x45060d[_0x7f6d4d(0x89c)]['y']=(_0x45060d[_0x7f6d4d(0x89c)]['y']*(_0xb0a398-0x1)+this[_0x7f6d4d(0x6dc)])/_0xb0a398);this['_skewDuration']--;if(this[_0x7f6d4d(0x665)]<=0x0)this['onSkewEnd']();},Sprite_Battler['prototype'][_0xabeb6b(0x396)]=function(){const _0x1f1781=_0xabeb6b;this[_0x1f1781(0x277)][_0x1f1781(0x89c)]['x']=this[_0x1f1781(0x354)],this['_distortionSprite'][_0x1f1781(0x89c)]['y']=this['_targetSkewY'];},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x276)]=function(){const _0xaa6be1=_0xabeb6b;return this[_0xaa6be1(0x665)]>0x0;},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x463)]=function(_0x3a0e67,_0x24358d,_0x1f49b6,_0x3d111d){const _0x5a3991=_0xabeb6b;if(!this[_0x5a3991(0x84a)]())return;if(!this[_0x5a3991(0x277)])return;if(this[_0x5a3991(0x14c)]===_0x3a0e67)return;this[_0x5a3991(0x14c)]=_0x3a0e67,this['_angleDuration']=_0x24358d,this[_0x5a3991(0x82a)]=_0x24358d,this[_0x5a3991(0x914)]=_0x1f49b6||_0x5a3991(0x899),this[_0x5a3991(0x82b)]=_0x3d111d,this['_angleRevertOnFinish']===undefined&&(this['_angleRevertOnFinish']=!![]),_0x24358d<=0x0&&(this[_0x5a3991(0x539)]=_0x3a0e67,this[_0x5a3991(0x82b)]&&(this[_0x5a3991(0x14c)]=0x0,this['_currentAngle']=0x0));},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xdd)]=function(){const _0x2f15d0=_0xabeb6b;this[_0x2f15d0(0x821)](),this[_0x2f15d0(0x485)]();},Sprite_Battler['prototype']['updateAngleCalculations']=function(){const _0x2b8056=_0xabeb6b;if(this['_angleDuration']<=0x0)return;const _0x515789=this['_angleDuration'],_0x33940c=this[_0x2b8056(0x82a)],_0x2359a5=this[_0x2b8056(0x914)];Imported[_0x2b8056(0x765)]?this[_0x2b8056(0x539)]=this['applyEasing'](this[_0x2b8056(0x539)],this['_targetAngle'],_0x515789,_0x33940c,_0x2359a5):this[_0x2b8056(0x539)]=(this[_0x2b8056(0x539)]*(_0x515789-0x1)+this['_targetAngle'])/_0x515789;this[_0x2b8056(0xcf)]--;if(this[_0x2b8056(0xcf)]<=0x0)this[_0x2b8056(0x6d0)]();},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x6d0)]=function(){const _0x3aed9e=_0xabeb6b;this[_0x3aed9e(0x539)]=this[_0x3aed9e(0x14c)],this['_angleRevertOnFinish']&&(this[_0x3aed9e(0x14c)]=0x0,this[_0x3aed9e(0x539)]=0x0);},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x314)]=function(){const _0x17af8b=_0xabeb6b;return this[_0x17af8b(0xcf)]>0x0;},Sprite_Battler[_0xabeb6b(0xc8)]['applyAngleChange']=function(){const _0x51e0aa=_0xabeb6b;if(!this[_0x51e0aa(0x277)])return;const _0xa50b32=this['_currentAngle'],_0x54167e=this[_0x51e0aa(0xb4d)]['x'],_0x4e269d=this[_0x51e0aa(0x2aa)][_0x51e0aa(0xb6a)]()?-0x1:0x1;this[_0x51e0aa(0x277)][_0x51e0aa(0x8ad)]=_0xa50b32*_0x54167e*_0x4e269d;const _0x272200=this['_distortionSprite'][_0x51e0aa(0xb4d)]['y'];this['_distortionSprite']['y']=this[_0x51e0aa(0x1ee)]*-0.5*(0x2-_0x272200),this[_0x51e0aa(0x277)]['y']=Math[_0x51e0aa(0x534)](this[_0x51e0aa(0x277)]['y']);const _0x39d5a8=[this[_0x51e0aa(0x9f0)],this[_0x51e0aa(0x766)],this[_0x51e0aa(0x211)]];for(const _0x183e1e of _0x39d5a8){if(!_0x183e1e)continue;_0x183e1e['y']=this[_0x51e0aa(0x1ee)]*0.5;}this[_0x51e0aa(0x43c)]&&(this[_0x51e0aa(0x535)]=this['_shadowScaleX']??0x1,this['_shadowScaleY']=this['_shadowScaleY']??0x1,this[_0x51e0aa(0x43c)][_0x51e0aa(0xb4d)]['x']=this['_distortionSprite'][_0x51e0aa(0xb4d)]['x']*this[_0x51e0aa(0x535)],this[_0x51e0aa(0x43c)][_0x51e0aa(0xb4d)]['y']=this['_distortionSprite'][_0x51e0aa(0xb4d)]['y']*this['_shadowScaleY']);},VisuMZ[_0xabeb6b(0x553)]['Sprite_Actor_createStateSprite']=Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x12d)],Sprite_Actor['prototype'][_0xabeb6b(0x12d)]=function(){const _0x3b3587=_0xabeb6b;VisuMZ['BattleCore'][_0x3b3587(0x25d)][_0x3b3587(0x378)](this),VisuMZ[_0x3b3587(0x553)]['Settings'][_0x3b3587(0x2f4)]['ShowActorGauge']&&this['createHpGaugeSprite']();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x3a3)]=Sprite_Enemy[_0xabeb6b(0xc8)]['createStateIconSprite'],Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x487)]=function(){const _0x32e8f1=_0xabeb6b;VisuMZ['BattleCore']['Settings'][_0x32e8f1(0x2f4)]['ShowEnemyGauge']&&this[_0x32e8f1(0x678)](),VisuMZ['BattleCore']['Sprite_Enemy_createStateIconSprite'][_0x32e8f1(0x378)](this);},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x678)]=function(){const _0x5ac82f=_0xabeb6b;if(!ConfigManager[_0x5ac82f(0x4a9)])return;if(this[_0x5ac82f(0x840)]===Sprite_SvEnemy)return;const _0x5071a=VisuMZ[_0x5ac82f(0x553)][_0x5ac82f(0x78f)][_0x5ac82f(0x2f4)],_0x322baa=new Sprite_HpGauge();_0x322baa['anchor']['x']=_0x5071a[_0x5ac82f(0x505)],_0x322baa[_0x5ac82f(0xb3e)]['y']=_0x5071a[_0x5ac82f(0x5e2)],_0x322baa[_0x5ac82f(0xb4d)]['x']=_0x322baa[_0x5ac82f(0xb4d)]['y']=_0x5071a['Scale'],this[_0x5ac82f(0x113)]=_0x322baa,this[_0x5ac82f(0x8d3)](this[_0x5ac82f(0x113)]),Spriteset_Battle['ANTI_TINT_UI']&&BattleManager['addChildToUiContainer'](this[_0x5ac82f(0x113)]);},VisuMZ['BattleCore'][_0xabeb6b(0x347)]=Sprite_Battler[_0xabeb6b(0xc8)]['setBattler'],Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x2b8)]=function(_0x5de953){const _0x36e3f1=_0xabeb6b,_0x149a24=this[_0x36e3f1(0x2aa)];VisuMZ[_0x36e3f1(0x553)][_0x36e3f1(0x347)][_0x36e3f1(0x378)](this,_0x5de953),this[_0x36e3f1(0x6e9)](_0x5de953);if(_0x149a24!==_0x5de953)this[_0x36e3f1(0xb23)]();},Sprite_Battler['prototype'][_0xabeb6b(0x6e9)]=function(_0x2d5ce0){const _0xba9e5e=_0xabeb6b;if(!_0x2d5ce0)return;if(!this['_hpGaugeSprite'])return;if(_0x2d5ce0[_0xba9e5e(0xb6a)]()){}else{if(_0x2d5ce0['isEnemy']()){if(this[_0xba9e5e(0x840)]===Sprite_SvEnemy&&!_0x2d5ce0['hasSvBattler']())return;}}this['_hpGaugeSprite']['setup'](_0x2d5ce0,'hp');},Sprite_Battler['prototype'][_0xabeb6b(0x3dc)]=function(){const _0x2734c2=_0xabeb6b;return this[_0x2734c2(0x2aa)]&&this[_0x2734c2(0x2aa)]['hasStaticSvBattler']();},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x36e)]=function(){const _0x2c56dd=_0xabeb6b,_0x2137d0=this['_mainSprite'][_0x2c56dd(0xac0)];if(!_0x2137d0)return;const _0x3c1272=_0x2137d0[_0x2c56dd(0x461)];let _0x4beb81=_0x2137d0[_0x2c56dd(0x1ee)];if(this[_0x2c56dd(0x2aa)][_0x2c56dd(0x69e)]()){if(this[_0x2c56dd(0xb1f)])_0x4beb81=Math['max'](0x0,this[_0x2c56dd(0xb1f)][_0x2c56dd(0x1ee)]-0x4);}this['_mainSprite'][_0x2c56dd(0x927)](0x0,0x0,_0x3c1272,_0x4beb81),this[_0x2c56dd(0x927)](0x0,0x0,_0x3c1272,_0x4beb81);},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x5a6)]=function(){const _0x352103=_0xabeb6b;if(!this[_0x352103(0x2aa)])return;if(!this[_0x352103(0x113)])return;const _0x25ffe1=VisuMZ[_0x352103(0x553)][_0x352103(0x78f)][_0x352103(0x2f4)],_0x4e655b=this[_0x352103(0x113)];_0x4e655b['visible']=this[_0x352103(0xc0)]();const _0x1728f6=_0x25ffe1[_0x352103(0x163)],_0x33dec3=_0x25ffe1['OffsetY'];_0x4e655b['x']=_0x1728f6,_0x4e655b['x']+=this[_0x352103(0x2aa)][_0x352103(0xb25)](),_0x4e655b['y']=-this['height']+_0x33dec3,_0x4e655b['y']+=this['_battler'][_0x352103(0x4f3)](),Spriteset_Battle[_0x352103(0x591)]&&SceneManager[_0x352103(0x483)]['_spriteset']&&(_0x4e655b['x']+=this['x'],_0x4e655b['y']+=this['y']);},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xc0)]=function(){const _0x2e1a5a=_0xabeb6b;if(!this[_0x2e1a5a(0x2aa)])return![];if(this[_0x2e1a5a(0x2aa)][_0x2e1a5a(0xb6a)]())return!![];if(this['_battler'][_0x2e1a5a(0xb6)]())return![];if(this[_0x2e1a5a(0x9ac)]<=0x0)return![];const _0x4a0e94=this['_battler'][_0x2e1a5a(0x7d3)]()['note'];if(_0x4a0e94[_0x2e1a5a(0xef)](/<SHOW HP GAUGE>/i))return!![];if(_0x4a0e94[_0x2e1a5a(0xef)](/<HIDE HP GAUGE>/i))return![];const _0x1f81fb=VisuMZ[_0x2e1a5a(0x553)][_0x2e1a5a(0x78f)]['HpGauge'];if(_0x1f81fb[_0x2e1a5a(0x7b0)]){if(_0x1f81fb['BTestBypass']&&BattleManager[_0x2e1a5a(0x31e)]())return!![];if(this[_0x2e1a5a(0x2aa)][_0x2e1a5a(0xb88)])return![];return this[_0x2e1a5a(0x2aa)][_0x2e1a5a(0x4ff)]();}return!![];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xa09)]=Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x40e)],Sprite_Battler[_0xabeb6b(0xc8)]['isMoving']=function(){const _0x3ed8be=_0xabeb6b;if(!this[_0x3ed8be(0x2aa)])return![];if(this[_0x3ed8be(0x9cc)]>0x0)return!![];return VisuMZ['BattleCore'][_0x3ed8be(0xa09)][_0x3ed8be(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x8be)]=Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xbc4)],Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0xbc4)]=function(_0x2e20a6,_0x177302,_0x3190b5){const _0x1bacec=_0xabeb6b;this[_0x1bacec(0x84a)]()&&VisuMZ['BattleCore']['Sprite_Battler_startMove'][_0x1bacec(0x378)](this,_0x2e20a6,_0x177302,_0x3190b5);},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x84a)]=function(){const _0x4a9083=_0xabeb6b;if(this[_0x4a9083(0x2aa)]&&this[_0x4a9083(0x2aa)]['isDead']())return![];if(this[_0x4a9083(0x2aa)]&&!this[_0x4a9083(0x2aa)][_0x4a9083(0x1bc)]())return![];return $gameSystem['isSideView']();},Sprite_Battler['prototype'][_0xabeb6b(0xe3)]=function(){},Sprite_Battler['prototype'][_0xabeb6b(0x84b)]=function(){const _0xc7ba90=_0xabeb6b;this[_0xc7ba90(0xbc4)](0x0,0x0,0xc);},Sprite_Battler[_0xabeb6b(0xc8)][_0xabeb6b(0x89e)]=function(){},Sprite_Battler['prototype']['stepFlinch']=function(){const _0x2cb29e=_0xabeb6b,_0x4e8c06=VisuMZ[_0x2cb29e(0x553)]['Settings']['Actor'],_0x230dc1=this[_0x2cb29e(0x2aa)]&&this['_battler'][_0x2cb29e(0xb6a)]()?0x1:-0x1,_0x3d208a=this['_baseX']-this[_0x2cb29e(0x615)]+_0x230dc1*_0x4e8c06[_0x2cb29e(0xa11)],_0x4d3c5=this[_0x2cb29e(0xb85)]-this[_0x2cb29e(0x3a2)]+_0x230dc1*_0x4e8c06[_0x2cb29e(0x353)],_0x43800c=_0x4e8c06['FlinchDuration'];this['startMove'](_0x3d208a,_0x4d3c5,_0x43800c);},Sprite_Battler[_0xabeb6b(0xc8)]['startShakeFlinch']=function(_0x29e878,_0x4c201f){const _0x389b13=_0xabeb6b,_0x363edd=VisuMZ['BattleCore'][_0x389b13(0x78f)][_0x389b13(0x2b0)];this[_0x389b13(0x5e3)]=Math[_0x389b13(0x534)]((_0x363edd[_0x389b13(0x807)]??0x18)*_0x4c201f),this['_shakeFlinchPower']=Math[_0x389b13(0xb72)](this[_0x389b13(0x41c)],_0x29e878);},Sprite_Battler['prototype'][_0xabeb6b(0x89f)]=function(){const _0x3d4c38=_0xabeb6b,_0x555b37=VisuMZ[_0x3d4c38(0x553)][_0x3d4c38(0x78f)][_0x3d4c38(0x2b0)];if(!(_0x555b37[_0x3d4c38(0xb1a)]??![]))return;if(this[_0x3d4c38(0x5e3)]>0x0){const _0x327b00=this[_0x3d4c38(0x5e3)];this[_0x3d4c38(0x41c)]=this['_shakeFlinchPower']*(_0x327b00-0x1)/_0x327b00,this[_0x3d4c38(0x5e3)]--,this[_0x3d4c38(0x5e3)]<=0x0&&(this[_0x3d4c38(0x41c)]=0x0);}this[_0x3d4c38(0x41c)]>0x0?(this[_0x3d4c38(0x9f0)]['x']=Math[_0x3d4c38(0xb4f)](this[_0x3d4c38(0x41c)])*(Math[_0x3d4c38(0x17c)]()<0.5?-0x1:0x1),this[_0x3d4c38(0xb85)]!==this['y']&&(this[_0x3d4c38(0x9f0)]['y']=this[_0x3d4c38(0x1ee)]*0.5,this[_0x3d4c38(0x9f0)]['y']+=Math[_0x3d4c38(0xb4f)](this['_shakeFlinchPower'])*(Math['random']()<0.5?-0x1:0x1))):(this[_0x3d4c38(0x9f0)]['x']=0x0,this['_mainSprite']['y']=this[_0x3d4c38(0x1ee)]*0.5);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x843)]=Sprite_Actor['prototype'][_0xabeb6b(0x4e0)],Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x4e0)]=function(){const _0x331a81=_0xabeb6b;VisuMZ[_0x331a81(0x553)][_0x331a81(0x843)][_0x331a81(0x378)](this),this[_0x331a81(0x6c1)]();},Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x392)]=function(){const _0x4a61e6=_0xabeb6b;return this[_0x4a61e6(0x277)]||this[_0x4a61e6(0x9f0)]||this;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x8c6)]=Sprite_Actor[_0xabeb6b(0xc8)]['moveToStartPosition'],Sprite_Actor['prototype'][_0xabeb6b(0xa46)]=function(){},Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x9aa)]=function(_0x232e3f){const _0x14a4fb=_0xabeb6b;if(SceneManager[_0x14a4fb(0x4b8)]())return;if(!_0x232e3f)return;if(!_0x232e3f[_0x14a4fb(0x84a)]())return;VisuMZ['BattleCore'][_0x14a4fb(0x8c6)][_0x14a4fb(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xa9a)]=Sprite_Actor[_0xabeb6b(0xc8)]['setActorHome'],Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x413)]=function(_0x36694f){const _0x530631=_0xabeb6b;VisuMZ[_0x530631(0x553)][_0x530631(0x78f)][_0x530631(0x2b0)]['HomePosJS']?VisuMZ[_0x530631(0x553)][_0x530631(0x78f)][_0x530631(0x2b0)][_0x530631(0x3ca)][_0x530631(0x378)](this,_0x36694f):VisuMZ[_0x530631(0x553)][_0x530631(0xa9a)][_0x530631(0x378)](this,_0x36694f);},VisuMZ['BattleCore'][_0xabeb6b(0x1a3)]=Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x2b8)],Sprite_Actor['prototype'][_0xabeb6b(0x2b8)]=function(_0x804c54){const _0x375e0f=_0xabeb6b;VisuMZ[_0x375e0f(0x553)][_0x375e0f(0x1a3)][_0x375e0f(0x378)](this,_0x804c54),this[_0x375e0f(0x649)](_0x804c54);},Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x649)]=function(_0x46c23b){const _0x2755f8=_0xabeb6b;if(!_0x46c23b)return;if(!this[_0x2755f8(0x9f0)])return;this[_0x2755f8(0x9f0)][_0x2755f8(0xb3e)]['x']=this[_0x2755f8(0xb2d)]['svBattlerAnchorX'](),this['_mainSprite']['anchor']['y']=this['_actor']['svBattlerAnchorY'](),this['updateShadowVisibility']();},VisuMZ[_0xabeb6b(0x553)]['Sprite_Actor_update']=Sprite_Actor['prototype'][_0xabeb6b(0x5bc)],Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x5bc)]=function(){const _0x2e0c22=_0xabeb6b;VisuMZ[_0x2e0c22(0x553)][_0x2e0c22(0x180)][_0x2e0c22(0x378)](this),this[_0x2e0c22(0xb2d)]&&(this['updateStateSprite'](),this['updateStyleOpacity']());},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x704)]=Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x7a8)],Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x7a8)]=function(){const _0x1a5511=_0xabeb6b;VisuMZ[_0x1a5511(0x553)][_0x1a5511(0x704)][_0x1a5511(0x378)](this),this[_0x1a5511(0x9f0)]&&this['_mainSprite'][_0x1a5511(0xac0)]&&this[_0x1a5511(0x2aa)]&&(this[_0x1a5511(0x9f0)]['bitmap']['smooth']!==this[_0x1a5511(0x2aa)]['battlerSmoothImage']()&&(this[_0x1a5511(0x9f0)][_0x1a5511(0xac0)]['smooth']=this[_0x1a5511(0x2aa)]['battlerSmoothImage']()));},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x1e2)]=Sprite_Actor[_0xabeb6b(0xc8)]['updateShadow'],Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x817)]=function(){const _0x1e455b=_0xabeb6b;VisuMZ[_0x1e455b(0x553)][_0x1e455b(0x1e2)][_0x1e455b(0x378)](this),this[_0x1e455b(0xaa5)]();},Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0xaa5)]=function(){const _0x1e14cf=_0xabeb6b;if(!this[_0x1e14cf(0x9f0)])return;if(!this[_0x1e14cf(0x43c)])return;this[_0x1e14cf(0x1df)](),this[_0x1e14cf(0xa78)]();},Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0xb29)]=function(){const _0x4032ca=_0xabeb6b;{this[_0x4032ca(0x521)][_0x4032ca(0xb4d)]['x']=0x1/(this[_0x4032ca(0xb4d)]['x']||0.001),this[_0x4032ca(0x521)][_0x4032ca(0xb4d)]['y']=0x1/(this[_0x4032ca(0xb4d)]['y']||0.001);}{this[_0x4032ca(0x521)]['x']=0x0,this[_0x4032ca(0x521)]['y']=-this[_0x4032ca(0x1ee)]-0x20+0x60;const _0x2ed588=VisuMZ[_0x4032ca(0x553)]['Settings'][_0x4032ca(0x2b0)];this[_0x4032ca(0x521)]['x']+=_0x2ed588[_0x4032ca(0x7ff)]??0x0,this[_0x4032ca(0x521)]['y']+=_0x2ed588[_0x4032ca(0xa29)]??0x0;}},Sprite_Actor[_0xabeb6b(0xc8)]['updateStyleOpacity']=function(){const _0x242d17=_0xabeb6b;if(!$gameSystem[_0x242d17(0x4d5)]()&&this['constructor']===Sprite_Actor){const _0x2a5a88=Scene_Battle[_0x242d17(0xc8)][_0x242d17(0x3fb)]();[_0x242d17(0xfd),'list','portrait',_0x242d17(0x2d0)]['includes'](_0x2a5a88)&&(this[_0x242d17(0x9ac)]=0x0);}},Sprite_Actor[_0xabeb6b(0xc8)]['refreshMotion']=function(){const _0x1f5490=_0xabeb6b,_0x20ffd6=this[_0x1f5490(0xb2d)];if(_0x20ffd6){if(_0x20ffd6['_performDamageMotion'])return;const _0xc34f73=_0x20ffd6['stateMotionIndex']();if(_0x20ffd6[_0x1f5490(0x8bb)]()||_0x20ffd6[_0x1f5490(0x657)]())this[_0x1f5490(0x52a)](_0x1f5490(0xae3));else{if(_0xc34f73===0x3)this[_0x1f5490(0x52a)](_0x1f5490(0x8f2));else{if(_0xc34f73===0x2)this[_0x1f5490(0x52a)](_0x1f5490(0xbc0));else{if(this[_0x1f5490(0xbd4)])this[_0x1f5490(0x52a)](_0x1f5490(0x5db));else{if(_0x20ffd6[_0x1f5490(0x127)]())this[_0x1f5490(0x52a)](_0x1f5490(0x269));else{if(_0x20ffd6[_0x1f5490(0xa5e)]())this[_0x1f5490(0x52a)](_0x1f5490(0x9b0));else{if(_0x20ffd6[_0x1f5490(0x6a8)]()||_0x20ffd6[_0x1f5490(0x470)]())this['startMotion']('guard');else{if(_0xc34f73===0x1)this[_0x1f5490(0x52a)](_0x1f5490(0x3df));else{if(_0x20ffd6[_0x1f5490(0x17d)]())this['startMotion'](_0x1f5490(0x735));else{if(_0x20ffd6[_0x1f5490(0xaf8)]())this[_0x1f5490(0x52a)](_0x1f5490(0xae3));else _0x20ffd6[_0x1f5490(0x5ca)]()?this[_0x1f5490(0x52a)](_0x1f5490(0x269)):this[_0x1f5490(0x52a)](_0x1f5490(0xae3));}}}}}}}}}}},Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x89e)]=function(){const _0x8dde56=_0xabeb6b,_0x576c35=0xa,_0x28070f=0x12c*_0x576c35,_0x118cce=0x1e*_0x576c35;this[_0x8dde56(0xbc4)](_0x28070f,0x0,_0x118cce);},Sprite_Actor[_0xabeb6b(0xc8)]['onMoveEnd']=function(){const _0x571093=_0xabeb6b;Sprite_Battler[_0x571093(0xc8)][_0x571093(0x99b)][_0x571093(0x378)](this);},Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x74f)]=function(){const _0x5530d2=_0xabeb6b;return Sprite_Battler[_0x5530d2(0x723)];},Sprite_Weapon[_0xabeb6b(0xc8)]['animationWait']=function(){const _0x21cea8=_0xabeb6b;return Sprite_Battler[_0x21cea8(0x723)];},Sprite_Actor[_0xabeb6b(0xc8)]['setupMotion']=function(){},Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0xa24)]=function(){},Sprite_Actor['prototype'][_0xabeb6b(0x457)]=function(){const _0x39a290=_0xabeb6b;if(this['_motion']&&++this[_0x39a290(0x5b7)]>=this[_0x39a290(0x74f)]()){if(this['_motion'][_0x39a290(0x6cb)])this[_0x39a290(0xa72)]=(this[_0x39a290(0xa72)]+0x1)%0x4;else{if(this['_pattern']<0x2)this[_0x39a290(0xa72)]++;else{const _0x461f19=this[_0x39a290(0xb2d)];if(_0x461f19)_0x461f19['_performDamageMotion']=undefined;this['refreshMotion']();}}this[_0x39a290(0x5b7)]=0x0;}},Sprite_Actor[_0xabeb6b(0xc8)]['forceMotion']=function(_0xfd85b5){const _0x44596f=_0xabeb6b;if(this[_0x44596f(0x2aa)]&&this['_battler'][_0x44596f(0x69e)]()){this[_0x44596f(0x272)]=Sprite_Actor[_0x44596f(0x965)][_0x44596f(0x8f2)];return;}const _0x301690=Sprite_Actor[_0x44596f(0x965)][_0xfd85b5];this[_0x44596f(0x272)]=_0x301690,this[_0x44596f(0x5b7)]=0x0,this[_0x44596f(0xa72)]=0x0;},Sprite_Actor[_0xabeb6b(0xc8)]['forceWeaponAnimation']=function(_0x48ed32){const _0x237583=_0xabeb6b;if(this[_0x237583(0x3dc)]())return;this['adjustWeaponSpriteOffset'](),this[_0x237583(0x51d)][_0x237583(0x3a5)](_0x48ed32),this[_0x237583(0xb2d)]['clearWeaponAnimation']();},Sprite_Actor[_0xabeb6b(0xc8)]['adjustWeaponSpriteOffset']=function(){const _0x3ffda3=_0xabeb6b;let _0x496c88=-0x10,_0x16afcb=this[_0x3ffda3(0x1ee)]*0.5;const _0x490241=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x274ca7=this[_0x3ffda3(0x2aa)][_0x3ffda3(0xa17)]()[_0x3ffda3(0x614)](_0x574183=>_0x574183&&_0x574183['note'][_0x3ffda3(0xef)](_0x490241)?Number(RegExp['$1']):0x0),_0x33ccd4=this[_0x3ffda3(0x2aa)][_0x3ffda3(0xa17)]()[_0x3ffda3(0x614)](_0x3ca71d=>_0x3ca71d&&_0x3ca71d[_0x3ffda3(0x6f8)][_0x3ffda3(0xef)](_0x490241)?Number(RegExp['$2']):0x0);_0x496c88=_0x274ca7[_0x3ffda3(0x1f7)]((_0x4de87a,_0x3e141f)=>_0x4de87a+_0x3e141f,_0x496c88),_0x16afcb=_0x33ccd4['reduce']((_0x198e01,_0xd2de81)=>_0x198e01+_0xd2de81,_0x16afcb),this[_0x3ffda3(0x51d)]['x']=_0x496c88,this[_0x3ffda3(0x51d)]['y']=_0x16afcb,this[_0x3ffda3(0x51d)][_0x3ffda3(0x5bc)]();},Sprite_Weapon[_0xabeb6b(0xc8)][_0xabeb6b(0x3a5)]=function(_0x17237c){const _0x3760a7=_0xabeb6b;this[_0x3760a7(0x7b1)]=_0x17237c,this['_animationCount']=-0x1,this['_pattern']=0x0,this[_0x3760a7(0xa8c)](),this[_0x3760a7(0x88a)]();},Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x59d)]=function(){},Sprite_Actor[_0xabeb6b(0xc8)]['stepForward']=function(){const _0x132170=_0xabeb6b,_0x34b79e=VisuMZ[_0x132170(0x553)][_0x132170(0x78f)][_0x132170(0xc4)],_0x3123e5=_0x34b79e[_0x132170(0x2d2)],_0x152903=_0x34b79e['StepDistanceY'],_0x141b5d=_0x34b79e[_0x132170(0x501)];this[_0x132170(0xbc4)](-_0x3123e5,-_0x152903,_0x141b5d);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xbd7)]=Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x88a)],Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x88a)]=function(){const _0x2c4a21=_0xabeb6b;this['hasStaticSvBattler']()?this[_0x2c4a21(0x36e)]():(this[_0x2c4a21(0x7b3)](),VisuMZ[_0x2c4a21(0x553)][_0x2c4a21(0xbd7)]['call'](this));},Sprite_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x7b3)]=function(){const _0x497d46=_0xabeb6b;if(this[_0x497d46(0x2aa)]&&this[_0x497d46(0x2aa)][_0x497d46(0x726)]){const _0xcb676c=this[_0x497d46(0x2aa)][_0x497d46(0x726)];this[_0x497d46(0x272)]=Sprite_Actor[_0x497d46(0x965)][_0xcb676c[_0x497d46(0x192)]],this[_0x497d46(0xa72)]=_0xcb676c[_0x497d46(0xa54)];const _0x4dfed7=this[_0x497d46(0x51d)];_0x4dfed7[_0x497d46(0x38f)](_0xcb676c['weaponImageId'],_0xcb676c[_0x497d46(0xa54)]),this[_0x497d46(0x701)]();}},Sprite_Weapon['prototype'][_0xabeb6b(0x38f)]=function(_0x4168e4,_0x5027fb){const _0x24dec0=_0xabeb6b;this[_0x24dec0(0x7b1)]=_0x4168e4,this[_0x24dec0(0xa16)]=-Infinity,this[_0x24dec0(0xa72)]=_0x5027fb,this[_0x24dec0(0xa8c)](),this[_0x24dec0(0x88a)]();},Sprite_Enemy['prototype'][_0xabeb6b(0x4e0)]=function(){const _0x150a9f=_0xabeb6b;Sprite_Battler[_0x150a9f(0xc8)][_0x150a9f(0x4e0)][_0x150a9f(0x378)](this),this[_0x150a9f(0x1c8)]=null,this[_0x150a9f(0x611)]=![],this[_0x150a9f(0x253)]='',this[_0x150a9f(0x333)]=0x0,this[_0x150a9f(0x997)]=null,this[_0x150a9f(0x9fb)]=0x0,this[_0x150a9f(0x2ae)]=0x0,this[_0x150a9f(0x6d6)](),this[_0x150a9f(0x487)]();},VisuMZ['BattleCore']['Sprite_Enemy_update']=Sprite_Enemy['prototype']['update'],Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x5bc)]=function(){const _0x42de70=_0xabeb6b;VisuMZ[_0x42de70(0x553)][_0x42de70(0x173)][_0x42de70(0x378)](this),this[_0x42de70(0x1df)](),this[_0x42de70(0xafc)]();},Sprite_Enemy['prototype'][_0xabeb6b(0x6d6)]=function(){const _0x3511aa=_0xabeb6b;this[_0x3511aa(0x9f0)]=new Sprite(),this[_0x3511aa(0x9f0)][_0x3511aa(0xb3e)]['x']=0.5,this[_0x3511aa(0x9f0)][_0x3511aa(0xb3e)]['y']=0x1,this['addChild'](this[_0x3511aa(0x9f0)]),this[_0x3511aa(0x6c1)]();},Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x392)]=function(){const _0x529739=_0xabeb6b;return this['_distortionSprite']||this[_0x529739(0x9f0)]||this;},Sprite_Enemy['prototype'][_0xabeb6b(0xa8c)]=function(_0x343ff7){const _0x14f2fd=_0xabeb6b;this[_0x14f2fd(0xac0)]=new Bitmap(0x1,0x1);if(this[_0x14f2fd(0x5dc)]()){const _0x48781e=this[_0x14f2fd(0x1c8)][_0x14f2fd(0x8ae)]();this[_0x14f2fd(0xac0)]=new Bitmap(_0x48781e[_0x14f2fd(0x461)],_0x48781e[_0x14f2fd(0x1ee)]),this[_0x14f2fd(0x9f0)][_0x14f2fd(0xac0)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x14f2fd(0x4d5)]()){const _0x22820b=ImageManager[_0x14f2fd(0xa95)](_0x343ff7);_0x22820b[_0x14f2fd(0x642)](this[_0x14f2fd(0x97e)][_0x14f2fd(0xa39)](this,_0x22820b));}else{const _0x3309a5=ImageManager[_0x14f2fd(0x2db)](_0x343ff7);_0x3309a5['addLoadListener'](this[_0x14f2fd(0x97e)]['bind'](this,_0x3309a5));}}},Sprite_Enemy[_0xabeb6b(0xc8)]['onStaticEnemyBitmapLoad']=function(_0x1f9478){const _0x2f1076=_0xabeb6b;this['_mainSprite'][_0x2f1076(0xac0)]=_0x1f9478,this[_0x2f1076(0xac0)]=new Bitmap(_0x1f9478['width'],_0x1f9478['height']);},VisuMZ['BattleCore'][_0xabeb6b(0x86a)]=Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x3e9)],Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x3e9)]=function(_0x438a59){const _0x77e25f=_0xabeb6b;this[_0x77e25f(0x9f0)]&&this['_mainSprite'][_0x77e25f(0x3e9)](_0x438a59);},VisuMZ['BattleCore'][_0xabeb6b(0x1a7)]=Sprite_Enemy[_0xabeb6b(0xc8)]['initVisibility'],Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x888)]=function(){const _0xbb334=_0xabeb6b;this['allowCollapse']()?VisuMZ['BattleCore'][_0xbb334(0x1a7)][_0xbb334(0x378)](this):(this[_0xbb334(0x611)]=!this[_0xbb334(0x1c8)]['isHidden'](),!this[_0xbb334(0x611)]&&(this[_0xbb334(0x9ac)]=0x0));},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xadc)]=Sprite_Enemy[_0xabeb6b(0xc8)]['updateCollapse'],Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x40a)]=function(){const _0x30f03f=_0xabeb6b;if(this['allowCollapse']())VisuMZ[_0x30f03f(0x553)][_0x30f03f(0xadc)][_0x30f03f(0x378)](this);},Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x88a)]=function(){const _0x3bae50=_0xabeb6b;Sprite_Battler[_0x3bae50(0xc8)][_0x3bae50(0x88a)][_0x3bae50(0x378)](this);const _0x4ed0bf=this[_0x3bae50(0x392)]()||this;if(!_0x4ed0bf)return;!_0x4ed0bf['bitmap']&&(_0x4ed0bf[_0x3bae50(0xac0)]=new Bitmap(this[_0x3bae50(0x461)]||0x1,this[_0x3bae50(0x1ee)]||0x1));if(this['_effectType']===_0x3bae50(0xae1))this[_0x3bae50(0x9f0)][_0x3bae50(0x927)](0x0,0x0,this[_0x3bae50(0x9f0)]['width']||0x1,this[_0x3bae50(0x9fb)]);else{let _0x3e6cf3=0x1;if(_0x4ed0bf&&_0x4ed0bf[_0x3bae50(0xac0)])_0x3e6cf3=_0x4ed0bf['bitmap']['width'];let _0xb2910=0x1;if(this[_0x3bae50(0xac0)])_0xb2910=this[_0x3bae50(0xac0)][_0x3bae50(0x1ee)];_0x4ed0bf[_0x3bae50(0x927)](0x0,0x0,_0x3e6cf3,_0xb2910);}},VisuMZ['BattleCore'][_0xabeb6b(0xaae)]=Sprite_Enemy[_0xabeb6b(0xc8)]['updateBossCollapse'],Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x931)]=function(){const _0x26aca5=_0xabeb6b;if(this[_0x26aca5(0x695)]())VisuMZ[_0x26aca5(0x553)][_0x26aca5(0xaae)][_0x26aca5(0x378)](this);},Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x40e)]=function(){const _0x10dd5b=_0xabeb6b;return Sprite_Battler[_0x10dd5b(0xc8)]['isMoving'][_0x10dd5b(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x6b4)]=Sprite_Enemy[_0xabeb6b(0xc8)]['updateStateSprite'],Sprite_Enemy[_0xabeb6b(0xc8)]['updateStateSprite']=function(){const _0x50fbf8=_0xabeb6b;VisuMZ[_0x50fbf8(0x553)][_0x50fbf8(0x6b4)]['call'](this),this[_0x50fbf8(0x335)]();},Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x335)]=function(){const _0x1a4b9e=_0xabeb6b,_0x6edbc=VisuMZ[_0x1a4b9e(0x553)][_0x1a4b9e(0x78f)]['Enemy'];if(_0x6edbc[_0x1a4b9e(0x1c3)]&&!_0x6edbc[_0x1a4b9e(0x49a)]){this[_0x1a4b9e(0x299)][_0x1a4b9e(0x9ac)]=0x0;return;}this['_stateIconSprite']['x']=0x0,this[_0x1a4b9e(0x299)]['x']+=this[_0x1a4b9e(0x2aa)][_0x1a4b9e(0xb25)]();let _0x258888=0x1;if(this[_0x1a4b9e(0xac0)])_0x258888=this[_0x1a4b9e(0xac0)][_0x1a4b9e(0x1ee)];this[_0x1a4b9e(0x299)]['y']=-_0x258888-this[_0x1a4b9e(0x299)]['height']-0x4,this[_0x1a4b9e(0x299)]['y']+=this[_0x1a4b9e(0x2aa)][_0x1a4b9e(0x4f3)](),this[_0x1a4b9e(0x299)][_0x1a4b9e(0xb4d)]['x']=0x1/(this[_0x1a4b9e(0xb4d)]['x']||0.001),this[_0x1a4b9e(0x299)][_0x1a4b9e(0xb4d)]['y']=0x1/(this[_0x1a4b9e(0xb4d)]['y']||0.001),this[_0x1a4b9e(0x5dc)]()&&(this['_svBattlerSprite'][_0x1a4b9e(0x521)]['scale']['x']=-0x1/(this[_0x1a4b9e(0xb4d)]['x']||0.001),this[_0x1a4b9e(0x766)][_0x1a4b9e(0x521)]['scale']['y']=0x1/(this[_0x1a4b9e(0xb4d)]['y']||0.001));},Sprite_Enemy['prototype']['updateNameTempVisibility']=function(){const _0x2f09e9=_0xabeb6b;this[_0x2f09e9(0x2aa)]&&this[_0x2f09e9(0x2aa)][_0x2f09e9(0xafc)]();},VisuMZ['BattleCore'][_0xabeb6b(0x841)]=Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x2b8)],Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x2b8)]=function(_0x32aa2c){const _0x4502d9=_0xabeb6b;VisuMZ[_0x4502d9(0x553)][_0x4502d9(0x841)]['call'](this,_0x32aa2c),this[_0x4502d9(0x178)](_0x32aa2c);},Sprite_Enemy['prototype']['setSvBattlerSprite']=function(_0x399673){const _0x39eb2c=_0xabeb6b;!this[_0x39eb2c(0x766)]&&(this[_0x39eb2c(0x766)]=new Sprite_SvEnemy(_0x399673),this[_0x39eb2c(0x6c1)]()),this[_0x39eb2c(0x766)][_0x39eb2c(0x2b8)](_0x399673);},Sprite_Enemy[_0xabeb6b(0xc8)]['hasSvBattler']=function(){const _0x451a98=_0xabeb6b;return this[_0x451a98(0x1c8)]&&this[_0x451a98(0x1c8)][_0x451a98(0x5dc)]();},Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x695)]=function(){const _0x5de969=_0xabeb6b;return this[_0x5de969(0x5dc)]()?this[_0x5de969(0x1c8)][_0x5de969(0x695)]():!![];},Sprite_Enemy['prototype']['refreshMotion']=function(){const _0x5c0769=_0xabeb6b;this[_0x5c0769(0x5dc)]()&&this[_0x5c0769(0x766)][_0x5c0769(0x543)]();},Sprite_Enemy['prototype'][_0xabeb6b(0x45a)]=function(_0x311d65){const _0x4e0765=_0xabeb6b;if(this[_0x4e0765(0x5dc)]())this[_0x4e0765(0x766)][_0x4e0765(0x45a)](_0x311d65);},Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0x3a7)]=function(_0x44fc91){const _0x50af6c=_0xabeb6b;if(this['hasSvBattler']())this[_0x50af6c(0x766)][_0x50af6c(0x3a7)](_0x44fc91);},Sprite_Enemy[_0xabeb6b(0xc8)][_0xabeb6b(0xe3)]=function(){const _0x712230=_0xabeb6b,_0x1ec5a0=VisuMZ[_0x712230(0x553)]['Settings'][_0x712230(0xc4)],_0x42b356=_0x1ec5a0[_0x712230(0x2d2)],_0x20f79e=_0x1ec5a0['StepDistanceY'],_0x374b11=_0x1ec5a0['StepDuration'];this[_0x712230(0xbc4)](_0x42b356,_0x20f79e,_0x374b11);};function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy[_0xabeb6b(0xc8)]=Object[_0xabeb6b(0xa3b)](Sprite_Actor[_0xabeb6b(0xc8)]),Sprite_SvEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x840)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype']['initialize']=function(_0x14cafe){const _0x26ea69=_0xabeb6b;Sprite_Actor[_0x26ea69(0xc8)][_0x26ea69(0x8ea)]['call'](this,_0x14cafe),this[_0x26ea69(0xb4d)]['x']=-0x1,this[_0x26ea69(0x521)][_0x26ea69(0xb4d)]['x']=-0x1;},Sprite_SvEnemy['prototype'][_0xabeb6b(0x5ba)]=function(){},Sprite_SvEnemy['prototype'][_0xabeb6b(0xa46)]=function(){},Sprite_SvEnemy['prototype'][_0xabeb6b(0x413)]=function(_0x313dd9){},Sprite_SvEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x817)]=function(){},Sprite_SvEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0xa78)]=function(){},Sprite_SvEnemy[_0xabeb6b(0xc8)]['updateStateSprite']=function(){const _0x231321=_0xabeb6b;this[_0x231321(0x521)]['visible']=![];},Sprite_SvEnemy['prototype']['updateBitmap']=function(){const _0x3c7eb8=_0xabeb6b;Sprite_Battler[_0x3c7eb8(0xc8)][_0x3c7eb8(0x7a8)][_0x3c7eb8(0x378)](this);const _0x4f77ec=this[_0x3c7eb8(0xb2d)]['svBattlerName']();this[_0x3c7eb8(0x253)]!==_0x4f77ec&&(this[_0x3c7eb8(0x253)]=_0x4f77ec,this[_0x3c7eb8(0x9f0)]['bitmap']=ImageManager[_0x3c7eb8(0x5c2)](_0x4f77ec)),this[_0x3c7eb8(0x9f0)]&&this[_0x3c7eb8(0x9f0)][_0x3c7eb8(0xac0)]&&this[_0x3c7eb8(0x2aa)]&&(this['_mainSprite']['bitmap']['smooth']!==this[_0x3c7eb8(0x2aa)][_0x3c7eb8(0x8b8)]()&&(this[_0x3c7eb8(0x9f0)][_0x3c7eb8(0xac0)]['smooth']=this[_0x3c7eb8(0x2aa)][_0x3c7eb8(0x8b8)]()));},Sprite_SvEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x89e)]=function(){},Sprite_SvEnemy['prototype'][_0xabeb6b(0xbc4)]=function(_0xc8eea2,_0x4f11c2,_0x3cd8a6){const _0x57331d=_0xabeb6b;if(this[_0x57331d(0xacc)])this[_0x57331d(0xacc)][_0x57331d(0xbc4)](_0xc8eea2,_0x4f11c2,_0x3cd8a6);},Sprite_SvEnemy[_0xabeb6b(0xc8)]['refreshMotion']=function(){const _0x23b6bd=_0xabeb6b,_0x5a8ae7=this['_actor'];if(_0x5a8ae7){const _0xd13dde=_0x5a8ae7[_0x23b6bd(0x5d5)]();if(_0x5a8ae7[_0x23b6bd(0x8bb)]()||_0x5a8ae7[_0x23b6bd(0x657)]())this['startMotion'](_0x23b6bd(0xae3));else{if(_0xd13dde===0x3)this['startMotion'](_0x23b6bd(0x8f2));else{if(_0xd13dde===0x2)this[_0x23b6bd(0x52a)](_0x23b6bd(0xbc0));else{if(_0x5a8ae7[_0x23b6bd(0xa5e)]())this[_0x23b6bd(0x52a)](_0x23b6bd(0x9b0));else{if(_0x5a8ae7['isGuard']()||_0x5a8ae7[_0x23b6bd(0x470)]())this[_0x23b6bd(0x52a)](_0x23b6bd(0xb63));else{if(_0xd13dde===0x1)this[_0x23b6bd(0x52a)]('abnormal');else{if(_0x5a8ae7['isDying']())this['startMotion'](_0x23b6bd(0x735));else _0x5a8ae7[_0x23b6bd(0xaf8)]()?this[_0x23b6bd(0x52a)](_0x23b6bd(0xae3)):this[_0x23b6bd(0x52a)](_0x5a8ae7[_0x23b6bd(0x8ae)]()['motionIdle']||_0x23b6bd(0xae3));}}}}}}}},Sprite_SvEnemy['prototype'][_0xabeb6b(0xa1a)]=function(){const _0x45d062=_0xabeb6b;return this[_0x45d062(0xacc)]?this[_0x45d062(0xacc)][_0x45d062(0x911)]===0x0&&this[_0x45d062(0xacc)][_0x45d062(0xb06)]===0x0:!![];},Sprite_SvEnemy['prototype'][_0xabeb6b(0x4d9)]=function(){},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x26a)]=Sprite_Animation['prototype'][_0xabeb6b(0x6e7)],Sprite_Animation[_0xabeb6b(0xc8)][_0xabeb6b(0x6e7)]=function(_0x17fc2c){const _0x2f1689=_0xabeb6b;return _0x17fc2c[_0x2f1689(0x277)]?this[_0x2f1689(0x580)](_0x17fc2c):VisuMZ[_0x2f1689(0x553)]['Sprite_Animation_targetSpritePosition'][_0x2f1689(0x378)](this,_0x17fc2c);},Sprite_Animation['prototype'][_0xabeb6b(0x580)]=function(_0x32f5df){const _0x30932b=_0xabeb6b;let _0x322cab=_0x32f5df['x'],_0x108504=_0x32f5df['y'],_0xcc2e6d=_0x32f5df[_0x30932b(0x1ee)],_0x575843=_0x32f5df[_0x30932b(0x277)][_0x30932b(0xb4d)]['y'];_0x32f5df['x']=_0x32f5df[_0x30932b(0x945)]+_0x32f5df['extraPositionX'](),_0x32f5df['y']=_0x32f5df['_baseY']+_0x32f5df[_0x30932b(0x36c)](),_0x32f5df[_0x30932b(0x1ee)]*=_0x575843;let _0x585ac7=VisuMZ[_0x30932b(0x553)][_0x30932b(0x26a)][_0x30932b(0x378)](this,_0x32f5df);return _0x32f5df['x']=_0x322cab,_0x32f5df['y']=_0x108504,_0x32f5df[_0x30932b(0x1ee)]=_0xcc2e6d,_0x585ac7;},VisuMZ[_0xabeb6b(0x553)]['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV[_0xabeb6b(0xc8)]['updatePosition'],Sprite_AnimationMV[_0xabeb6b(0xc8)]['updatePosition']=function(){const _0x472618=_0xabeb6b;VisuMZ[_0x472618(0x553)][_0x472618(0xada)][_0x472618(0x378)](this);if(!SceneManager[_0x472618(0x87a)]())return;if(this[_0x472618(0xbc5)][_0x472618(0x451)]===0x3)this['x']=Math[_0x472618(0xb36)](Graphics['boxWidth']/0x2),this['y']=Math[_0x472618(0xb36)](Graphics[_0x472618(0x588)]/0x2);else{if(this[_0x472618(0xb8a)])return;}},Sprite_Damage[_0xabeb6b(0xc8)]['setupBattleCore']=function(_0x58e9af){const _0x1a224f=_0xabeb6b,_0x2d5910=_0x58e9af[_0x1a224f(0x2e4)]()||_0x58e9af['result']();if(_0x2d5910[_0x1a224f(0x8e8)]||_0x2d5910['evaded'])this[_0x1a224f(0xb64)]=0x0,this[_0x1a224f(0x752)]();else{if(_0x2d5910[_0x1a224f(0xbba)])this[_0x1a224f(0xb64)]=_0x2d5910[_0x1a224f(0x88b)]>=0x0?0x0:0x1,this[_0x1a224f(0x90e)](_0x2d5910[_0x1a224f(0x88b)]);else _0x58e9af[_0x1a224f(0x946)]()&&_0x2d5910[_0x1a224f(0x24e)]!==0x0&&(this['_colorType']=_0x2d5910[_0x1a224f(0x24e)]>=0x0?0x2:0x3,this['createDigits'](_0x2d5910['mpDamage']));}_0x2d5910[_0x1a224f(0x68c)]&&this[_0x1a224f(0x571)]();},Sprite_Damage[_0xabeb6b(0xc8)][_0xabeb6b(0x3a5)]=function(_0xe07508){},Sprite_Damage[_0xabeb6b(0xc8)][_0xabeb6b(0x90e)]=function(_0x866f11){const _0xbc7570=_0xabeb6b;let _0x53f8b1=this[_0xbc7570(0x197)](_0x866f11);const _0x17a028=this[_0xbc7570(0x8dd)](),_0x27163a=Math['floor'](_0x17a028*0.75);for(let _0x1b1d36=0x0;_0x1b1d36<_0x53f8b1[_0xbc7570(0x93a)];_0x1b1d36++){const _0x4fbc91=this[_0xbc7570(0x9c3)](_0x27163a,_0x17a028);_0x4fbc91[_0xbc7570(0xac0)][_0xbc7570(0x47a)](_0x53f8b1[_0x1b1d36],0x0,0x0,_0x27163a,_0x17a028,_0xbc7570(0x627)),_0x4fbc91['x']=(_0x1b1d36-(_0x53f8b1['length']-0x1)/0x2)*_0x27163a,_0x4fbc91['dy']=-_0x1b1d36;}},Sprite_Damage['prototype'][_0xabeb6b(0x197)]=function(_0x2fd0b4){const _0x283575=_0xabeb6b;let _0x349c2f=Math[_0x283575(0x7e9)](_0x2fd0b4)[_0x283575(0x722)]();this['useDigitGrouping']()&&(_0x349c2f=VisuMZ[_0x283575(0x346)](_0x349c2f));const _0x18d396=VisuMZ[_0x283575(0x553)][_0x283575(0x78f)][_0x283575(0x11a)];let _0x22dfc9='',_0x344303='';switch(this[_0x283575(0xb64)]){case 0x0:_0x22dfc9=_0x18d396[_0x283575(0x5c5)]||_0x283575(0x1f3),_0x344303=TextManager['hp'];if(_0x2fd0b4===0x0)_0x22dfc9='%1';break;case 0x1:_0x22dfc9=_0x18d396[_0x283575(0x2a8)]||_0x283575(0x983),_0x344303=TextManager['hp'];break;case 0x2:_0x22dfc9=_0x18d396[_0x283575(0x103)]||'-%1\x20MP',_0x344303=TextManager['mp'];break;case 0x3:_0x22dfc9=_0x18d396[_0x283575(0x975)]||_0x283575(0x904),_0x344303=TextManager['mp'];break;}return _0x22dfc9['format'](_0x349c2f,_0x344303)[_0x283575(0xd3)]();},Sprite_Damage[_0xabeb6b(0xc8)][_0xabeb6b(0x21c)]=function(){const _0x4cc6f1=_0xabeb6b;return Imported[_0x4cc6f1(0x765)]?VisuMZ[_0x4cc6f1(0x643)][_0x4cc6f1(0x78f)]['QoL'][_0x4cc6f1(0x31c)]:![];},Sprite_Damage[_0xabeb6b(0xc8)]['setupCriticalEffect']=function(){const _0x2a5fea=_0xabeb6b,_0x542a4c=VisuMZ[_0x2a5fea(0x553)]['Settings'][_0x2a5fea(0x11a)];_0x542a4c[_0x2a5fea(0x263)]=_0x542a4c['CriticalColor']||[0x0,0x0,0x0,0x0],this[_0x2a5fea(0xb12)]=_0x542a4c[_0x2a5fea(0x263)]['slice'](0x0),this[_0x2a5fea(0x71a)]=_0x542a4c[_0x2a5fea(0xabf)]||0x1;},Sprite_Damage[_0xabeb6b(0xc8)][_0xabeb6b(0x400)]=function(_0x5a42e2,_0x2c9ab0){const _0x377ac7=_0xabeb6b;this[_0x377ac7(0xb12)]=_0x2c9ab0[_0x377ac7(0x5a5)]||[0x0,0x0,0x0,0x0],this[_0x377ac7(0xb12)]=JsonEx[_0x377ac7(0x562)](this[_0x377ac7(0xb12)]),this[_0x377ac7(0x71a)]=_0x2c9ab0[_0x377ac7(0xad0)]||0x0;const _0x5d3945=this['fontSize'](),_0x5dbdbc=Math[_0x377ac7(0x108)](_0x5d3945*0x1e),_0x3034ef=this[_0x377ac7(0x9c3)](_0x5dbdbc,_0x5d3945);_0x3034ef[_0x377ac7(0xac0)][_0x377ac7(0x1f6)]=ColorManager[_0x377ac7(0x2c5)](_0x2c9ab0[_0x377ac7(0x1f6)]),_0x3034ef[_0x377ac7(0xac0)][_0x377ac7(0x47a)](_0x5a42e2,0x0,0x0,_0x5dbdbc,_0x5d3945,_0x377ac7(0x627)),_0x3034ef['dy']=0x0;},Sprite_Damage['prototype'][_0xabeb6b(0x280)]=function(_0x1f3cec,_0x304f90,_0x24c6c7){const _0x2e8206=_0xabeb6b,_0x213f78=Math[_0x2e8206(0xb72)](this[_0x2e8206(0x8dd)](),ImageManager[_0x2e8206(0x2fe)]),_0x3ad16c=Math['floor'](_0x213f78*0x1e),_0x70df7=this[_0x2e8206(0x9c3)](_0x3ad16c,_0x213f78),_0x9aec67=ImageManager[_0x2e8206(0x12a)]/0x2,_0x5d0a0=_0x70df7[_0x2e8206(0xac0)][_0x2e8206(0x889)](_0x304f90+'\x20');_0x70df7['bitmap']['textColor']=ColorManager[_0x2e8206(0x2c5)](_0x24c6c7['textColor']),_0x70df7['bitmap'][_0x2e8206(0x47a)](_0x304f90,_0x9aec67,0x0,_0x3ad16c-_0x9aec67,_0x213f78,_0x2e8206(0x627));const _0x315836=Math['round']((_0x213f78-ImageManager['iconHeight'])/0x2),_0x3fd991=_0x3ad16c/0x2-ImageManager[_0x2e8206(0x12a)]-_0x5d0a0/0x2+_0x9aec67/0x2,_0x1180bc=ImageManager[_0x2e8206(0x7a9)](_0x2e8206(0x64d)),_0x637621=ImageManager['iconWidth'],_0x4eb091=ImageManager[_0x2e8206(0x2fe)],_0x1d92e9=_0x1f3cec%0x10*_0x637621,_0x2051ff=Math[_0x2e8206(0x108)](_0x1f3cec/0x10)*_0x4eb091;_0x70df7[_0x2e8206(0xac0)]['blt'](_0x1180bc,_0x1d92e9,_0x2051ff,_0x637621,_0x4eb091,_0x3fd991,_0x315836),this['_flashColor']=_0x24c6c7['flashColor']||[0x0,0x0,0x0,0x0],this[_0x2e8206(0xb12)]=JsonEx['makeDeepCopy'](this[_0x2e8206(0xb12)]),this[_0x2e8206(0x71a)]=_0x24c6c7[_0x2e8206(0xad0)]||0x0,_0x70df7['dy']=0x0,_0x24c6c7[_0x2e8206(0x632)]&&(_0x70df7['x']+=_0x24c6c7[_0x2e8206(0x632)]),_0x24c6c7[_0x2e8206(0x39e)]&&(_0x70df7['dy']+=_0x24c6c7[_0x2e8206(0x39e)]);},VisuMZ['BattleCore'][_0xabeb6b(0xba9)]=Sprite_Damage[_0xabeb6b(0xc8)][_0xabeb6b(0x9c3)],Sprite_Damage[_0xabeb6b(0xc8)][_0xabeb6b(0x9c3)]=function(_0xf1ce5d,_0x534a95){const _0x5c0ec6=_0xabeb6b;return _0x534a95=Math[_0x5c0ec6(0xb36)](_0x534a95*1.2),VisuMZ[_0x5c0ec6(0x553)][_0x5c0ec6(0xba9)]['call'](this,_0xf1ce5d,_0x534a95);},VisuMZ[_0xabeb6b(0x553)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon[_0xabeb6b(0xc8)][_0xabeb6b(0x88a)],Sprite_StateIcon[_0xabeb6b(0xc8)]['updateFrame']=function(){const _0x533d28=_0xabeb6b;VisuMZ[_0x533d28(0x553)]['Sprite_StateIcon_updateFrame']['call'](this),this[_0x533d28(0x9ac)]=this[_0x533d28(0x740)]>0x0?0xff:0x0;},VisuMZ[_0xabeb6b(0x553)]['Sprite_Weapon_loadBitmap']=Sprite_Weapon['prototype'][_0xabeb6b(0xa8c)],Sprite_Weapon[_0xabeb6b(0xc8)][_0xabeb6b(0xa8c)]=function(){const _0x4ebf3b=_0xabeb6b;VisuMZ[_0x4ebf3b(0x553)][_0x4ebf3b(0x175)][_0x4ebf3b(0x378)](this),this[_0x4ebf3b(0xac0)]&&(this[_0x4ebf3b(0xac0)][_0x4ebf3b(0x20b)]=VisuMZ['BattleCore']['Settings'][_0x4ebf3b(0x2b0)][_0x4ebf3b(0xbdb)]);},VisuMZ[_0xabeb6b(0x553)]['Sprite_Gauge_smoothness']=Sprite_Gauge['prototype'][_0xabeb6b(0x6bc)],Sprite_Gauge[_0xabeb6b(0xc8)][_0xabeb6b(0x6bc)]=function(){const _0x793bd1=_0xabeb6b;return this[_0x793bd1(0x12e)]!==_0x793bd1(0x6dd)?VisuMZ[_0x793bd1(0x553)][_0x793bd1(0x78f)]['HpGauge'][_0x793bd1(0x217)]??0x14:VisuMZ[_0x793bd1(0x553)][_0x793bd1(0x71e)][_0x793bd1(0x378)](this);};function Sprite_GaugeRate(){this['initialize'](...arguments);}Sprite_GaugeRate['prototype']=Object['create'](Sprite_Gauge[_0xabeb6b(0xc8)]),Sprite_GaugeRate[_0xabeb6b(0xc8)]['constructor']=Sprite_GaugeRate,Sprite_GaugeRate[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)]=function(){const _0x18bc75=_0xabeb6b;Sprite_Gauge['prototype'][_0x18bc75(0x8ea)]['call'](this),this[_0x18bc75(0x33c)]=![];},Sprite_GaugeRate[_0xabeb6b(0xc8)]['updateTargetValue']=function(_0x1ebeb1,_0x1ac9d5){const _0xa16efb=_0xabeb6b;this[_0xa16efb(0x33c)]=!![],Sprite_Gauge[_0xa16efb(0xc8)]['updateTargetValue'][_0xa16efb(0x378)](this,_0x1ebeb1,_0x1ac9d5),this[_0xa16efb(0x33c)]=![];},Sprite_GaugeRate[_0xabeb6b(0xc8)][_0xabeb6b(0x73b)]=function(){const _0x2ab1b4=_0xabeb6b;if(this[_0x2ab1b4(0x33c)]){const _0x3da2c1=Sprite_Gauge[_0x2ab1b4(0xc8)][_0x2ab1b4(0x73b)][_0x2ab1b4(0x378)](this),_0x27d887=this['currentMaxValue']();if(_0x27d887<=0x0)return _0x2ab1b4(0x962);return Math[_0x2ab1b4(0x108)](_0x3da2c1/_0x27d887*0x64)+'%';}else return Sprite_Gauge['prototype'][_0x2ab1b4(0x73b)]['call'](this);},Sprite_GaugeRate[_0xabeb6b(0xc8)][_0xabeb6b(0x7d8)]=function(){const _0x450232=_0xabeb6b,_0x545af0=Sprite_Gauge[_0x450232(0xc8)][_0x450232(0x73b)][_0x450232(0x378)](this),_0x3cf418=this[_0x450232(0xa90)]();if(_0x3cf418<=0x0)return _0x450232(0x962);return Math['floor'](_0x545af0/_0x3cf418*0x64)+'%';},Sprite_GaugeRate['prototype'][_0xabeb6b(0x9a8)]=function(){const _0x1fe74b=_0xabeb6b;if(this[_0x1fe74b(0xa90)]()<=0x0)return 0x1;return Sprite_Gauge[_0x1fe74b(0xc8)][_0x1fe74b(0x9a8)][_0x1fe74b(0x378)](this);},Sprite_GaugeRate[_0xabeb6b(0xc8)][_0xabeb6b(0xb53)]=function(){const _0x223f14=_0xabeb6b;if(this[_0x223f14(0xa90)]()<=0x0)return ColorManager[_0x223f14(0x203)]();return Sprite_Gauge[_0x223f14(0xc8)][_0x223f14(0xb53)][_0x223f14(0x378)](this);},Sprite_GaugeRate[_0xabeb6b(0xc8)][_0xabeb6b(0xab8)]=function(){const _0x9b5c80=_0xabeb6b;this[_0x9b5c80(0x12e)]==='mp'&&this[_0x9b5c80(0xa90)]()<=0x0&&($gameTemp[_0x9b5c80(0x5bd)]=!![]),Sprite_Gauge['prototype'][_0x9b5c80(0xab8)][_0x9b5c80(0x378)](this),$gameTemp[_0x9b5c80(0x5bd)]=undefined;},VisuMZ[_0xabeb6b(0x553)]['ColorManager_mpColor']=ColorManager[_0xabeb6b(0xb70)],ColorManager['mpColor']=function(_0x388445){const _0x10c39a=_0xabeb6b;if($gameTemp[_0x10c39a(0x5bd)])return ColorManager['normalColor']();return VisuMZ[_0x10c39a(0x553)][_0x10c39a(0x98b)][_0x10c39a(0x378)](this,_0x388445);};function Sprite_HpGauge(){this['initialize'](...arguments);}Sprite_HpGauge[_0xabeb6b(0xc8)]=Object[_0xabeb6b(0xa3b)](Sprite_Gauge[_0xabeb6b(0xc8)]),Sprite_HpGauge[_0xabeb6b(0xc8)][_0xabeb6b(0x840)]=Sprite_HpGauge,Sprite_HpGauge['prototype'][_0xabeb6b(0x8ea)]=function(){const _0x44044d=_0xabeb6b;Sprite_Gauge[_0x44044d(0xc8)][_0x44044d(0x8ea)][_0x44044d(0x378)](this);},Sprite_HpGauge[_0xabeb6b(0xc8)][_0xabeb6b(0x9ce)]=function(){return 0x0;},Sprite_HpGauge['prototype'][_0xabeb6b(0xab8)]=function(){const _0x6354ca=_0xabeb6b;this[_0x6354ca(0xac0)][_0x6354ca(0x500)]();const _0x4f9ec6=this[_0x6354ca(0x73b)]();!isNaN(_0x4f9ec6)&&this[_0x6354ca(0x54c)]();};function _0x29aa(_0x1c5acf,_0x82fe2f){const _0x382de3=_0x382d();return _0x29aa=function(_0x29aa89,_0x15164c){_0x29aa89=_0x29aa89-0xb6;let _0x23a3a6=_0x382de3[_0x29aa89];return _0x23a3a6;},_0x29aa(_0x1c5acf,_0x82fe2f);}function Sprite_EnemyName(){const _0x542a30=_0xabeb6b;this[_0x542a30(0x8ea)](...arguments);}Sprite_EnemyName[_0xabeb6b(0xc8)]=Object[_0xabeb6b(0xa3b)](Sprite_Name['prototype']),Sprite_EnemyName['prototype'][_0xabeb6b(0x840)]=Sprite_EnemyName,Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)]=function(){const _0x51751c=_0xabeb6b;Sprite_Name[_0x51751c(0xc8)][_0x51751c(0x8ea)][_0x51751c(0x378)](this),this['createAttachedSprites']();},Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x4e0)]=function(){const _0x2f813d=_0xabeb6b;Sprite_Name['prototype'][_0x2f813d(0x4e0)]['call'](this),this['opacity']=0x0,this[_0x2f813d(0x2cb)]=null,this[_0x2f813d(0xb3e)]['x']=0.5,this[_0x2f813d(0xb3e)]['y']=0x0;},Sprite_EnemyName[_0xabeb6b(0xc8)]['createAttachedSprites']=function(){const _0x21bcd1=_0xabeb6b;VisuMZ[_0x21bcd1(0x553)][_0x21bcd1(0x78f)]['Enemy'][_0x21bcd1(0x1c3)]&&(this[_0x21bcd1(0x299)]=new Sprite_StateIcon(),this[_0x21bcd1(0x8d3)](this['_stateIconSprite']));},Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x96c)]=function(){return Graphics['boxWidth'];},Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x8cb)]=function(){const _0x103f8a=_0xabeb6b;return this[_0x103f8a(0x303)]=this[_0x103f8a(0x303)]||Window_Base['prototype']['lineHeight']()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0xabeb6b(0xc8)]['fontSize']=function(){const _0x5eb26d=_0xabeb6b;return VisuMZ[_0x5eb26d(0x553)][_0x5eb26d(0x78f)][_0x5eb26d(0xa08)][_0x5eb26d(0x654)]||$gameSystem[_0x5eb26d(0x471)]();},Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0xb80)]=function(_0x1640b8){const _0x315123=_0xabeb6b;this[_0x315123(0x2cb)]=_0x1640b8;},Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x5bc)]=function(){const _0x227988=_0xabeb6b;Sprite_Name[_0x227988(0xc8)][_0x227988(0x5bc)][_0x227988(0x378)](this),this['updateLink'](),this['updatePosition'](),this[_0x227988(0x94f)](),this[_0x227988(0x7fd)]();},Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0xab8)]=function(){const _0x279412=_0xabeb6b;this[_0x279412(0x218)]=undefined;const _0x46b2f1=this[_0x279412(0x6e8)](),_0x4a2c07=this[_0x279412(0x96c)](),_0xb34d2c=Window_Base[_0x279412(0xc8)][_0x279412(0x80d)]();this[_0x279412(0x9e1)](),this[_0x279412(0xac0)][_0x279412(0x500)](),this[_0x279412(0xac0)][_0x279412(0x47a)](_0x46b2f1,0x0,0x0,_0x4a2c07,_0xb34d2c,'center');},Sprite_EnemyName['prototype'][_0xabeb6b(0x28f)]=function(){const _0x2fc632=_0xabeb6b;if(!this[_0x2fc632(0x2cb)])return;this['_battler']!==this[_0x2fc632(0x2cb)][_0x2fc632(0x2aa)]&&this[_0x2fc632(0x3a5)](this[_0x2fc632(0x2cb)]['_battler']);},Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x8df)]=function(){const _0x28133e=_0xabeb6b;if(!this[_0x28133e(0x2cb)])return;this[_0x28133e(0x303)]=this['_lineHeight']||Window_Base['prototype'][_0x28133e(0x80d)](),this['x']=Math[_0x28133e(0xb36)](this[_0x28133e(0x2cb)]['_baseX']),this['y']=Math['round'](this[_0x28133e(0x2cb)][_0x28133e(0xb85)]-this[_0x28133e(0x303)]*0.5);const _0x145996=VisuMZ[_0x28133e(0x553)][_0x28133e(0x78f)][_0x28133e(0xa08)];this['x']+=Math[_0x28133e(0xb36)](_0x145996['NameOffsetX']||0x0),this['y']+=Math[_0x28133e(0xb36)](_0x145996[_0x28133e(0xa0c)]||0x0);},Sprite_EnemyName[_0xabeb6b(0xc8)]['updateAttachedSprites']=function(){const _0x46920c=_0xabeb6b;this[_0x46920c(0x755)]();},Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x755)]=function(){const _0x21db88=_0xabeb6b;if(!this[_0x21db88(0x299)])return;this[_0x21db88(0x2aa)]!==this[_0x21db88(0x299)]['_battler']&&this[_0x21db88(0x299)][_0x21db88(0x3a5)](this[_0x21db88(0x2aa)]);const _0x91e2bf=this[_0x21db88(0x70e)]();this[_0x21db88(0x303)]=this[_0x21db88(0x303)]||Window_Base['prototype'][_0x21db88(0x80d)](),this[_0x21db88(0x299)]['x']=Math[_0x21db88(0xb36)]((_0x91e2bf+ImageManager[_0x21db88(0x12a)])/0x2)+0x8,this[_0x21db88(0x299)]['y']=this[_0x21db88(0x303)]/0x2;const _0xf303eb=VisuMZ[_0x21db88(0x553)][_0x21db88(0x78f)][_0x21db88(0xa08)];this[_0x21db88(0x299)]['x']+=_0xf303eb['AttachStateOffsetX']||0x0,this[_0x21db88(0x299)]['y']+=_0xf303eb[_0x21db88(0x53d)]||0x0;},Sprite_EnemyName['prototype'][_0xabeb6b(0x7fd)]=function(){const _0x3ce16e=_0xabeb6b,_0x251bb5=this[_0x3ce16e(0x814)]();if(_0x251bb5&&this[_0x3ce16e(0x9ac)]<0xff)this[_0x3ce16e(0x9ac)]+=0x10;else!_0x251bb5&&this[_0x3ce16e(0x9ac)]>0x0&&(this['opacity']-=0x10);},Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x814)]=function(){const _0x4daabb=_0xabeb6b;if(this[_0x4daabb(0x4de)]())return![];else{if(!this[_0x4daabb(0x2aa)])return![];else{if(!this['_battler'][_0x4daabb(0x46a)]())return![];else{if(this[_0x4daabb(0x968)]())return!![];else{if(this[_0x4daabb(0x2aa)][_0x4daabb(0x69e)]())return![];else{if(this['isBattlerTargeted']())return!![];else{if(this['compatibilityVisible']())return!![];else{if(this[_0x4daabb(0x9ec)]())return!![];else{if(this[_0x4daabb(0x386)]())return!![];else{if(this[_0x4daabb(0x9ac)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName['prototype'][_0xabeb6b(0x968)]=function(){const _0x560e45=_0xabeb6b;return this[_0x560e45(0x2aa)]&&this[_0x560e45(0x2aa)]['isNameTemporarilyVisible']();},Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x4de)]=function(){const _0x3683ac=_0xabeb6b;return VisuMZ['BattleCore'][_0x3683ac(0x78f)][_0x3683ac(0xa08)][_0x3683ac(0x955)];},Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x61f)]=function(){const _0x172ab4=_0xabeb6b;if(!VisuMZ['BattleCore'][_0x172ab4(0x78f)][_0x172ab4(0xa08)][_0x172ab4(0x4fb)])return![];if(BattleManager[_0x172ab4(0x8bb)]()&&!BattleManager[_0x172ab4(0xb6c)]())return![];return this[_0x172ab4(0x2aa)]&&BattleManager[_0x172ab4(0x4ee)]&&BattleManager['_targets'][_0x172ab4(0x5d8)](this[_0x172ab4(0x2aa)]);},Sprite_EnemyName['prototype'][_0xabeb6b(0x358)]=function(){return![];},Sprite_EnemyName[_0xabeb6b(0xc8)]['isAlwaysVisible']=function(){const _0x153499=_0xabeb6b;return VisuMZ[_0x153499(0x553)][_0x153499(0x78f)][_0x153499(0xa08)]['NameAlwaysVisible'];},Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x386)]=function(){const _0x508e26=_0xabeb6b;return VisuMZ[_0x508e26(0x553)]['Settings'][_0x508e26(0xa08)][_0x508e26(0x4fe)]?this[_0x508e26(0x2aa)]['isSelected']():SceneManager['_scene'][_0x508e26(0x389)]&&SceneManager[_0x508e26(0x483)]['_enemyWindow']['active']&&SceneManager[_0x508e26(0x483)][_0x508e26(0x389)]['_enemies'][_0x508e26(0x5d8)](this[_0x508e26(0x2aa)]);},Sprite_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x70e)]=function(){const _0x2a3c89=_0xabeb6b;if(!this[_0x2a3c89(0x2aa)])return 0x0;if(this[_0x2a3c89(0x218)])return this[_0x2a3c89(0x218)];const _0x4c9381=this['name']();return this[_0x2a3c89(0x9e1)](),this[_0x2a3c89(0x218)]=this['bitmap'][_0x2a3c89(0x889)](_0x4c9381)||0x1,this['_cacheTextWidth'];},VisuMZ[_0xabeb6b(0x553)]['Sprite_Battleback_adjustPosition']=Sprite_Battleback[_0xabeb6b(0xc8)]['adjustPosition'],Sprite_Battleback[_0xabeb6b(0xc8)]['adjustPosition']=function(){const _0x42cd49=_0xabeb6b,_0x222ad4=VisuMZ['BattleCore']['Settings']['BattlebackScale'];if(!_0x222ad4)return VisuMZ['BattleCore'][_0x42cd49(0x2fc)][_0x42cd49(0x378)](this);const _0x1f14aa=String(_0x222ad4[_0x42cd49(0x9e2)])||'MZ';switch(_0x1f14aa){case'MZ':VisuMZ[_0x42cd49(0x553)][_0x42cd49(0x2fc)][_0x42cd49(0x378)](this);break;case _0x42cd49(0x224):this[_0x42cd49(0x4b3)]();break;case _0x42cd49(0x620):this[_0x42cd49(0x1c4)]();break;case _0x42cd49(0x16e):this[_0x42cd49(0x182)]();break;case'ScaleUp':this[_0x42cd49(0xb73)]();break;}},Sprite_Battleback[_0xabeb6b(0xc8)]['adjustPosition_1for1']=function(){const _0x35e068=_0xabeb6b,_0x1b6254=VisuMZ[_0x35e068(0x553)][_0x35e068(0x78f)][_0x35e068(0x2ab)];if(_0x1b6254&&_0x1b6254['jsOneForOne'])return _0x1b6254['jsOneForOne'][_0x35e068(0x378)](this);this[_0x35e068(0x461)]=Graphics[_0x35e068(0x461)],this[_0x35e068(0x1ee)]=Graphics[_0x35e068(0x1ee)];const _0x2682d7=0x1;this[_0x35e068(0xb4d)]['x']=_0x2682d7,this[_0x35e068(0xb4d)]['y']=_0x2682d7,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0xabeb6b(0x1c4)]=function(){const _0x5625ac=_0xabeb6b,_0x325a53=VisuMZ[_0x5625ac(0x553)][_0x5625ac(0x78f)][_0x5625ac(0x2ab)];if(_0x325a53&&_0x325a53[_0x5625ac(0x417)])return _0x325a53[_0x5625ac(0x417)][_0x5625ac(0x378)](this);this['width']=Graphics[_0x5625ac(0x461)],this[_0x5625ac(0x1ee)]=Graphics[_0x5625ac(0x1ee)];const _0x42453b=this['width']/this[_0x5625ac(0xac0)][_0x5625ac(0x461)],_0x3a9367=this[_0x5625ac(0x1ee)]/this[_0x5625ac(0xac0)][_0x5625ac(0x1ee)],_0xc0d5b0=Math[_0x5625ac(0xb72)](_0x42453b,_0x3a9367);this[_0x5625ac(0xb4d)]['x']=_0xc0d5b0,this[_0x5625ac(0xb4d)]['y']=_0xc0d5b0,this['x']=(Graphics['width']-this[_0x5625ac(0x461)])/0x2,this['y']=Graphics[_0x5625ac(0x1ee)]-this[_0x5625ac(0x1ee)];},Sprite_Battleback[_0xabeb6b(0xc8)]['adjustPosition_ScaleDown']=function(){const _0x583723=_0xabeb6b,_0x2a239f=VisuMZ[_0x583723(0x553)]['Settings'][_0x583723(0x2ab)];if(_0x2a239f&&_0x2a239f[_0x583723(0x9c8)])return _0x2a239f['jsScaleDown'][_0x583723(0x378)](this);this['width']=Graphics['width'],this[_0x583723(0x1ee)]=Graphics[_0x583723(0x1ee)];const _0x1aafd0=Math[_0x583723(0x1be)](0x1,this[_0x583723(0x461)]/this['bitmap']['width']),_0x25e94f=Math[_0x583723(0x1be)](0x1,this[_0x583723(0x1ee)]/this[_0x583723(0xac0)][_0x583723(0x1ee)]),_0x4ef6d4=Math[_0x583723(0xb72)](_0x1aafd0,_0x25e94f);this[_0x583723(0xb4d)]['x']=_0x4ef6d4,this[_0x583723(0xb4d)]['y']=_0x4ef6d4,this['x']=(Graphics[_0x583723(0x461)]-this[_0x583723(0x461)])/0x2,this['y']=Graphics['height']-this[_0x583723(0x1ee)];},Sprite_Battleback['prototype']['adjustPosition_ScaleUp']=function(){const _0x57e0a8=_0xabeb6b,_0x264e4a=VisuMZ[_0x57e0a8(0x553)][_0x57e0a8(0x78f)][_0x57e0a8(0x2ab)];if(_0x264e4a&&_0x264e4a[_0x57e0a8(0xb34)])return _0x264e4a[_0x57e0a8(0xb34)][_0x57e0a8(0x378)](this);this['width']=Graphics[_0x57e0a8(0x461)],this[_0x57e0a8(0x1ee)]=Graphics[_0x57e0a8(0x1ee)];const _0x249a90=Math[_0x57e0a8(0xb72)](0x1,this['width']/this['bitmap']['width']),_0x38dd5e=Math[_0x57e0a8(0xb72)](0x1,this['height']/this['bitmap']['height']),_0x1344cf=Math[_0x57e0a8(0xb72)](_0x249a90,_0x38dd5e);this['scale']['x']=_0x1344cf,this[_0x57e0a8(0xb4d)]['y']=_0x1344cf,this['x']=(Graphics[_0x57e0a8(0x461)]-this[_0x57e0a8(0x461)])/0x2,this['y']=Graphics[_0x57e0a8(0x1ee)]-this[_0x57e0a8(0x1ee)];},Spriteset_Battle[_0xabeb6b(0x591)]=VisuMZ['BattleCore'][_0xabeb6b(0x78f)][_0xabeb6b(0x198)][_0xabeb6b(0x58f)]??!![],Spriteset_Battle['prototype']['isFlipped']=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x245)]=function(){return 0x0;},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x19a)]=function(){return 0x0;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x3b9)]=Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x8b7)],Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x8b7)]=function(){const _0x25a6d3=_0xabeb6b;VisuMZ[_0x25a6d3(0x553)]['Spriteset_Battle_createLowerLayer'][_0x25a6d3(0x378)](this),this[_0x25a6d3(0x774)](),this['createEnemyNames']();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xd1)]=Spriteset_Battle['prototype'][_0xabeb6b(0x5bc)],Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x5bc)]=function(){const _0xe733f=_0xabeb6b;VisuMZ['BattleCore'][_0xe733f(0xd1)][_0xe733f(0x378)](this),this[_0xe733f(0xf9)](),this['updateUiContainerPosition'](),this['updateWeather'](),this[_0xe733f(0x45b)]();},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x774)]=function(){const _0x514f4d=_0xabeb6b;this[_0x514f4d(0x10c)]=new Weather(),this[_0x514f4d(0x3d4)]['addChild'](this[_0x514f4d(0x10c)]);},Spriteset_Battle['prototype']['updateWeather']=function(){const _0x4341b2=_0xabeb6b;this[_0x4341b2(0x10c)][_0x4341b2(0x2f9)]=$gameScreen[_0x4341b2(0x34f)](),this[_0x4341b2(0x10c)]['power']=$gameScreen[_0x4341b2(0xb0e)]();},Game_Interpreter[_0xabeb6b(0xc8)][_0xabeb6b(0x1e5)]=function(_0x1e88b8){const _0x33af41=_0xabeb6b;$gameScreen[_0x33af41(0x33e)](_0x1e88b8[0x0],_0x1e88b8[0x1],_0x1e88b8[0x2]);if(_0x1e88b8[0x3])this['wait'](_0x1e88b8[0x2]);return!![];},VisuMZ[_0xabeb6b(0x553)]['Game_Interpreter_command283']=Game_Interpreter[_0xabeb6b(0xc8)][_0xabeb6b(0x2f8)],Game_Interpreter[_0xabeb6b(0xc8)][_0xabeb6b(0x2f8)]=function(_0x5314c9){const _0x331893=_0xabeb6b;return VisuMZ[_0x331893(0x553)][_0x331893(0x72d)][_0x331893(0x378)](this,_0x5314c9),SceneManager['isSceneBattle']()&&SceneManager[_0x331893(0x483)][_0x331893(0x754)][_0x331893(0x34a)](_0x5314c9[0x0],_0x5314c9[0x1]),!![];},Sprite_Battleback[_0xabeb6b(0xc8)][_0xabeb6b(0x4d2)]=function(){const _0x53106=_0xabeb6b;if($gameMap[_0x53106(0x4d2)]()!==null)return $gameMap[_0x53106(0x4d2)]();else{if(BattleManager[_0x53106(0x31e)]())return $dataSystem[_0x53106(0x4d2)];else return $gameMap[_0x53106(0x4ea)]()?this['overworldBattleback1Name']():'';}},Sprite_Battleback['prototype'][_0xabeb6b(0x43a)]=function(){const _0x49f7c4=_0xabeb6b;if($gameMap[_0x49f7c4(0x43a)]()!==null)return $gameMap[_0x49f7c4(0x43a)]();else{if(BattleManager[_0x49f7c4(0x31e)]())return $dataSystem[_0x49f7c4(0x43a)];else return $gameMap[_0x49f7c4(0x4ea)]()?this[_0x49f7c4(0xfa)]():'';}},Spriteset_Battle[_0xabeb6b(0xc8)]['updateBattlebackBitmap']=function(_0xaf71af,_0x123af8){_0xaf71af['bitmap']=_0x123af8;},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x34a)]=function(_0x423a95,_0x20471e){const _0x386b1e=_0xabeb6b;_0x423a95=_0x423a95||'',_0x20471e=_0x20471e||'';_0x423a95===''&&_0x20471e===''&&(_0x423a95=this['_back1Sprite'][_0x386b1e(0x4d2)](),_0x20471e=this[_0x386b1e(0x8d7)][_0x386b1e(0x43a)]());const _0x3542ce=ImageManager[_0x386b1e(0x21d)](_0x423a95),_0x350a26=ImageManager[_0x386b1e(0xb71)](_0x20471e);_0x3542ce['addLoadListener'](this[_0x386b1e(0x666)][_0x386b1e(0xa39)](this,this[_0x386b1e(0x4f5)],this['_back2Sprite'],_0x3542ce,_0x350a26));},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x666)]=function(_0x557a47,_0x299773,_0x2cd8d5,_0x3a4b18){const _0x5e2e62=_0xabeb6b;_0x3a4b18['addLoadListener'](this[_0x5e2e62(0x1ca)][_0x5e2e62(0xa39)](this,_0x557a47,_0x299773,_0x2cd8d5,_0x3a4b18));},Spriteset_Battle[_0xabeb6b(0xc8)]['updateBattlebackBitmap2']=function(_0x16d7f0,_0x1ed0ff,_0x158bcd,_0x378479){const _0x5921f3=_0xabeb6b;_0x16d7f0['bitmap']=_0x158bcd,_0x1ed0ff['bitmap']=_0x378479,_0x16d7f0[_0x5921f3(0x1eb)](),_0x1ed0ff[_0x5921f3(0x1eb)]();},VisuMZ[_0xabeb6b(0x553)]['Spriteset_Battle_createBattleField']=Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x506)],Spriteset_Battle[_0xabeb6b(0xc8)]['createBattleField']=function(){const _0x176fb8=_0xabeb6b;VisuMZ[_0x176fb8(0x553)][_0x176fb8(0x92f)][_0x176fb8(0x378)](this),this[_0x176fb8(0x34e)]();},Spriteset_Battle[_0xabeb6b(0xc8)]['createBattleFieldBattleCore']=function(){const _0x8572b3=_0xabeb6b;this[_0x8572b3(0x24b)](),this[_0x8572b3(0xb61)](),this['createAnimationContainer'](),this[_0x8572b3(0x462)](),this[_0x8572b3(0x91b)]();},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x24b)]=function(){const _0x3f3595=_0xabeb6b;this[_0x3f3595(0x854)]=new Sprite(),this['_battleField'][_0x3f3595(0x8d3)](this[_0x3f3595(0x854)]);},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x6d4)]=function(){const _0x18cdc1=_0xabeb6b;this[_0x18cdc1(0x77f)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x18cdc1(0x8d3)](this[_0x18cdc1(0x77f)]):this[_0x18cdc1(0x3d4)][_0x18cdc1(0x8d3)](this[_0x18cdc1(0x77f)]);},Spriteset_Battle[_0xabeb6b(0xc8)]['createDamageContainer']=function(){const _0x4f3023=_0xabeb6b;this[_0x4f3023(0x164)]=new Sprite(),this[_0x4f3023(0x164)]['x']=this[_0x4f3023(0x3d4)]['x'],this['_damageContainer']['y']=this[_0x4f3023(0x3d4)]['y'],this[_0x4f3023(0x8d3)](this['_damageContainer']);},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x91b)]=function(){const _0x52e540=_0xabeb6b;if(!this[_0x52e540(0x5a1)]())return;this['_battlerContainer']['scale']['x']=-0x1,this[_0x52e540(0x854)]['x']=this[_0x52e540(0x3d4)][_0x52e540(0x461)],this[_0x52e540(0x2ff)][_0x52e540(0xb4d)]['x']=-0x1,this['_uiContainer']['x']=this[_0x52e540(0x3d4)][_0x52e540(0x461)],this[_0x52e540(0x77f)][_0x52e540(0xb4d)]['x']=-0x1,this[_0x52e540(0x77f)]['x']=this[_0x52e540(0x3d4)][_0x52e540(0x461)],this[_0x52e540(0x164)][_0x52e540(0xb4d)]['x']=-0x1,this[_0x52e540(0x164)]['x']=this['_battleField']['x']+this[_0x52e540(0x3d4)][_0x52e540(0x461)];},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x5c1)]=function(){const _0x506691=_0xabeb6b;Imported[_0x506691(0x765)]&&this[_0x506691(0x5d4)]()&&this['repositionEnemiesByResolution']();const _0x3d47b6=$gameTroop[_0x506691(0x85a)](),_0x11e826=[];for(const _0x139977 of _0x3d47b6){_0x11e826[_0x506691(0x5cb)](new Sprite_Enemy(_0x139977));}_0x11e826[_0x506691(0xae7)](this['compareEnemySprite'][_0x506691(0xa39)](this));for(const _0xa5cd73 of _0x11e826){this[_0x506691(0x854)][_0x506691(0x8d3)](_0xa5cd73);}this['_enemySprites']=_0x11e826;},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x949)]=function(){const _0x55758b=_0xabeb6b;this['_actorSprites']=[];for(let _0x3fa645=0x0;_0x3fa645<$gameParty[_0x55758b(0x131)]();_0x3fa645++){const _0x292e18=$gameParty[_0x55758b(0x786)]()[_0x3fa645],_0x1fb6d1=new Sprite_Actor();_0x1fb6d1[_0x55758b(0x9aa)](_0x292e18),_0x1fb6d1[_0x55758b(0x2b8)](_0x292e18),_0x1fb6d1[_0x55758b(0x5bc)](),this[_0x55758b(0x8e0)][_0x55758b(0x5cb)](_0x1fb6d1),this[_0x55758b(0x854)][_0x55758b(0x8d3)](_0x1fb6d1);}},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x7d9)]=function(_0x3b9d70,_0x33be0f,_0x4e8b0f,_0x3d57f0){const _0x7db772=_0xabeb6b,_0xa8d6f1=this['isMVAnimation'](_0x33be0f),_0x58994e=new(_0xa8d6f1?Sprite_AnimationMV:Sprite_Animation)(),_0x1582eb=this['makeTargetSprites'](_0x3b9d70);this[_0x7db772(0x572)](_0x3b9d70[0x0])&&(_0x4e8b0f=!_0x4e8b0f),_0x58994e[_0x7db772(0xa1f)]=_0x3b9d70,_0x58994e['setup'](_0x1582eb,_0x33be0f,_0x4e8b0f,_0x3d57f0),this['addAnimationSpriteToContainer'](_0x58994e);},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x7cd)]=function(_0x75c3d1){const _0x467bc4=_0xabeb6b;this[_0x467bc4(0x518)](_0x75c3d1)?(this['battleStatusWindowAnimationContainer']()[_0x467bc4(0x8d3)](_0x75c3d1),_0x75c3d1[_0x467bc4(0xb8a)]=!![]):(this[_0x467bc4(0x77f)]['addChild'](_0x75c3d1),Spriteset_Battle[_0x467bc4(0x591)]&&(this['_animationContainer']['x']=this[_0x467bc4(0x618)]['x'],this[_0x467bc4(0x77f)]['y']=this[_0x467bc4(0x618)]['y'])),this[_0x467bc4(0x134)]['push'](_0x75c3d1);},Spriteset_Battle[_0xabeb6b(0xc8)]['isAnimationShownOnBattlePortrait']=function(_0x496701){const _0x37c53c=_0xabeb6b;if(!_0x496701)return![];if(!_0x496701[_0x37c53c(0xbc5)])return![];if(!_0x496701[_0x37c53c(0xa1f)][0x0])return![];if(_0x496701[_0x37c53c(0xa1f)][0x0]['isActor']&&!_0x496701[_0x37c53c(0xa1f)][0x0]['isActor']())return![];if($gameSystem['isSideView']())return![];if(!this[_0x37c53c(0x601)]())return![];if(_0x496701[_0x37c53c(0x840)]===Sprite_Animation){const _0x5d3c25=VisuMZ[_0x37c53c(0x553)][_0x37c53c(0x78f)][_0x37c53c(0x2b0)];_0x5d3c25[_0x37c53c(0x453)]=_0x5d3c25[_0x37c53c(0x453)]??!![];if(_0x496701['_animation'][_0x37c53c(0xac1)]===0x0&&!_0x5d3c25[_0x37c53c(0x453)])return![];_0x5d3c25['FvAniCenterAll']=_0x5d3c25['FvAniCenterAll']??!![];if(_0x496701[_0x37c53c(0xbc5)][_0x37c53c(0xac1)]===0x1&&!_0x5d3c25[_0x37c53c(0x184)])return![];_0x5d3c25[_0x37c53c(0x5f6)]=_0x5d3c25[_0x37c53c(0x5f6)]??![];if(_0x496701[_0x37c53c(0xbc5)][_0x37c53c(0xac1)]===0x2&&!_0x5d3c25[_0x37c53c(0x5f6)])return![];}else{if(_0x496701[_0x37c53c(0x840)]===Sprite_AnimationMV){if(_0x496701[_0x37c53c(0xbc5)][_0x37c53c(0x451)]===0x3)return![];}}return!![];const _0x4e2647=Window_BattleStatus[_0x37c53c(0xc8)][_0x37c53c(0x3fb)]();return['xp','portrait'][_0x37c53c(0x48f)](_0x4e2647);},Spriteset_Battle['prototype']['battleStatusWindowAnimationContainer']=function(){const _0x28fc26=_0xabeb6b;if(!SceneManager[_0x28fc26(0x483)])return null;if(!SceneManager[_0x28fc26(0x483)][_0x28fc26(0x4ab)])return null;if(!SceneManager[_0x28fc26(0x483)][_0x28fc26(0x4ab)]['_effectsContainer'])return null;return SceneManager[_0x28fc26(0x483)][_0x28fc26(0x4ab)][_0x28fc26(0x618)];},Spriteset_Battle['prototype'][_0xabeb6b(0x1c7)]=function(_0x1ac703){const _0x47aaf9=_0xabeb6b;this[_0x47aaf9(0x2a5)](_0x1ac703);for(const _0x3bc6dd of _0x1ac703['targetObjects']){_0x3bc6dd[_0x47aaf9(0x8eb)]&&_0x3bc6dd['endAnimation']();}_0x1ac703[_0x47aaf9(0x679)]();},Spriteset_Battle[_0xabeb6b(0xc8)]['removeAnimationFromContainer']=function(_0x450e2f){const _0x3f719f=_0xabeb6b;this[_0x3f719f(0x518)](_0x450e2f)?this[_0x3f719f(0x601)]()[_0x3f719f(0xe0)](_0x450e2f):this[_0x3f719f(0x77f)][_0x3f719f(0xe0)](_0x450e2f);this[_0x3f719f(0x618)][_0x3f719f(0xe0)](_0x450e2f),this[_0x3f719f(0x77f)][_0x3f719f(0xe0)](_0x450e2f),this['_animationSprites'][_0x3f719f(0x858)](_0x450e2f);if(this['_fauxAnimationSprites'])this[_0x3f719f(0x767)][_0x3f719f(0x858)](_0x450e2f);},VisuMZ['BattleCore'][_0xabeb6b(0x49c)]=Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x9b3)],Spriteset_Battle['prototype']['updateActors']=function(){const _0x14a722=_0xabeb6b;VisuMZ['BattleCore'][_0x14a722(0x49c)][_0x14a722(0x378)](this),this[_0x14a722(0xf9)]();},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0xf9)]=function(){const _0x3e81e2=_0xabeb6b;this['_battlerContainer']['children'][_0x3e81e2(0xae7)](this[_0x3e81e2(0x84c)][_0x3e81e2(0xa39)](this)),this['putActiveBattlerOnTop']();if(!this['_battlerContainer'])return;this[_0x3e81e2(0x854)][_0x3e81e2(0x9ac)]=this[_0x3e81e2(0x338)]();},Spriteset_Battle['prototype'][_0xabeb6b(0x84c)]=function(_0x787d69,_0x15b713){const _0x378b8b=_0xabeb6b;if(VisuMZ[_0x378b8b(0x553)][_0x378b8b(0x78f)]['Actor'][_0x378b8b(0x42b)]){if(_0x787d69['_battler']&&_0x15b713[_0x378b8b(0x2aa)]){if(_0x787d69[_0x378b8b(0x2aa)][_0x378b8b(0xb6a)]()&&_0x15b713['_battler'][_0x378b8b(0x54b)]())return 0x1;else{if(_0x15b713[_0x378b8b(0x2aa)][_0x378b8b(0xb6a)]()&&_0x787d69['_battler'][_0x378b8b(0x54b)]())return-0x1;}}}return _0x787d69[_0x378b8b(0xb85)]!==_0x15b713[_0x378b8b(0xb85)]?_0x787d69[_0x378b8b(0xb85)]-_0x15b713[_0x378b8b(0xb85)]:_0x15b713[_0x378b8b(0xbc8)]-_0x787d69['spriteId'];},Spriteset_Battle[_0xabeb6b(0xc8)]['putActiveBattlerOnTop']=function(){const _0x423ffe=_0xabeb6b;if(!VisuMZ['BattleCore'][_0x423ffe(0x78f)]['Actor'][_0x423ffe(0x300)])return;const _0x2e712f=BattleManager[_0x423ffe(0x4ee)];if(_0x2e712f){if(_0x2e712f[_0x423ffe(0xb6a)]()&&!$gameSystem[_0x423ffe(0x4d5)]())return;if(_0x2e712f===BattleManager[_0x423ffe(0x70a)]())return;const _0xc39865=_0x2e712f['battler']();if(_0xc39865&&_0x2e712f[_0x423ffe(0xb6a)]())this[_0x423ffe(0x854)][_0x423ffe(0x8d3)](_0xc39865);}},Spriteset_Battle['prototype'][_0xabeb6b(0x1a2)]=function(){const _0x32701f=_0xabeb6b;for(const _0x184bda of $gameParty[_0x32701f(0x120)]()){if(!_0x184bda)continue;if(!_0x184bda[_0x32701f(0x7bb)]())continue;_0x184bda[_0x32701f(0x7bb)]()[_0x32701f(0xbd4)]=!![],_0x184bda[_0x32701f(0x7bb)]()[_0x32701f(0x89e)]();}},Spriteset_Battle['prototype'][_0xabeb6b(0xb61)]=function(){const _0x2bf030=_0xabeb6b;this[_0x2bf030(0x2ff)]=new Sprite(),Spriteset_Battle[_0x2bf030(0x591)]?this[_0x2bf030(0x8d3)](this[_0x2bf030(0x2ff)]):this[_0x2bf030(0x3d4)][_0x2bf030(0x8d3)](this['_uiContainer']),SceneManager[_0x2bf030(0x483)][_0x2bf030(0x2ff)]=this['_uiContainer'];},Spriteset_Battle[_0xabeb6b(0xc8)]['createEnemyNames']=function(){const _0x3f3431=_0xabeb6b;if(VisuMZ[_0x3f3431(0x553)][_0x3f3431(0x78f)]['Enemy'][_0x3f3431(0x49a)])return;this[_0x3f3431(0x3d3)]=new Sprite(),BattleManager[_0x3f3431(0xaec)](this[_0x3f3431(0x3d3)]);for(const _0x5d200f of this[_0x3f3431(0x2a1)]){const _0x54ca64=new Sprite_EnemyName();this[_0x3f3431(0x3d3)][_0x3f3431(0x8d3)](_0x54ca64),_0x54ca64['linkSprite'](_0x5d200f);}},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x895)]=function(){const _0x5a68c9=_0xabeb6b;if(!this[_0x5a68c9(0x164)])return;if(!this[_0x5a68c9(0x2ff)])return;const _0x5a86fb=Spriteset_Battle[_0x5a68c9(0x591)]?this[_0x5a68c9(0x164)]['x']:0x0,_0x5f4514=Spriteset_Battle[_0x5a68c9(0x591)]?this['_damageContainer']['y']:0x0,_0x888496=Imported[_0x5a68c9(0x510)]?this[_0x5a68c9(0x3d4)]['x']:0x0,_0x3f45b7=Imported[_0x5a68c9(0x510)]?this['_battleField']['y']:0x0;this[_0x5a68c9(0x2ff)]['x']=_0x5a86fb+_0x888496,this[_0x5a68c9(0x2ff)]['y']=_0x5f4514+_0x3f45b7;},BattleManager[_0xabeb6b(0xaec)]=function(_0x41e5d8){const _0x4bf198=_0xabeb6b;if(!SceneManager[_0x4bf198(0x483)][_0x4bf198(0x2ff)])return;SceneManager[_0x4bf198(0x483)]['_uiContainer']['addChild'](_0x41e5d8);},BattleManager[_0xabeb6b(0xaa1)]=function(_0x1aa2c1){const _0x6fc446=_0xabeb6b;if(!SceneManager[_0x6fc446(0x483)]['_uiContainer'])return;SceneManager[_0x6fc446(0x483)]['_uiContainer'][_0x6fc446(0xe0)](_0x1aa2c1);},Spriteset_Battle[_0xabeb6b(0xc8)]['targetBattlerContainerOpacity']=function(){return 0xff;},Spriteset_Battle[_0xabeb6b(0xc8)]['isBusy']=function(){return![];},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x6f3)]=function(){const _0x3cb799=_0xabeb6b;return this[_0x3cb799(0xaf4)]()[_0x3cb799(0x886)](_0x29d8fc=>_0x29d8fc['isFloating']());},Spriteset_Battle['prototype'][_0xabeb6b(0x38e)]=function(){const _0x306aba=_0xabeb6b;return this[_0x306aba(0xaf4)]()[_0x306aba(0x886)](_0x9f0dfb=>_0x9f0dfb[_0x306aba(0xc1)]());},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x92d)]=function(){const _0x56c482=_0xabeb6b;return this[_0x56c482(0xaf4)]()[_0x56c482(0x886)](_0x455513=>_0x455513[_0x56c482(0x7d1)]());},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x47f)]=function(){const _0x217ac1=_0xabeb6b;return this[_0x217ac1(0xaf4)]()[_0x217ac1(0x886)](_0x4bbc3c=>_0x4bbc3c[_0x217ac1(0x276)]());},Spriteset_Battle[_0xabeb6b(0xc8)]['isAnyoneSpinning']=function(){const _0xda7f=_0xabeb6b;return this[_0xda7f(0xaf4)]()['some'](_0x541db3=>_0x541db3[_0xda7f(0x314)]());},Spriteset_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x853)]=function(){const _0x5bb32e=_0xabeb6b;return this[_0x5bb32e(0xaf4)]()[_0x5bb32e(0x886)](_0xe2c8a5=>_0xe2c8a5[_0x5bb32e(0x298)]());},VisuMZ[_0xabeb6b(0x553)]['Window_ItemList_maxCols']=Window_ItemList[_0xabeb6b(0xc8)][_0xabeb6b(0x181)],Window_ItemList['prototype'][_0xabeb6b(0x181)]=function(){const _0x6d58c6=_0xabeb6b;return SceneManager['isSceneBattle']()?SceneManager[_0x6d58c6(0x483)]['battleLayoutStyle']()===_0x6d58c6(0x2d0)?VisuMZ[_0x6d58c6(0x553)][_0x6d58c6(0x78f)][_0x6d58c6(0x198)][_0x6d58c6(0x7d7)]:VisuMZ['BattleCore'][_0x6d58c6(0x78f)]['BattleLayout'][_0x6d58c6(0x145)]:VisuMZ[_0x6d58c6(0x553)]['Window_ItemList_maxCols'][_0x6d58c6(0x378)](this);},VisuMZ[_0xabeb6b(0x553)]['Window_SkillList_maxCols']=Window_SkillList[_0xabeb6b(0xc8)][_0xabeb6b(0x181)],Window_SkillList[_0xabeb6b(0xc8)]['maxCols']=function(){const _0x1b960e=_0xabeb6b;return SceneManager[_0x1b960e(0x87a)]()?SceneManager['_scene'][_0x1b960e(0x3fb)]()===_0x1b960e(0x2d0)?VisuMZ[_0x1b960e(0x553)][_0x1b960e(0x78f)]['BattleLayout'][_0x1b960e(0x7d7)]:VisuMZ['BattleCore'][_0x1b960e(0x78f)][_0x1b960e(0x198)]['SkillItemStandardCols']:VisuMZ[_0x1b960e(0x553)]['Window_SkillList_maxCols']['call'](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x820)]=Window_Options[_0xabeb6b(0xc8)][_0xabeb6b(0x52d)],Window_Options[_0xabeb6b(0xc8)][_0xabeb6b(0x52d)]=function(){const _0x3f5673=_0xabeb6b;VisuMZ['BattleCore'][_0x3f5673(0x820)][_0x3f5673(0x378)](this),this[_0x3f5673(0x416)](),this[_0x3f5673(0x1f4)]();},Window_Options[_0xabeb6b(0xc8)][_0xabeb6b(0x416)]=function(){const _0x514c1b=_0xabeb6b;VisuMZ[_0x514c1b(0x553)][_0x514c1b(0x78f)]['AutoBattle'][_0x514c1b(0xb3c)]&&(this[_0x514c1b(0xa44)](),this[_0x514c1b(0xbe1)]());},Window_Options[_0xabeb6b(0xc8)]['addShowHpGaugeCommand']=function(){const _0x43790e=_0xabeb6b;if(!VisuMZ[_0x43790e(0x553)][_0x43790e(0x78f)][_0x43790e(0x2f4)]['AddHpGaugeOption'])return;const _0x1f2dd6=TextManager[_0x43790e(0x4a9)],_0x12b242='visualHpGauge';this[_0x43790e(0x33f)](_0x1f2dd6,_0x12b242);},Window_Options['prototype'][_0xabeb6b(0xa44)]=function(){const _0x5b3be6=_0xabeb6b,_0x27f64b=TextManager[_0x5b3be6(0x9fa)],_0x3559ec='autoBattleAtStart';this[_0x5b3be6(0x33f)](_0x27f64b,_0x3559ec);},Window_Options[_0xabeb6b(0xc8)][_0xabeb6b(0xbe1)]=function(){const _0x58fae4=_0xabeb6b,_0x144eaa=TextManager[_0x58fae4(0x64f)],_0x1c7c7a=_0x58fae4(0x3c7);this['addCommand'](_0x144eaa,_0x1c7c7a);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x360)]=Window_Options[_0xabeb6b(0xc8)][_0xabeb6b(0x8d2)],Window_Options['prototype'][_0xabeb6b(0x8d2)]=function(_0xb11244){const _0x5e529a=_0xabeb6b,_0x47ec19=this['commandSymbol'](_0xb11244);return _0x47ec19===_0x5e529a(0x3c7)?this['statusTextAutoBattleStyle']():VisuMZ[_0x5e529a(0x553)]['Window_Options_statusText'][_0x5e529a(0x378)](this,_0xb11244);},Window_Options[_0xabeb6b(0xc8)][_0xabeb6b(0x7f3)]=function(){const _0x29b494=_0xabeb6b,_0xb3a7b6=VisuMZ['BattleCore']['Settings']['AutoBattle'],_0x5ded35=this['getConfigValue']('autoBattleUseSkills');return _0x5ded35?_0xb3a7b6[_0x29b494(0xa9f)]:_0xb3a7b6[_0x29b494(0x99c)];},Window_ShopStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x897)]=function(){const _0x4604a2=_0xabeb6b,_0x449bdb=DataManager['getDamageStyle'](this[_0x4604a2(0x4fc)]),_0x2b5f8a=VisuMZ['DamageStyles'][_0x449bdb];if(!_0x2b5f8a)return this['getItemDamageAmountLabelOriginal']();const _0x5bd5a9=_0x4604a2(0x7db)[_0x4604a2(0x782)](this[_0x4604a2(0x4fc)][_0x4604a2(0x72f)][_0x4604a2(0x2f9)]),_0x323914=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x4604a2(0x4fc)][_0x4604a2(0x72f)]['type']];return _0x2b5f8a[_0x5bd5a9][_0x4604a2(0x782)](_0x323914);},Window_ShopStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x906)]=function(){const _0x9c29ab=_0xabeb6b,_0x3ee5cd=DataManager[_0x9c29ab(0xbd9)](this['_item']),_0x28487f=VisuMZ['DamageStyles'][_0x3ee5cd];if(!_0x28487f)return this[_0x9c29ab(0x362)]();return _0x28487f[_0x9c29ab(0x60d)][_0x9c29ab(0x378)](this);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x37b)]=Window_PartyCommand[_0xabeb6b(0xc8)]['initialize'],Window_PartyCommand['prototype'][_0xabeb6b(0x8ea)]=function(_0x36c1d8){const _0x14bfb0=_0xabeb6b;VisuMZ[_0x14bfb0(0x553)]['Window_PartyCommand_initialize'][_0x14bfb0(0x378)](this,_0x36c1d8),this[_0x14bfb0(0x590)](_0x36c1d8);},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x590)]=function(_0x4875fa){const _0x45f346=_0xabeb6b,_0x5bd9cb=new Rectangle(0x0,0x0,_0x4875fa[_0x45f346(0x461)],_0x4875fa['height']);this[_0x45f346(0x139)]=new Window_Base(_0x5bd9cb),this[_0x45f346(0x139)][_0x45f346(0x9ac)]=0x0,this[_0x45f346(0x8d3)](this[_0x45f346(0x139)]),this[_0x45f346(0xe6)]();},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x736)]=function(){const _0x4b0ddb=_0xabeb6b;Window_Command['prototype']['callUpdateHelp'][_0x4b0ddb(0x378)](this);if(this[_0x4b0ddb(0x139)])this[_0x4b0ddb(0xe6)]();},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0xe6)]=function(){const _0x51ef7f=_0xabeb6b,_0x717ee9=this[_0x51ef7f(0x139)];_0x717ee9['contents'][_0x51ef7f(0x500)]();const _0x5ed3a1=this['commandStyleCheck'](this['index']());if(_0x5ed3a1===_0x51ef7f(0x3ac)&&this[_0x51ef7f(0x3e2)]()>0x0){const _0x590b0b=this[_0x51ef7f(0xab0)](this[_0x51ef7f(0x513)]());let _0x7c1aa6=this[_0x51ef7f(0x76e)](this[_0x51ef7f(0x513)]());_0x7c1aa6=_0x7c1aa6[_0x51ef7f(0x5ec)](/\\I\[(\d+)\]/gi,''),_0x717ee9[_0x51ef7f(0x493)](),this['commandNameWindowDrawBackground'](_0x7c1aa6,_0x590b0b),this[_0x51ef7f(0x54a)](_0x7c1aa6,_0x590b0b),this[_0x51ef7f(0x52f)](_0x7c1aa6,_0x590b0b);}},Window_PartyCommand[_0xabeb6b(0xc8)]['commandNameWindowDrawBackground']=function(_0x54a0ea,_0x529168){},Window_PartyCommand['prototype'][_0xabeb6b(0x54a)]=function(_0x15d0c0,_0x33a81d){const _0x3e83dc=_0xabeb6b,_0x220515=this[_0x3e83dc(0x139)];_0x220515[_0x3e83dc(0x47a)](_0x15d0c0,0x0,_0x33a81d['y'],_0x220515[_0x3e83dc(0x62f)],_0x3e83dc(0x627));},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x52f)]=function(_0x2611ba,_0x255138){const _0x4ffc94=_0xabeb6b,_0x3acc35=this[_0x4ffc94(0x139)],_0x58fbbb=$gameSystem[_0x4ffc94(0x2ca)](),_0x20cb35=_0x255138['x']+Math['floor'](_0x255138[_0x4ffc94(0x461)]/0x2)+_0x58fbbb;_0x3acc35['x']=_0x3acc35[_0x4ffc94(0x461)]/-0x2+_0x20cb35,_0x3acc35['y']=Math[_0x4ffc94(0x108)](_0x255138[_0x4ffc94(0x1ee)]/0x2);},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x6e4)]=function(){const _0x2b1fb9=_0xabeb6b;this[_0x2b1fb9(0x348)](),this[_0x2b1fb9(0x14e)](),this[_0x2b1fb9(0x6ba)](),this['addStatusCommand'](),this[_0x2b1fb9(0x88c)](),this[_0x2b1fb9(0x9c1)]();},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x348)]=function(){const _0x288fff=_0xabeb6b,_0x579252=this['commandStyle'](),_0x5dc7f1=VisuMZ[_0x288fff(0x553)][_0x288fff(0x78f)][_0x288fff(0x153)][_0x288fff(0x509)],_0x255971=_0x579252===_0x288fff(0xbd5)?TextManager[_0x288fff(0x4b2)]:_0x288fff(0x8c3)[_0x288fff(0x782)](_0x5dc7f1,TextManager[_0x288fff(0x4b2)]),_0x4dae69=this[_0x288fff(0x545)]();this[_0x288fff(0x33f)](_0x255971,_0x288fff(0x4b2),_0x4dae69);},Window_PartyCommand['prototype']['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0xabeb6b(0xc8)]['addAutoBattleCommand']=function(){const _0x5afae2=_0xabeb6b;if(!this[_0x5afae2(0x922)]())return;const _0x2ec1d6=this[_0x5afae2(0x862)](),_0xc3ae3f=VisuMZ[_0x5afae2(0x553)]['Settings'][_0x5afae2(0x153)][_0x5afae2(0x6d7)],_0x268f9a=_0x2ec1d6==='text'?TextManager[_0x5afae2(0xca)]:_0x5afae2(0x8c3)['format'](_0xc3ae3f,TextManager[_0x5afae2(0xca)]),_0x16cb67=this['isAutoBattleCommandEnabled']();this[_0x5afae2(0x33f)](_0x268f9a,_0x5afae2(0xca),_0x16cb67);},Window_PartyCommand[_0xabeb6b(0xc8)]['isAutoBattleCommandAdded']=function(){const _0x331856=_0xabeb6b;return VisuMZ[_0x331856(0x553)]['Settings']['PartyCmd']['CommandAddAutoBattle'];},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0xaea)]=function(){return!![];},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x6ba)]=function(){},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x6ab)]=function(){const _0x4c09b9=_0xabeb6b,_0x57401e=VisuMZ[_0x4c09b9(0x553)][_0x4c09b9(0x78f)][_0x4c09b9(0x153)]['CommandAddStatus']??!![];if(!_0x57401e)return;const _0x4b8518=this[_0x4c09b9(0x862)](),_0x337923=VisuMZ[_0x4c09b9(0x553)][_0x4c09b9(0x78f)][_0x4c09b9(0xa85)][_0x4c09b9(0x757)]??0x57,_0x2c5d00=_0x4b8518===_0x4c09b9(0xbd5)?TextManager['status']:_0x4c09b9(0x8c3)[_0x4c09b9(0x782)](_0x337923,TextManager[_0x4c09b9(0x94a)]),_0x266bb4=!![];this[_0x4c09b9(0x33f)](_0x2c5d00,'status',_0x266bb4);},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x88c)]=function(){const _0x3be0f7=_0xabeb6b;if(!this['isOptionsCommandAdded']())return;const _0x49977d=this[_0x3be0f7(0x862)](),_0x257d75=VisuMZ[_0x3be0f7(0x553)][_0x3be0f7(0x78f)][_0x3be0f7(0x153)]['CmdIconOptions'],_0x22cb49=_0x49977d===_0x3be0f7(0xbd5)?TextManager['options']:_0x3be0f7(0x8c3)[_0x3be0f7(0x782)](_0x257d75,TextManager['options']),_0x56e977=this[_0x3be0f7(0x9fd)]();this[_0x3be0f7(0x33f)](_0x22cb49,_0x3be0f7(0xaff),_0x56e977);},Window_PartyCommand[_0xabeb6b(0xc8)]['isOptionsCommandAdded']=function(){const _0x29d0d6=_0xabeb6b;return VisuMZ['BattleCore'][_0x29d0d6(0x78f)][_0x29d0d6(0x153)][_0x29d0d6(0xab1)];},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x9fd)]=function(){return!![];},Window_PartyCommand[_0xabeb6b(0xc8)]['addEscapeCommand']=function(){const _0x286f17=_0xabeb6b,_0x359a00=this[_0x286f17(0x862)](),_0x2c5c18=VisuMZ[_0x286f17(0x553)][_0x286f17(0x78f)][_0x286f17(0x153)][_0x286f17(0x8ca)],_0x4670a5=_0x359a00==='text'?TextManager[_0x286f17(0x5db)]:_0x286f17(0x8c3)[_0x286f17(0x782)](_0x2c5c18,TextManager['escape']),_0x428110=this['isEscapeCommandEnabled']();this['addCommand'](_0x4670a5,_0x286f17(0x5db),_0x428110);},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x369)]=function(){const _0x3b38da=_0xabeb6b;return BattleManager[_0x3b38da(0x711)]();},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x5a0)]=function(){const _0x13c2c5=_0xabeb6b;return VisuMZ[_0x13c2c5(0x553)]['Settings'][_0x13c2c5(0x153)][_0x13c2c5(0x8e5)];},Window_PartyCommand['prototype'][_0xabeb6b(0xade)]=function(_0x3f0114){const _0x5972dc=_0xabeb6b,_0xb09e47=this[_0x5972dc(0x466)](_0x3f0114);if(_0xb09e47===_0x5972dc(0x165))this[_0x5972dc(0x2e3)](_0x3f0114);else _0xb09e47===_0x5972dc(0x3ac)?this['drawItemStyleIcon'](_0x3f0114):Window_Command[_0x5972dc(0xc8)][_0x5972dc(0xade)][_0x5972dc(0x378)](this,_0x3f0114);},Window_PartyCommand[_0xabeb6b(0xc8)]['commandStyle']=function(){const _0x4f0f12=_0xabeb6b;return VisuMZ[_0x4f0f12(0x553)]['Settings'][_0x4f0f12(0x153)][_0x4f0f12(0x788)];},Window_PartyCommand['prototype']['commandStyleCheck']=function(_0x38daaa){const _0x2159e3=_0xabeb6b;if(_0x38daaa<0x0)return _0x2159e3(0xbd5);const _0xf9f5cc=this[_0x2159e3(0x862)]();if(_0xf9f5cc!==_0x2159e3(0x388))return _0xf9f5cc;else{if(this[_0x2159e3(0x3e2)]()>0x0){const _0x1cc2b4=this[_0x2159e3(0x76e)](_0x38daaa);if(_0x1cc2b4[_0x2159e3(0xef)](/\\I\[(\d+)\]/i)){const _0x11bea5=this[_0x2159e3(0xab0)](_0x38daaa),_0x3a8334=this[_0x2159e3(0x76d)](_0x1cc2b4)[_0x2159e3(0x461)];return _0x3a8334<=_0x11bea5[_0x2159e3(0x461)]?_0x2159e3(0x165):_0x2159e3(0x3ac);}}}return _0x2159e3(0xbd5);},Window_PartyCommand['prototype'][_0xabeb6b(0x2e3)]=function(_0x3e664a){const _0x22802f=_0xabeb6b,_0x451303=this['itemLineRect'](_0x3e664a),_0x56a0d1=this[_0x22802f(0x76e)](_0x3e664a),_0x180cc6=this[_0x22802f(0x76d)](_0x56a0d1)[_0x22802f(0x461)];this['changePaintOpacity'](this[_0x22802f(0x35a)](_0x3e664a));const _0x9d1a8f=this[_0x22802f(0x5a0)]();if(_0x9d1a8f==='right')this['drawTextEx'](_0x56a0d1,_0x451303['x']+_0x451303[_0x22802f(0x461)]-_0x180cc6,_0x451303['y'],_0x180cc6);else{if(_0x9d1a8f===_0x22802f(0x627)){const _0x4c93d2=_0x451303['x']+Math[_0x22802f(0x108)]((_0x451303[_0x22802f(0x461)]-_0x180cc6)/0x2);this[_0x22802f(0x674)](_0x56a0d1,_0x4c93d2,_0x451303['y'],_0x180cc6);}else this[_0x22802f(0x674)](_0x56a0d1,_0x451303['x'],_0x451303['y'],_0x180cc6);}},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x5d1)]=function(_0x51d21f){const _0x3b564b=_0xabeb6b;this[_0x3b564b(0x76e)](_0x51d21f)['match'](/\\I\[(\d+)\]/i);const _0x3c1df2=Number(RegExp['$1'])||0x0,_0xb29551=this[_0x3b564b(0xab0)](_0x51d21f),_0xdef6f6=_0xb29551['x']+Math[_0x3b564b(0x108)]((_0xb29551[_0x3b564b(0x461)]-ImageManager[_0x3b564b(0x12a)])/0x2),_0x55f3ae=_0xb29551['y']+(_0xb29551[_0x3b564b(0x1ee)]-ImageManager[_0x3b564b(0x2fe)])/0x2;this[_0x3b564b(0xad7)](_0x3c1df2,_0xdef6f6,_0x55f3ae);},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x855)]=function(){},Window_PartyCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x440)]=function(){const _0x5e1764=_0xabeb6b;Window_Command['prototype'][_0x5e1764(0x440)]['call'](this);const _0x12d7fb=this['battleLayoutStyle']();_0x12d7fb===_0x5e1764(0x2d0)&&this[_0x5e1764(0x91c)]();},Window_PartyCommand[_0xabeb6b(0xc8)]['battleLayoutStyle']=function(){const _0x2032ea=_0xabeb6b;if(this[_0x2032ea(0x2b9)])return this['_battleLayoutStyle'];return this[_0x2032ea(0x2b9)]=SceneManager[_0x2032ea(0x483)][_0x2032ea(0x3fb)](),this[_0x2032ea(0x2b9)];},Window_PartyCommand[_0xabeb6b(0xc8)]['updateHelp']=function(){const _0x5f427f=_0xabeb6b,_0x47a252=VisuMZ[_0x5f427f(0x553)]['Settings'][_0x5f427f(0x153)],_0x5ee437=this[_0x5f427f(0xb49)]();switch(_0x5ee437){case _0x5f427f(0x4b2):this['_helpWindow'][_0x5f427f(0x936)](_0x47a252[_0x5f427f(0x183)]);break;case _0x5f427f(0xca):this['_helpWindow'][_0x5f427f(0x936)](_0x47a252[_0x5f427f(0x13a)]);break;case _0x5f427f(0xaff):this[_0x5f427f(0x80a)][_0x5f427f(0x936)](_0x47a252[_0x5f427f(0xafa)]);break;case _0x5f427f(0x5db):this[_0x5f427f(0x80a)][_0x5f427f(0x936)](_0x47a252[_0x5f427f(0x10e)]);break;case'status':this[_0x5f427f(0x80a)]['setText'](Window_InBattleStatus[_0x5f427f(0x7fa)]['statusHelpDesc']);break;default:this[_0x5f427f(0x80a)][_0x5f427f(0x936)]('');break;}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x3c5)]=Window_ActorCommand[_0xabeb6b(0xc8)]['initialize'],Window_ActorCommand['prototype']['initialize']=function(_0x246f54){const _0x27103e=_0xabeb6b;VisuMZ[_0x27103e(0x553)]['Window_ActorCommand_initialize'][_0x27103e(0x378)](this,_0x246f54),this[_0x27103e(0x590)](_0x246f54);},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x590)]=function(_0x2b7bb1){const _0x3846ec=_0xabeb6b,_0xe1add9=new Rectangle(0x0,0x0,_0x2b7bb1[_0x3846ec(0x461)],_0x2b7bb1['height']);this['_commandNameWindow']=new Window_Base(_0xe1add9),this[_0x3846ec(0x139)][_0x3846ec(0x9ac)]=0x0,this[_0x3846ec(0x8d3)](this[_0x3846ec(0x139)]),this[_0x3846ec(0xe6)]();},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x736)]=function(){const _0xae3c96=_0xabeb6b;Window_Command[_0xae3c96(0xc8)]['callUpdateHelp'][_0xae3c96(0x378)](this);if(this[_0xae3c96(0x139)])this[_0xae3c96(0xe6)]();},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0xe6)]=function(){const _0x14c932=_0xabeb6b,_0x2ca182=this[_0x14c932(0x139)];_0x2ca182['contents'][_0x14c932(0x500)]();const _0x5c4e27=this['commandStyleCheck'](this[_0x14c932(0x513)]());if(_0x5c4e27===_0x14c932(0x3ac)&&this[_0x14c932(0x3e2)]()>0x0){const _0x468da5=this[_0x14c932(0xab0)](this['index']());let _0x133f07=this['commandName'](this[_0x14c932(0x513)]());_0x133f07=_0x133f07['replace'](/\\I\[(\d+)\]/gi,''),_0x2ca182[_0x14c932(0x493)](),this['commandNameWindowDrawBackground'](_0x133f07,_0x468da5),this[_0x14c932(0x54a)](_0x133f07,_0x468da5),this[_0x14c932(0x52f)](_0x133f07,_0x468da5);}},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0xc7)]=function(_0x41db9a,_0xe56d5f){},Window_ActorCommand['prototype'][_0xabeb6b(0x54a)]=function(_0x2a7e88,_0x146b60){const _0x461eab=_0xabeb6b,_0x156111=this['_commandNameWindow'];_0x156111[_0x461eab(0x47a)](_0x2a7e88,0x0,_0x146b60['y'],_0x156111[_0x461eab(0x62f)],_0x461eab(0x627));},Window_ActorCommand[_0xabeb6b(0xc8)]['commandNameWindowCenter']=function(_0x4a4120,_0x511ef9){const _0x4503a7=_0xabeb6b,_0xf0164d=this[_0x4503a7(0x139)],_0x25af15=$gameSystem[_0x4503a7(0x2ca)](),_0x2cebbe=_0x511ef9['x']+Math['floor'](_0x511ef9['width']/0x2)+_0x25af15;_0xf0164d['x']=_0xf0164d[_0x4503a7(0x461)]/-0x2+_0x2cebbe,_0xf0164d['y']=Math[_0x4503a7(0x108)](_0x511ef9[_0x4503a7(0x1ee)]/0x2);},Window_ActorCommand['prototype'][_0xabeb6b(0x6e4)]=function(){const _0x5d3aeb=_0xabeb6b;if(!this[_0x5d3aeb(0xb2d)])return;const _0x3321c0=this[_0x5d3aeb(0xb2d)][_0x5d3aeb(0x213)]();for(const _0x217368 of _0x3321c0){this[_0x5d3aeb(0x66c)](_0x217368[_0x5d3aeb(0xf8)]()[_0x5d3aeb(0xd3)]());}},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x66c)]=function(_0x3f00c4){const _0x2d5497=_0xabeb6b;_0x3f00c4===_0x2d5497(0xde)&&this[_0x2d5497(0xa3d)]();[_0x2d5497(0x6ec),_0x2d5497(0xa7a)][_0x2d5497(0x5d8)](_0x3f00c4)&&this[_0x2d5497(0x7ad)]();_0x3f00c4===_0x2d5497(0x403)&&this[_0x2d5497(0x9a4)]();_0x3f00c4===_0x2d5497(0xbb3)&&this[_0x2d5497(0x1e8)]();_0x3f00c4==='STATUS'&&this[_0x2d5497(0x6ab)]();_0x3f00c4===_0x2d5497(0x157)&&this[_0x2d5497(0x9c1)]();_0x3f00c4===_0x2d5497(0xbb7)&&this[_0x2d5497(0x14e)]();if(_0x3f00c4[_0x2d5497(0xef)](/STYPE: (\d+)/i)){const _0x256827=Number(RegExp['$1']);this[_0x2d5497(0x778)](_0x256827);}else{if(_0x3f00c4['match'](/STYPE: (.*)/i)){const _0x4c7a1c=DataManager[_0x2d5497(0xa13)](RegExp['$1']);this[_0x2d5497(0x778)](_0x4c7a1c);}}_0x3f00c4==='ALL\x20SKILLS'&&this[_0x2d5497(0x6b7)]();if(_0x3f00c4['match'](/SKILL: (\d+)/i)){const _0x5d141f=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x5d141f]);}else{if(_0x3f00c4[_0x2d5497(0xef)](/SKILL: (.*)/i)){const _0x217981=DataManager[_0x2d5497(0x8b0)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x217981]);}}_0x3f00c4==='PARTY'&&Imported[_0x2d5497(0x9dc)]&&this[_0x2d5497(0x349)](),[_0x2d5497(0x7ef),_0x2d5497(0x661)][_0x2d5497(0x5d8)](_0x3f00c4)&&Imported['VisuMZ_4_CombatLog']&&this['addCombatLogCommand'](),_0x3f00c4==='WEAPON\x20SWAP'&&Imported[_0x2d5497(0xb13)]&&this[_0x2d5497(0x75c)](!![]),_0x3f00c4===_0x2d5497(0xb11)&&Imported[_0x2d5497(0x664)]&&this[_0x2d5497(0x813)]();},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0xa3d)]=function(){const _0x2b061b=_0xabeb6b,_0x367628=$dataSkills[this[_0x2b061b(0xb2d)][_0x2b061b(0x73d)]()];if(!_0x367628)return;if(!this['canAddSkillCommand'](_0x367628))return;const _0x4558be=this[_0x2b061b(0x862)](),_0x8d51a5=DataManager[_0x2b061b(0x589)](_0x367628),_0x1b0467=DataManager[_0x2b061b(0xa81)](_0x367628),_0xfbf52=_0x4558be===_0x2b061b(0xbd5)?_0x8d51a5:_0x2b061b(0x8c3)['format'](_0x1b0467,_0x8d51a5);this[_0x2b061b(0x33f)](_0xfbf52,_0x2b061b(0xa71),this['_actor'][_0x2b061b(0x29c)]());},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x9a4)]=function(){const _0x37d3ec=_0xabeb6b,_0x947495=$dataSkills[this[_0x37d3ec(0xb2d)][_0x37d3ec(0x3de)]()];if(!_0x947495)return;if(!this[_0x37d3ec(0xb1c)](_0x947495))return;const _0x18483b=this[_0x37d3ec(0x862)](),_0x27e37b=DataManager[_0x37d3ec(0x589)](_0x947495),_0x107eeb=DataManager[_0x37d3ec(0xa81)](_0x947495),_0x1c3940=_0x18483b==='text'?_0x27e37b:_0x37d3ec(0x8c3)[_0x37d3ec(0x782)](_0x107eeb,_0x27e37b);this[_0x37d3ec(0x33f)](_0x1c3940,_0x37d3ec(0xb63),this[_0x37d3ec(0xb2d)][_0x37d3ec(0x47d)]());},Window_ActorCommand['prototype'][_0xabeb6b(0x1e8)]=function(){const _0x361301=_0xabeb6b,_0x3e49b1=this[_0x361301(0x862)](),_0x1ca5ae=VisuMZ[_0x361301(0x553)][_0x361301(0x78f)][_0x361301(0x81c)][_0x361301(0xa34)],_0x5870ea=_0x3e49b1===_0x361301(0xbd5)?TextManager[_0x361301(0xb39)]:_0x361301(0x8c3)['format'](_0x1ca5ae,TextManager[_0x361301(0xb39)]),_0x4b4b02=this['isItemCommandEnabled']();this[_0x361301(0x33f)](_0x5870ea,_0x361301(0xb39),_0x4b4b02);},Window_ActorCommand['prototype']['isItemCommandEnabled']=function(){const _0x223df4=_0xabeb6b;return this[_0x223df4(0xb2d)]&&this['_actor']['canUseItemCommand']();},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x7ad)]=function(){const _0x4a32d9=_0xabeb6b,_0x5a4028=this[_0x4a32d9(0xb2d)][_0x4a32d9(0x908)]();for(const _0x13ac03 of _0x5a4028){this[_0x4a32d9(0x778)](_0x13ac03);}},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x778)]=function(_0x28d298){const _0x22f58b=_0xabeb6b;let _0x33f445=$dataSystem[_0x22f58b(0x908)][_0x28d298];if(!_0x33f445)return;let _0x446282=_0x33f445;const _0x3f7172=this[_0x22f58b(0x862)]();if(_0x3f7172===_0x22f58b(0xbd5))_0x446282=_0x446282[_0x22f58b(0x5ec)](/\x1I\[(\d+)\]/gi,''),_0x446282=_0x446282['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x33f445['match'](/\\I\[(\d+)\]/i)){const _0x420d9b=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ['SkillsStatesCore']['Settings'][_0x22f58b(0x875)]:VisuMZ[_0x22f58b(0x553)][_0x22f58b(0x78f)]['ActorCmd'],_0x18395e=$dataSystem[_0x22f58b(0x44e)][_0x22f58b(0x5d8)](_0x28d298),_0xdccf6=_0x18395e?_0x420d9b['IconStypeMagic']:_0x420d9b[_0x22f58b(0x4ec)];_0x446282=_0x22f58b(0x8c3)[_0x22f58b(0x782)](_0xdccf6,_0x33f445);}}this['addCommand'](_0x446282,_0x22f58b(0x3a1),!![],_0x28d298);},Window_ActorCommand[_0xabeb6b(0xc8)]['addSingleSkillCommands']=function(){const _0x1449a4=_0xabeb6b,_0x27c6=this[_0x1449a4(0xb2d)]['skillTypes'](),_0x368ecb=this[_0x1449a4(0xb2d)][_0x1449a4(0x655)]();for(const _0x456187 of _0x368ecb){if(!_0x456187)continue;if(Imported[_0x1449a4(0x707)]){if(this[_0x1449a4(0x734)](_0x456187))continue;if(this[_0x1449a4(0xb69)](_0x456187))continue;}else{if(!_0x27c6[_0x1449a4(0x5d8)](_0x456187[_0x1449a4(0x408)]))continue;}this[_0x1449a4(0x9cf)](_0x456187);}},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x734)]=function(_0x9a18e0){const _0x3c379c=_0xabeb6b,_0x2011cf=this['_actor']['skillTypes'](),_0x23bd70=_0x2011cf[_0x3c379c(0x959)](_0x3bfdab=>DataManager[_0x3c379c(0x699)](_0x9a18e0)['includes'](_0x3bfdab));return _0x23bd70[_0x3c379c(0x93a)]<=0x0;},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0xb69)]=function(_0x597158){const _0x210bae=_0xabeb6b;if(Imported[_0x210bae(0x707)]){if(VisuMZ[_0x210bae(0xb0a)][_0x210bae(0x729)]>=1.24){if(this[_0x210bae(0xb2d)]){if(!VisuMZ[_0x210bae(0xb0a)]['CheckVisibleBattleNotetags'](this[_0x210bae(0xb2d)],_0x597158))return!![];if(!VisuMZ[_0x210bae(0xb0a)][_0x210bae(0x2b5)](this[_0x210bae(0xb2d)],_0x597158))return!![];if(!VisuMZ[_0x210bae(0xb0a)]['CheckVisibleSkillNotetags'](this['_actor'],_0x597158))return!![];}}else{if(!Window_SkillList[_0x210bae(0xc8)][_0x210bae(0x204)][_0x210bae(0x378)](this,_0x597158))return!![];if(!Window_SkillList[_0x210bae(0xc8)]['checkShowHideSwitchNotetags'][_0x210bae(0x378)](this,_0x597158))return!![];if(!Window_SkillList[_0x210bae(0xc8)]['checkShowHideSkillNotetags'][_0x210bae(0x378)](this,_0x597158))return!![];}}return![];},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x9cf)]=function(_0x52e445){const _0x2d1532=_0xabeb6b;if(!_0x52e445)return;if(!this['canAddSkillCommand'](_0x52e445))return;const _0x9f65ec=this[_0x2d1532(0x862)](),_0x4e614d=DataManager[_0x2d1532(0x589)](_0x52e445),_0x2b000e=DataManager['battleCommandIcon'](_0x52e445),_0x20a853=_0x9f65ec==='text'?_0x4e614d:_0x2d1532(0x8c3)['format'](_0x2b000e,_0x4e614d),_0x599fa7=this[_0x2d1532(0xb2d)][_0x2d1532(0x98e)](_0x52e445);this['addCommand'](_0x20a853,'singleSkill',_0x599fa7,_0x52e445['id']);},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0xb1c)]=function(_0x4cad75){const _0x11d1fc=_0xabeb6b,_0x5ce2c6=_0x4cad75[_0x11d1fc(0x6f8)];if(_0x5ce2c6['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x11d1fc(0xb2d)][_0x11d1fc(0x105)](_0x4cad75['id']))return![];}if(_0x5ce2c6['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this['_actor'][_0x11d1fc(0xbd0)](_0x4cad75['id']))return![];}const _0x142852=VisuMZ[_0x11d1fc(0x553)][_0x11d1fc(0x613)](_0x4cad75,'CommandVisible');if(VisuMZ['BattleCore']['JS'][_0x142852]){if(!VisuMZ['BattleCore']['JS'][_0x142852][_0x11d1fc(0x378)](this,this[_0x11d1fc(0xb2d)],_0x4cad75))return![];}return VisuMZ[_0x11d1fc(0x553)][_0x11d1fc(0x9a9)](_0x4cad75);},VisuMZ['BattleCore'][_0xabeb6b(0x9a9)]=function(_0x28e66e){const _0x3c71e6=_0xabeb6b,_0x66755b=_0x28e66e['note'];if(_0x66755b[_0x3c71e6(0xef)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x7c3bd4=JSON['parse']('['+RegExp['$1'][_0x3c71e6(0xef)](/\d+/g)+']');for(const _0x854916 of _0x7c3bd4){if(!$gameSwitches[_0x3c71e6(0x2d9)](_0x854916))return![];}return!![];}if(_0x66755b['match'](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x42b51e=JSON[_0x3c71e6(0x3ef)]('['+RegExp['$1'][_0x3c71e6(0xef)](/\d+/g)+']');for(const _0x1c1ffc of _0x42b51e){if(!$gameSwitches['value'](_0x1c1ffc))return![];}return!![];}if(_0x66755b['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x128691=JSON[_0x3c71e6(0x3ef)]('['+RegExp['$1'][_0x3c71e6(0xef)](/\d+/g)+']');for(const _0x2d7172 of _0x128691){if($gameSwitches[_0x3c71e6(0x2d9)](_0x2d7172))return!![];}return![];}if(_0x66755b[_0x3c71e6(0xef)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4eb6b5=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x2ffd6a of _0x4eb6b5){if(!$gameSwitches['value'](_0x2ffd6a))return!![];}return![];}if(_0x66755b[_0x3c71e6(0xef)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x33d686=JSON[_0x3c71e6(0x3ef)]('['+RegExp['$1'][_0x3c71e6(0xef)](/\d+/g)+']');for(const _0x526470 of _0x33d686){if(!$gameSwitches[_0x3c71e6(0x2d9)](_0x526470))return!![];}return![];}if(_0x66755b[_0x3c71e6(0xef)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x232694=JSON[_0x3c71e6(0x3ef)]('['+RegExp['$1'][_0x3c71e6(0xef)](/\d+/g)+']');for(const _0x3f3c4c of _0x232694){if($gameSwitches[_0x3c71e6(0x2d9)](_0x3f3c4c))return![];}return!![];}return!![];},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x6ab)]=function(){const _0x29f7eb=_0xabeb6b,_0x3a6cfd=this[_0x29f7eb(0x862)](),_0x38f478=VisuMZ[_0x29f7eb(0x553)][_0x29f7eb(0x78f)][_0x29f7eb(0xa85)]['CmdIconStatus']??0x57,_0x3847ab=_0x3a6cfd==='text'?TextManager[_0x29f7eb(0x94a)]:_0x29f7eb(0x8c3)[_0x29f7eb(0x782)](_0x38f478,TextManager[_0x29f7eb(0x94a)]),_0x3cd8b1=!![];this[_0x29f7eb(0x33f)](_0x3847ab,'status',_0x3cd8b1);},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x9c1)]=function(){const _0x572b27=_0xabeb6b,_0x5a0521=this[_0x572b27(0x862)](),_0xa97d82=VisuMZ['BattleCore']['Settings']['PartyCmd'][_0x572b27(0x8ca)],_0x469fdb=_0x5a0521===_0x572b27(0xbd5)?TextManager[_0x572b27(0x5db)]:_0x572b27(0x8c3)[_0x572b27(0x782)](_0xa97d82,TextManager[_0x572b27(0x5db)]),_0x125ce0=this[_0x572b27(0x369)]();this[_0x572b27(0x33f)](_0x469fdb,_0x572b27(0x5db),_0x125ce0);},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x369)]=function(){const _0x5c5566=_0xabeb6b;return BattleManager[_0x5c5566(0x711)]();},Window_ActorCommand[_0xabeb6b(0xc8)]['addAutoBattleCommand']=function(){const _0x837f37=_0xabeb6b,_0x4a304e=this[_0x837f37(0x862)](),_0x5a35c5=VisuMZ[_0x837f37(0x553)]['Settings']['PartyCmd'][_0x837f37(0x6d7)],_0x81785d=_0x4a304e===_0x837f37(0xbd5)?TextManager['autoBattle']:_0x837f37(0x8c3)['format'](_0x5a35c5,TextManager['autoBattle']),_0x3db0aa=this[_0x837f37(0xaea)]();this[_0x837f37(0x33f)](_0x81785d,'autoBattle',_0x3db0aa);},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0xaea)]=function(){return!![];},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x5a0)]=function(){const _0x2b955c=_0xabeb6b;return VisuMZ[_0x2b955c(0x553)]['Settings'][_0x2b955c(0x81c)]['CmdTextAlign'];},Window_ActorCommand[_0xabeb6b(0xc8)]['drawItem']=function(_0x4c45e8){const _0x52f1e9=_0xabeb6b,_0x4f4ce2=this[_0x52f1e9(0x466)](_0x4c45e8);if(_0x4f4ce2===_0x52f1e9(0x165))this[_0x52f1e9(0x2e3)](_0x4c45e8);else _0x4f4ce2===_0x52f1e9(0x3ac)?this[_0x52f1e9(0x5d1)](_0x4c45e8):Window_Command[_0x52f1e9(0xc8)][_0x52f1e9(0xade)][_0x52f1e9(0x378)](this,_0x4c45e8);this[_0x52f1e9(0x4bd)](_0x4c45e8);},Window_ActorCommand[_0xabeb6b(0xc8)]['commandStyle']=function(){const _0x145bc6=_0xabeb6b;return VisuMZ[_0x145bc6(0x553)]['Settings'][_0x145bc6(0x81c)][_0x145bc6(0x788)];},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x466)]=function(_0x4eb6e7){const _0xe46cc7=_0xabeb6b;if(_0x4eb6e7<0x0)return _0xe46cc7(0xbd5);const _0xbca81f=this[_0xe46cc7(0x862)]();if(_0xbca81f!==_0xe46cc7(0x388))return _0xbca81f;else{if(this[_0xe46cc7(0x3e2)]()>0x0){const _0x4f393b=this[_0xe46cc7(0x76e)](_0x4eb6e7);if(_0x4f393b[_0xe46cc7(0xef)](/\\I\[(\d+)\]/i)){const _0x48da2c=this[_0xe46cc7(0xab0)](_0x4eb6e7),_0x3f2965=this['textSizeEx'](_0x4f393b)['width'];return _0x3f2965<=_0x48da2c[_0xe46cc7(0x461)]?'iconText':_0xe46cc7(0x3ac);}}}return'text';},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x2e3)]=function(_0x20d002){const _0x180e2c=_0xabeb6b,_0x5cb6b3=this['itemLineRect'](_0x20d002),_0x493ec2=this[_0x180e2c(0x76e)](_0x20d002),_0x4400db=this[_0x180e2c(0x76d)](_0x493ec2)[_0x180e2c(0x461)];this[_0x180e2c(0x99d)](this[_0x180e2c(0x35a)](_0x20d002));const _0x14d01a=this[_0x180e2c(0x5a0)]();if(_0x14d01a===_0x180e2c(0x20e))this[_0x180e2c(0x674)](_0x493ec2,_0x5cb6b3['x']+_0x5cb6b3[_0x180e2c(0x461)]-_0x4400db,_0x5cb6b3['y'],_0x4400db);else{if(_0x14d01a===_0x180e2c(0x627)){const _0x28699b=_0x5cb6b3['x']+Math[_0x180e2c(0x108)]((_0x5cb6b3[_0x180e2c(0x461)]-_0x4400db)/0x2);this['drawTextEx'](_0x493ec2,_0x28699b,_0x5cb6b3['y'],_0x4400db);}else this['drawTextEx'](_0x493ec2,_0x5cb6b3['x'],_0x5cb6b3['y'],_0x4400db);}},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x5d1)]=function(_0x24e951){const _0x6dd500=_0xabeb6b;this['commandName'](_0x24e951)[_0x6dd500(0xef)](/\\I\[(\d+)\]/i);const _0x2b8995=Number(RegExp['$1'])||0x0,_0x480abe=this[_0x6dd500(0xab0)](_0x24e951),_0x477e91=_0x480abe['x']+Math[_0x6dd500(0x108)]((_0x480abe[_0x6dd500(0x461)]-ImageManager[_0x6dd500(0x12a)])/0x2),_0x8def03=_0x480abe['y']+(_0x480abe['height']-ImageManager[_0x6dd500(0x2fe)])/0x2;this[_0x6dd500(0xad7)](_0x2b8995,_0x477e91,_0x8def03);},Window_ActorCommand['prototype'][_0xabeb6b(0x4bd)]=function(_0x3a2081){const _0x514199=_0xabeb6b;if(!(VisuMZ['BattleCore'][_0x514199(0x78f)][_0x514199(0x81c)]['ShowCosts']??!![]))return;const _0x40c80a=this[_0x514199(0x519)](_0x3a2081);if(!['attack',_0x514199(0xb63),'singleSkill']['includes'](_0x40c80a))return;const _0x2ad055=this[_0x514199(0xab0)](_0x3a2081);let _0x50cf90=null;if(_0x40c80a==='attack')_0x50cf90=$dataSkills[this[_0x514199(0xb2d)][_0x514199(0x73d)]()];else _0x40c80a===_0x514199(0xb63)?_0x50cf90=$dataSkills[this['_actor']['guardSkillId']()]:_0x50cf90=$dataSkills[this[_0x514199(0xac2)][_0x3a2081][_0x514199(0x3b7)]];this['drawSkillCost'](this[_0x514199(0xb2d)],_0x50cf90,_0x2ad055['x'],_0x2ad055['y'],_0x2ad055[_0x514199(0x461)]);},Window_ActorCommand['prototype'][_0xabeb6b(0x115)]=function(_0x2b4288,_0x50beda,_0x18353c,_0x32775d,_0x3d9a62){const _0x192289=_0xabeb6b;if(!_0x50beda)return;Imported[_0x192289(0x707)]?Window_Command[_0x192289(0xc8)][_0x192289(0x115)][_0x192289(0x378)](this,_0x2b4288,_0x50beda,_0x18353c,_0x32775d,_0x3d9a62):Window_SkillList[_0x192289(0xc8)][_0x192289(0x115)][_0x192289(0x378)](this,_0x50beda,_0x18353c,_0x32775d,_0x3d9a62);},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x855)]=function(){},Window_ActorCommand['prototype']['activate']=function(){const _0x5a3d5f=_0xabeb6b;Window_Command[_0x5a3d5f(0xc8)]['activate']['call'](this);const _0x270666=this[_0x5a3d5f(0x3fb)]();_0x270666==='border'&&this[_0x5a3d5f(0x91c)]();},Window_ActorCommand['prototype'][_0xabeb6b(0x3fb)]=function(){const _0x4cf61b=_0xabeb6b;if(this['_battleLayoutStyle'])return this[_0x4cf61b(0x2b9)];return this[_0x4cf61b(0x2b9)]=SceneManager[_0x4cf61b(0x483)][_0x4cf61b(0x3fb)](),this[_0x4cf61b(0x2b9)];},VisuMZ[_0xabeb6b(0x553)]['Window_ActorCommand_setup']=Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x3a5)],Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x3a5)]=function(_0x1e45ae){const _0x2d171a=_0xabeb6b,_0x584366=this[_0x2d171a(0x3fb)]();if(_0x1e45ae&&['xp',_0x2d171a(0x62b)][_0x2d171a(0x5d8)](_0x584366))this[_0x2d171a(0x9e0)](_0x1e45ae);else _0x1e45ae&&[_0x2d171a(0x2d0)][_0x2d171a(0x5d8)](_0x584366)&&(this[_0x2d171a(0x646)](_0x1e45ae),this[_0x2d171a(0x91c)]());VisuMZ['BattleCore'][_0x2d171a(0x866)]['call'](this,_0x1e45ae),_0x1e45ae&&$gameTroop[_0x2d171a(0x120)]()['length']>0x0&&_0x1e45ae['battler']()&&_0x1e45ae[_0x2d171a(0x7bb)]()[_0x2d171a(0xe3)]();},Window_ActorCommand['prototype'][_0xabeb6b(0x9e0)]=function(_0x547b33){const _0x306713=_0xabeb6b,_0x17fcaa=VisuMZ[_0x306713(0x553)][_0x306713(0x78f)][_0x306713(0x198)]['CommandWidth'],_0x50adb0=Math[_0x306713(0xb36)](Graphics[_0x306713(0x143)]/0x3),_0x5c4ba6=Math[_0x306713(0xb36)](Graphics[_0x306713(0x143)]/$gameParty[_0x306713(0x786)]()[_0x306713(0x93a)]),_0x5d8deb=Math['max'](Math[_0x306713(0x1be)](_0x50adb0,_0x5c4ba6),_0x17fcaa),_0x9cf769=this[_0x306713(0x429)](VisuMZ[_0x306713(0x553)][_0x306713(0x78f)]['BattleLayout'][_0x306713(0x871)]),_0x349799=Math[_0x306713(0x108)]((Graphics[_0x306713(0x143)]-Graphics[_0x306713(0x461)])/0x2),_0x5c163d=Graphics[_0x306713(0x143)]-_0x349799,_0x434f79=(Math[_0x306713(0xb36)](_0x5c4ba6*_0x547b33[_0x306713(0x513)]())+Math[_0x306713(0xb36)]((_0x5c4ba6-_0x5d8deb)/0x2))[_0x306713(0x86d)](_0x349799,_0x5c163d-_0x5d8deb),_0x5a7c99=Math[_0x306713(0xb36)](SceneManager[_0x306713(0x483)][_0x306713(0x4ab)]['y']-_0x9cf769);this[_0x306713(0x430)](_0x434f79,_0x5a7c99,_0x5d8deb,_0x9cf769),this[_0x306713(0x773)](),this[_0x306713(0x1a1)](0x1);},Window_ActorCommand[_0xabeb6b(0xc8)]['resizeWindowBorderStyle']=function(_0x4d37bf){const _0x3faba3=_0xabeb6b,_0x32f7a4=SceneManager[_0x3faba3(0x483)]['partyCommandWindowRectBorderStyle']();this[_0x3faba3(0x430)](_0x32f7a4['x'],_0x32f7a4['y'],_0x32f7a4['width'],_0x32f7a4[_0x3faba3(0x1ee)]),this[_0x3faba3(0x773)](),this[_0x3faba3(0x1a1)](0x0);},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x264)]=function(){const _0xc879d2=_0xabeb6b;if(this[_0xc879d2(0x742)]){const _0x51508c=this[_0xc879d2(0x742)][_0xc879d2(0xac0)],_0x46546c=this['width']-0x8,_0x12bbf1=this[_0xc879d2(0x1ee)],_0x53db5b=this[_0xc879d2(0xa3c)],_0x2d7a09=ColorManager['dimColor1'](),_0x3ae5e9=ColorManager[_0xc879d2(0x1d1)]();this[_0xc879d2(0x742)]['x']=0x4,_0x51508c[_0xc879d2(0x8a4)](_0x46546c,_0x12bbf1),_0x51508c[_0xc879d2(0xbb9)](0x0,0x0,_0x46546c,_0x53db5b,_0x3ae5e9,_0x2d7a09,!![]),_0x51508c['fillRect'](0x0,_0x53db5b,_0x46546c,_0x12bbf1-_0x53db5b*0x2,_0x2d7a09),_0x51508c[_0xc879d2(0xbb9)](0x0,_0x12bbf1-_0x53db5b,_0x46546c,_0x53db5b,_0x2d7a09,_0x3ae5e9,!![]),this[_0xc879d2(0x742)]['setFrame'](0x0,0x0,_0x46546c,_0x12bbf1);}},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x2c3)]=function(){const _0xfab5ed=_0xabeb6b;if(!this[_0xfab5ed(0xb2d)])return;const _0x424416=VisuMZ['BattleCore'][_0xfab5ed(0x78f)][_0xfab5ed(0x81c)],_0x28ad07=this[_0xfab5ed(0xb49)]();switch(_0x28ad07){case'attack':this[_0xfab5ed(0x741)]($dataSkills[this['_actor'][_0xfab5ed(0x73d)]()]);break;case _0xfab5ed(0xb63):this['setHelpWindowItem']($dataSkills[this[_0xfab5ed(0xb2d)][_0xfab5ed(0x3de)]()]);break;case _0xfab5ed(0x3a1):const _0x292e99=_0x424416[_0xfab5ed(0xba1)],_0x15827e=_0x292e99['format']($dataSystem[_0xfab5ed(0x908)][this['currentExt']()]);this[_0xfab5ed(0x80a)][_0xfab5ed(0x936)](_0x15827e);break;case _0xfab5ed(0xad6):this[_0xfab5ed(0x741)]($dataSkills[this[_0xfab5ed(0x5d6)]()]);break;case'item':this[_0xfab5ed(0x80a)][_0xfab5ed(0x936)](_0x424416[_0xfab5ed(0x2e7)]);break;case _0xfab5ed(0x5db):this[_0xfab5ed(0x80a)][_0xfab5ed(0x936)](_0x424416[_0xfab5ed(0x10e)]);break;case _0xfab5ed(0xca):this[_0xfab5ed(0x80a)][_0xfab5ed(0x936)](_0x424416['HelpAutoBattle']);break;case _0xfab5ed(0x94a):this[_0xfab5ed(0x80a)]['setText'](Window_InBattleStatus['SETTINGS'][_0xfab5ed(0x80f)]);break;default:this['_helpWindow'][_0xfab5ed(0x936)]('');break;}},Window_ActorCommand['prototype']['selectLast']=function(){const _0x4d9239=_0xabeb6b;this[_0x4d9239(0x5b4)](0x0);if(this[_0x4d9239(0xb2d)]&&ConfigManager['commandRemember']){const _0x44f328=this[_0x4d9239(0xb2d)][_0x4d9239(0x708)]();this[_0x4d9239(0x27e)](_0x44f328);if(_0x44f328===_0x4d9239(0x3a1)){const _0x570960=this[_0x4d9239(0xb2d)][_0x4d9239(0x36d)]();if(_0x570960){const _0xe5236c=this[_0x4d9239(0x24c)](_0x4d9239(0x3a1),_0x570960[_0x4d9239(0x408)]);this[_0x4d9239(0x802)](_0xe5236c||0x0);}}else{if(_0x44f328===_0x4d9239(0xad6)){const _0x5f3024=this[_0x4d9239(0xb2d)][_0x4d9239(0x36d)]();if(_0x5f3024){const _0x26adeb=this[_0x4d9239(0x24c)](_0x4d9239(0xad6),_0x5f3024['id']);this[_0x4d9239(0x802)](_0x26adeb||0x0);}}}}},Window_ActorCommand[_0xabeb6b(0xc8)][_0xabeb6b(0x24c)]=function(_0x1fe2cb,_0x195833){const _0x3390a7=_0xabeb6b;return this[_0x3390a7(0xac2)][_0x3390a7(0x5c8)](_0x1c7541=>_0x1c7541[_0x3390a7(0xf0)]===_0x1fe2cb&&_0x1c7541[_0x3390a7(0x3b7)]===_0x195833);},VisuMZ[_0xabeb6b(0x553)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)],Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)]=function(_0x5bfd88){const _0x42d8e4=_0xabeb6b;VisuMZ[_0x42d8e4(0x553)]['Window_BattleStatus_initialize'][_0x42d8e4(0x378)](this,_0x5bfd88),this[_0x42d8e4(0x770)](),this[_0x42d8e4(0xa10)]();},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x3fb)]=function(){const _0x4f77cd=_0xabeb6b;if(this[_0x4f77cd(0x2b9)])return this[_0x4f77cd(0x2b9)];return this['_battleLayoutStyle']=SceneManager['_scene'][_0x4f77cd(0x3fb)](),this[_0x4f77cd(0x2b9)];},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x770)]=function(){const _0x166455=_0xabeb6b;this[_0x166455(0x39a)]=this[_0x166455(0x18d)]();const _0xd5538e=VisuMZ[_0x166455(0x553)][_0x166455(0x78f)][_0x166455(0x198)];_0xd5538e[_0x166455(0x76b)]&&(this[_0x166455(0x9ac)]=0x0);},Window_BattleStatus[_0xabeb6b(0xc8)]['isFrameVisible']=function(){const _0x168338=_0xabeb6b,_0x4fb19a=VisuMZ['BattleCore']['Settings'][_0x168338(0x198)];if(_0x4fb19a[_0x168338(0x8c9)])return!![];const _0x124eb2=this['battleLayoutStyle']();switch(_0x124eb2){case _0x168338(0x907):case _0x168338(0x2d0):return!![];break;case _0x168338(0xfd):case'xp':case _0x168338(0x62b):default:return![];break;}},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x74d)]=function(){const _0x4f34b6=_0xabeb6b;return this[_0x4f34b6(0x18d)]()?0x0:0xa;},Window_BattleStatus['prototype'][_0xabeb6b(0x181)]=function(){const _0x3f79ec=_0xabeb6b,_0x1e35d7=this['battleLayoutStyle']();switch(_0x1e35d7){case'list':return 0x1;break;case'xp':case _0x3f79ec(0x62b):return $gameParty[_0x3f79ec(0x786)]()[_0x3f79ec(0x93a)];break;case _0x3f79ec(0xfd):default:return $gameParty[_0x3f79ec(0x131)]();break;}},Window_BattleStatus['prototype'][_0xabeb6b(0x993)]=function(){const _0x4097ea=_0xabeb6b,_0xffc0dc=this[_0x4097ea(0x3fb)]();switch(_0xffc0dc){case _0x4097ea(0x907):return Window_StatusBase[_0x4097ea(0xc8)]['itemHeight']['call'](this);break;case _0x4097ea(0xfd):case'xp':case _0x4097ea(0x62b):default:return this['innerHeight'];break;}},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x8aa)]=function(){const _0x422964=_0xabeb6b,_0x4be106=this[_0x422964(0x3fb)]();switch(_0x4be106){case _0x422964(0x907):return Window_StatusBase[_0x422964(0xc8)]['rowSpacing']['call'](this);break;case _0x422964(0xfd):case'xp':case _0x422964(0x62b):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0xabeb6b(0xb0c)]=function(){const _0x2edb3e=_0xabeb6b;this['isFrameVisible']()?Window_StatusBase['prototype'][_0x2edb3e(0xb0c)][_0x2edb3e(0x378)](this):this['padding']=0x8;},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x8ee)]=function(){const _0x34174d=_0xabeb6b,_0x2fa2a1=VisuMZ['BattleCore'][_0x34174d(0x78f)][_0x34174d(0x198)];_0x2fa2a1[_0x34174d(0x8c9)]?this['windowskin']=ImageManager['loadSystem'](_0x2fa2a1['StatusWindowSkinFilename']):Window_StatusBase[_0x34174d(0xc8)][_0x34174d(0x8ee)][_0x34174d(0x378)](this);},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x4c5)]=function(_0x548e67){const _0x4fcf2a=_0xabeb6b,_0x11b73c=VisuMZ[_0x4fcf2a(0x553)][_0x4fcf2a(0x78f)][_0x4fcf2a(0x198)];if(_0x11b73c[_0x4fcf2a(0x693)])return;Window_StatusBase[_0x4fcf2a(0xc8)]['drawItemBackground'][_0x4fcf2a(0x378)](this,_0x548e67);},Window_BattleStatus[_0xabeb6b(0xc8)]['requestRefresh']=function(){const _0x1448aa=_0xabeb6b;this[_0x1448aa(0xb16)]=!![];},Window_BattleStatus[_0xabeb6b(0xc8)]['update']=function(){const _0x4e8a9e=_0xabeb6b;Window_StatusBase[_0x4e8a9e(0xc8)][_0x4e8a9e(0x5bc)][_0x4e8a9e(0x378)](this),this[_0x4e8a9e(0x80c)](),this['updateEffectContainers']();if(this[_0x4e8a9e(0x3fb)]()==='border')this[_0x4e8a9e(0x251)]();},Window_BattleStatus[_0xabeb6b(0xc8)]['updateRefresh']=function(){const _0x242369=_0xabeb6b;if($gameTemp[_0x242369(0x2e9)]())this[_0x242369(0x97a)](),this[_0x242369(0xb16)]=![],$gameTemp[_0x242369(0x59f)]();else this[_0x242369(0xb16)]&&(this[_0x242369(0xb16)]=![],this[_0x242369(0x9f5)](),this[_0x242369(0x14a)]());},Window_BattleStatus['prototype'][_0xabeb6b(0x6eb)]=function(){const _0x260da1=_0xabeb6b;Window_StatusBase['prototype']['show'][_0x260da1(0x378)](this);if(!$gameSystem[_0x260da1(0x4d5)]())this[_0x260da1(0x9f5)]();},Window_BattleStatus['prototype'][_0xabeb6b(0x855)]=function(){const _0x1fc3d6=_0xabeb6b;if(this[_0x1fc3d6(0x840)]===Window_BattleStatus)return;Window_StatusBase['prototype'][_0x1fc3d6(0x855)][_0x1fc3d6(0x378)](this);},Window_BattleStatus['prototype'][_0xabeb6b(0x924)]=function(_0x3486d3){const _0xfba709=_0xabeb6b,_0x3dca2c=this[_0xfba709(0x3fb)]();switch(_0x3dca2c){case'xp':case _0xfba709(0x62b):break;case'default':case _0xfba709(0x907):case _0xfba709(0x2d0):default:return Window_StatusBase[_0xfba709(0xc8)][_0xfba709(0x924)][_0xfba709(0x378)](this,_0x3486d3);break;}},VisuMZ['BattleCore'][_0xabeb6b(0x67c)]=Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x689)],Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x689)]=function(_0x4d2541){const _0x3b7d0c=_0xabeb6b,_0x3fc931=this[_0x3b7d0c(0x3fb)]();switch(_0x3fc931){case _0x3b7d0c(0x907):this['drawItemImageListStyle'](_0x4d2541);break;case'xp':this[_0x3b7d0c(0xaa0)](_0x4d2541);break;case _0x3b7d0c(0x62b):this[_0x3b7d0c(0x98d)](_0x4d2541);break;case _0x3b7d0c(0xfd):case _0x3b7d0c(0x2d0):default:VisuMZ[_0x3b7d0c(0x553)]['Window_BattleStatus_drawItemImage'][_0x3b7d0c(0x378)](this,_0x4d2541);break;}},Window_BattleStatus[_0xabeb6b(0xc8)]['drawItemStatus']=function(_0x44b5ce){const _0x433ca0=_0xabeb6b,_0x210242=this[_0x433ca0(0x3fb)]();if(!$gameSystem[_0x433ca0(0x4d5)]())this[_0x433ca0(0x8a9)](_0x44b5ce);switch(_0x210242){case _0x433ca0(0x907):this[_0x433ca0(0xa82)](_0x44b5ce);break;case'xp':case _0x433ca0(0x62b):case _0x433ca0(0xfd):case'border':default:this[_0x433ca0(0xaed)](_0x44b5ce);break;}},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x909)]=function(){const _0x258d08=_0xabeb6b,_0x39a19d=this[_0x258d08(0x3fb)]();if(['xp'][_0x258d08(0x5d8)](_0x39a19d)&&!$gameSystem[_0x258d08(0x4d5)]()){this[_0x258d08(0x74e)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x258d08(0xc8)]['refreshCursor']['call'](this);},Window_BattleStatus['prototype'][_0xabeb6b(0x8a9)]=function(_0x4212fb){const _0xb30d72=_0xabeb6b,_0x1f1be7=this['actor'](_0x4212fb)[_0xb30d72(0x7bb)]();if(!_0x1f1be7)return;const _0x1d688a=this['battleLayoutStyle'](),_0x4049bf=this[_0xb30d72(0x27c)](_0x4212fb);let _0x373599=Math[_0xb30d72(0xb36)](_0x4049bf['x']+_0x4049bf['width']/0x2)+this['padding'];[_0xb30d72(0x907)][_0xb30d72(0x5d8)](_0x1d688a)&&(_0x373599=_0x4049bf[_0xb30d72(0x461)]/$gameParty[_0xb30d72(0x786)]()['length'],_0x373599*=_0x4212fb,_0x373599+=_0x4049bf[_0xb30d72(0x461)]/$gameParty[_0xb30d72(0x786)]()[_0xb30d72(0x93a)]/0x2);let _0x339108=Math[_0xb30d72(0xb36)](this[_0xb30d72(0x9e7)](_0x4212fb,_0x1f1be7,_0x4049bf));_0x1f1be7['setHome'](_0x373599,_0x339108),this[_0xb30d72(0xa58)](_0x1f1be7,0x1),_0x1f1be7['show'](),this[_0xb30d72(0x942)](),this['updateAttachmentSprites']();},Window_BattleStatus[_0xabeb6b(0xc8)]['frontviewSpriteY']=function(_0x6de8b9,_0x517c65,_0x2e4992){const _0x4f0394=_0xabeb6b,_0x1b7a40=VisuMZ[_0x4f0394(0x553)][_0x4f0394(0x78f)][_0x4f0394(0x198)],_0x5f5441=this[_0x4f0394(0x3fb)]();if(_0x5f5441==='xp'){const _0x44af67=_0x1b7a40[_0x4f0394(0x514)];switch(_0x44af67['toLowerCase']()[_0x4f0394(0xd3)]()){case _0x4f0394(0x5fa):return _0x2e4992[_0x4f0394(0x1ee)]-_0x517c65['_shadowSprite'][_0x4f0394(0x1ee)]/0x4;break;case _0x4f0394(0x627):const _0x5e6e9d=_0x1b7a40[_0x4f0394(0x82f)];return(_0x2e4992[_0x4f0394(0x1ee)]+(_0x517c65[_0x4f0394(0x1ee)]||_0x5e6e9d))/0x2;break;case _0x4f0394(0x21b):return 0x0;case _0x4f0394(0x6e8):default:return this[_0x4f0394(0xbc3)](_0x2e4992);break;}}else{if(_0x5f5441==='portrait'){}}return _0x517c65['height'];},Sprite_Name[_0xabeb6b(0xc8)][_0xabeb6b(0x8cb)]=function(){return 0x24;},Sprite_Name[_0xabeb6b(0xc8)][_0xabeb6b(0xab8)]=function(){const _0x5ec9f0=_0xabeb6b,_0x520c0f=this[_0x5ec9f0(0x6e8)](),_0x31c873=this['bitmapWidth'](),_0x491fa=this[_0x5ec9f0(0x8cb)]();this['setupFont'](),this[_0x5ec9f0(0xac0)][_0x5ec9f0(0x500)](),this[_0x5ec9f0(0xac0)][_0x5ec9f0(0x672)](_0x520c0f,0x4,0x0,_0x31c873,_0x491fa,_0x5ec9f0(0x3fe));},Bitmap[_0xabeb6b(0xc8)]['drawTextTopAligned']=function(_0x3102ef,_0x4aa82c,_0x43da78,_0x688f5d,_0xeb476,_0x2d51d5){const _0x6ab1f8=_0xabeb6b;TextManager[_0x6ab1f8(0xbaa)]&&(_0x3102ef=TextManager[_0x6ab1f8(0xbaa)](_0x3102ef));const _0x377ca8=this['context'],_0x5c4456=_0x377ca8[_0x6ab1f8(0x531)];_0x688f5d=_0x688f5d||0xffffffff;let _0x6acdc9=_0x4aa82c,_0x288601=Math[_0x6ab1f8(0xb36)](_0x43da78+0x18/0x2+this[_0x6ab1f8(0x8dd)]*0.35);_0x2d51d5===_0x6ab1f8(0x627)&&(_0x6acdc9+=_0x688f5d/0x2),_0x2d51d5===_0x6ab1f8(0x20e)&&(_0x6acdc9+=_0x688f5d),_0x377ca8[_0x6ab1f8(0x8b1)](),_0x377ca8[_0x6ab1f8(0x48c)]=this[_0x6ab1f8(0x4f1)](),_0x377ca8['textAlign']=_0x2d51d5,_0x377ca8[_0x6ab1f8(0x3b0)]=_0x6ab1f8(0x414),_0x377ca8[_0x6ab1f8(0x531)]=0x1,this[_0x6ab1f8(0x13f)](_0x3102ef,_0x6acdc9,_0x288601,_0x688f5d),_0x377ca8['globalAlpha']=_0x5c4456,this[_0x6ab1f8(0x8fe)](_0x3102ef,_0x6acdc9,_0x288601,_0x688f5d),_0x377ca8[_0x6ab1f8(0x7a1)](),this[_0x6ab1f8(0x7ae)][_0x6ab1f8(0x5bc)]();},Window_BattleStatus['prototype'][_0xabeb6b(0xbc3)]=function(_0x172c21){const _0x5d087c=_0xabeb6b;return this['basicGaugesY'](_0x172c21)-this[_0x5d087c(0xa07)]();},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0xa48)]=function(_0x562502){const _0x36d7db=_0xabeb6b;if(!VisuMZ['BattleCore'][_0x36d7db(0x78f)]['BattleLayout']['ShowFacesListStyle'])return;const _0x109539=this['actor'](_0x562502),_0x5558a0=this[_0x36d7db(0x27c)](_0x562502);_0x5558a0[_0x36d7db(0x461)]=ImageManager[_0x36d7db(0x5cf)],_0x5558a0[_0x36d7db(0x1ee)]-=0x2,this[_0x36d7db(0x9b8)](_0x109539,_0x5558a0['x']+0x1,_0x5558a0['y']+0x1,_0x5558a0[_0x36d7db(0x461)],_0x5558a0[_0x36d7db(0x1ee)]);},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0xa82)]=function(_0x2017a0){const _0x35348e=_0xabeb6b,_0x552b18=VisuMZ['BattleCore'][_0x35348e(0x78f)]['BattleLayout'],_0x4d0778=$dataSystem[_0x35348e(0x819)]?0x4:0x3,_0x20f3de=_0x4d0778*0x80+(_0x4d0778-0x1)*0x8+0x4,_0x263127=this[_0x35348e(0x70a)](_0x2017a0),_0x38e03d=this[_0x35348e(0x27c)](_0x2017a0);let _0x370558=_0x38e03d['x']+this['padding'];_0x552b18[_0x35348e(0x488)]?_0x370558=_0x38e03d['x']+ImageManager['faceWidth']+0x8:_0x370558+=ImageManager['iconWidth'];const _0x374c04=Math[_0x35348e(0xb36)](Math[_0x35348e(0x1be)](_0x38e03d['x']+_0x38e03d[_0x35348e(0x461)]-_0x20f3de,_0x370558)),_0x54947a=Math[_0x35348e(0xb36)](_0x38e03d['y']+(_0x38e03d[_0x35348e(0x1ee)]-Sprite_Name['prototype']['bitmapHeight']())/0x2),_0x19148c=Math[_0x35348e(0xb36)](_0x374c04-ImageManager['iconWidth']/0x2-0x4),_0x5de556=Math['round'](_0x38e03d['y']+(_0x38e03d[_0x35348e(0x1ee)]-ImageManager[_0x35348e(0x2fe)])/0x2+ImageManager[_0x35348e(0x2fe)]/0x2);let _0x374123=_0x374c04+0x88;const _0x310359=_0x54947a;this['placeTimeGauge'](_0x263127,_0x374c04-0x4+(_0x552b18[_0x35348e(0x324)]||0x0),_0x54947a+(_0x552b18[_0x35348e(0x66a)]||0x0)),this['placeActorName'](_0x263127,_0x374c04+(_0x552b18['NameOffsetX']||0x0),_0x54947a+(_0x552b18['NameOffsetY']||0x0)),this[_0x35348e(0x16c)](_0x263127,_0x19148c+(_0x552b18[_0x35348e(0xa0a)]||0x0),_0x5de556+(_0x552b18[_0x35348e(0x3eb)]||0x0)),this[_0x35348e(0x452)](_0x263127,'hp',_0x374123+0x88*0x0+(_0x552b18[_0x35348e(0x900)]||0x0),_0x310359+(_0x552b18[_0x35348e(0x16a)]||0x0)),this[_0x35348e(0x452)](_0x263127,'mp',_0x374123+0x88*0x1+(_0x552b18[_0x35348e(0x781)]||0x0),_0x310359+(_0x552b18[_0x35348e(0x202)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x35348e(0x452)](_0x263127,'tp',_0x374123+0x88*0x2+(_0x552b18[_0x35348e(0xb9e)]||0x0),_0x310359+(_0x552b18[_0x35348e(0xa0e)]||0x0));},Window_BattleStatus['prototype']['drawItemImageXPStyle']=function(_0xd5082){const _0xfdc98e=_0xabeb6b;if(!$gameSystem[_0xfdc98e(0x4d5)]())return;VisuMZ[_0xfdc98e(0x553)][_0xfdc98e(0x67c)]['call'](this,_0xd5082);},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0xaed)]=function(_0x359f0d){const _0x3310d7=_0xabeb6b,_0x223c6e=VisuMZ['BattleCore'][_0x3310d7(0x78f)][_0x3310d7(0x198)],_0x3521df=this[_0x3310d7(0x70a)](_0x359f0d),_0x32cd45=this[_0x3310d7(0x27c)](_0x359f0d),_0x1150c9=Math[_0x3310d7(0xb36)](_0x32cd45['x']+(_0x32cd45[_0x3310d7(0x461)]-0x80)/0x2),_0x4fda79=this['nameY'](_0x32cd45);let _0xe15c84=_0x1150c9-ImageManager[_0x3310d7(0x12a)]/0x2-0x4,_0x5044e2=_0x4fda79+ImageManager[_0x3310d7(0x2fe)]/0x2;_0xe15c84-ImageManager[_0x3310d7(0x12a)]/0x2<_0x32cd45['x']&&(_0xe15c84=_0x1150c9+ImageManager[_0x3310d7(0x12a)]/0x2-0x4,_0x5044e2=_0x4fda79-ImageManager[_0x3310d7(0x2fe)]/0x2);const _0x3a98af=_0x1150c9,_0x3f4034=this[_0x3310d7(0x716)](_0x32cd45);this[_0x3310d7(0xb5a)](_0x3521df,_0x1150c9+(_0x223c6e[_0x3310d7(0x324)]||0x0),_0x4fda79+(_0x223c6e[_0x3310d7(0x66a)]||0x0)),this[_0x3310d7(0x5c0)](_0x3521df,_0x1150c9+(_0x223c6e['NameOffsetX']||0x0),_0x4fda79+(_0x223c6e[_0x3310d7(0xa0c)]||0x0)),this[_0x3310d7(0x16c)](_0x3521df,_0xe15c84+(_0x223c6e['StateIconOffsetX']||0x0),_0x5044e2+(_0x223c6e['StateIconOffsetY']||0x0)),this[_0x3310d7(0x452)](_0x3521df,'hp',_0x3a98af+(_0x223c6e[_0x3310d7(0x900)]||0x0),_0x3f4034+(_0x223c6e['HpGaugeOffsetY']||0x0)),this[_0x3310d7(0x452)](_0x3521df,'mp',_0x3a98af+(_0x223c6e[_0x3310d7(0x781)]||0x0),_0x3f4034+this[_0x3310d7(0xa07)]()+(_0x223c6e['MpGaugeOffsetY']||0x0)),$dataSystem['optDisplayTp']&&this[_0x3310d7(0x452)](_0x3521df,'tp',_0x3a98af+(_0x223c6e[_0x3310d7(0xb9e)]||0x0),_0x3f4034+this[_0x3310d7(0xa07)]()*0x2+(_0x223c6e[_0x3310d7(0xa0e)]||0x0));},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x809)]=function(_0x361d1b){const _0x1444e5=_0xabeb6b;if(!VisuMZ[_0x1444e5(0x553)][_0x1444e5(0x78f)][_0x1444e5(0x198)]['ShowPortraits'])return![];if(_0x361d1b[_0x1444e5(0x7a7)]())return!![];return Imported['VisuMZ_1_MainMenuCore']&&_0x361d1b['getMenuImage']();},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x8ed)]=function(){const _0x183822=_0xabeb6b;if(this['actor']()[_0x183822(0x6f8)][_0x183822(0xef)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x183822(0x6f8)][_0x183822(0xef)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0xabeb6b(0xc8)][_0xabeb6b(0x5ae)]=function(){const _0x1f9907=_0xabeb6b;if(this[_0x1f9907(0x70a)]()[_0x1f9907(0x6f8)][_0x1f9907(0xef)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x1f9907(0x70a)]()['note'][_0x1f9907(0xef)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus['prototype'][_0xabeb6b(0x98d)]=function(_0x38dbd8){const _0x13d5a2=_0xabeb6b,_0x2a36ab=this[_0x13d5a2(0x70a)](_0x38dbd8);if(this['showPortraits'](_0x2a36ab)){const _0x523604='actor%1-portrait'[_0x13d5a2(0x782)](_0x2a36ab[_0x13d5a2(0x19b)]()),_0x8f6294=this[_0x13d5a2(0x72e)](_0x523604,Sprite),_0x5f86a9=_0x2a36ab[_0x13d5a2(0xb5b)]();_0x5f86a9!==''?_0x8f6294[_0x13d5a2(0xac0)]=ImageManager['loadPicture'](_0x5f86a9):_0x8f6294[_0x13d5a2(0xac0)]=ImageManager['_emptyBitmap'];const _0x25ee2b=this[_0x13d5a2(0x27c)](_0x38dbd8);_0x8f6294['anchor']['x']=0.5,_0x8f6294[_0x13d5a2(0xb3e)]['y']=0x1;let _0x1057ad=Math[_0x13d5a2(0xb36)](_0x25ee2b['x']+_0x25ee2b[_0x13d5a2(0x461)]/0x2)+this[_0x13d5a2(0xa3c)];_0x1057ad+=_0x2a36ab[_0x13d5a2(0x8ed)]();let _0x5ae3ef=Math[_0x13d5a2(0xb36)](this[_0x13d5a2(0x1ee)]);_0x5ae3ef+=_0x2a36ab[_0x13d5a2(0x5ae)](),_0x8f6294[_0x13d5a2(0x430)](_0x1057ad,_0x5ae3ef);const _0xc0a497=VisuMZ[_0x13d5a2(0x553)][_0x13d5a2(0x78f)][_0x13d5a2(0x198)][_0x13d5a2(0x5be)];_0x8f6294[_0x13d5a2(0xb4d)]['x']=_0xc0a497,_0x8f6294[_0x13d5a2(0xb4d)]['y']=_0xc0a497,_0x8f6294[_0x13d5a2(0x6eb)]();}else{const _0x3ca5fd=this[_0x13d5a2(0xbac)](_0x38dbd8);this['drawActorFace'](_0x2a36ab,_0x3ca5fd['x'],_0x3ca5fd['y'],_0x3ca5fd[_0x13d5a2(0x461)],_0x3ca5fd[_0x13d5a2(0x1ee)]);}},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x72e)]=function(_0x541c05,_0x1b62f1){const _0x3be10e=_0xabeb6b,_0xe96e64=this[_0x3be10e(0x804)];if(_0xe96e64[_0x541c05])return _0xe96e64[_0x541c05];else{const _0x572ec3=new _0x1b62f1();return _0xe96e64[_0x541c05]=_0x572ec3,this[_0x3be10e(0x312)](_0x572ec3),this['addChildToBack'](this[_0x3be10e(0x6a7)]),_0x572ec3;}},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x5ee)]=function(){const _0x5853ca=_0xabeb6b;this[_0x5853ca(0x943)](),this['_createEffectsContainer'](),Window_StatusBase[_0x5853ca(0xc8)][_0x5853ca(0x5ee)][_0x5853ca(0x378)](this),this[_0x5853ca(0x768)]();},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x943)]=function(){const _0x425eea=_0xabeb6b;this[_0x425eea(0x6a7)]=new Sprite(),this[_0x425eea(0x6a7)]['filters']=[new PIXI['filters'][(_0x425eea(0x200))]()],this[_0x425eea(0x6a7)][_0x425eea(0x82c)]=new Rectangle(),this[_0x425eea(0x6a7)][_0x425eea(0x430)](this[_0x425eea(0x319)],this['_padding']),this['addChild'](this['_cursorArea']);},Window_BattleStatus['prototype'][_0xabeb6b(0x958)]=function(){const _0x18d9b7=_0xabeb6b;this[_0x18d9b7(0x618)]=new Sprite(),this[_0x18d9b7(0x8d3)](this[_0x18d9b7(0x618)]);},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x942)]=function(){const _0x32dd8a=_0xabeb6b;this[_0x32dd8a(0x618)]&&this[_0x32dd8a(0x8d3)](this['_effectsContainer']);},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x768)]=function(){const _0x3331e3=_0xabeb6b;this['_damageContainer']=new Sprite(),this[_0x3331e3(0x8d3)](this['_damageContainer']);},Window_BattleStatus[_0xabeb6b(0xc8)]['_createCursorSprite']=function(){const _0x28e88e=_0xabeb6b;this['_cursorSprite']=new Sprite();for(let _0x556fe2=0x0;_0x556fe2<0x9;_0x556fe2++){this[_0x28e88e(0x625)][_0x28e88e(0x8d3)](new Sprite());}this['_cursorArea'][_0x28e88e(0x8d3)](this['_cursorSprite']);},Window_BattleStatus['prototype'][_0xabeb6b(0xbd1)]=function(){const _0x5774ad=_0xabeb6b;Window_StatusBase['prototype'][_0x5774ad(0xbd1)][_0x5774ad(0x378)](this),this[_0x5774ad(0xa67)]();},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0xa67)]=function(){const _0x31e8a5=_0xabeb6b,_0x55ce2b=this[_0x31e8a5(0x319)];this[_0x31e8a5(0x6a7)][_0x31e8a5(0x430)](_0x55ce2b,_0x55ce2b),this[_0x31e8a5(0x6a7)]['x']=_0x55ce2b-this[_0x31e8a5(0x986)]['x'],this[_0x31e8a5(0x6a7)]['y']=_0x55ce2b-this[_0x31e8a5(0x986)]['y'],this[_0x31e8a5(0x62f)]>0x0&&this[_0x31e8a5(0x289)]>0x0?this['_cursorArea'][_0x31e8a5(0xbc2)]=this[_0x31e8a5(0x3fd)]():this[_0x31e8a5(0x6a7)][_0x31e8a5(0xbc2)]=![];},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x963)]=function(){const _0x3b6fbc=_0xabeb6b;Window_StatusBase[_0x3b6fbc(0xc8)][_0x3b6fbc(0x963)][_0x3b6fbc(0x378)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x9c6)]=function(){const _0x12cddb=_0xabeb6b,_0x524704=this[_0x12cddb(0x6a7)][_0x12cddb(0x816)][_0x12cddb(0x313)](new Point(0x0,0x0)),_0x4e1b07=this[_0x12cddb(0x6a7)][_0x12cddb(0x82c)];_0x4e1b07['x']=_0x524704['x']+this[_0x12cddb(0x986)]['x'],_0x4e1b07['y']=_0x524704['y']+this[_0x12cddb(0x986)]['y'],_0x4e1b07[_0x12cddb(0x461)]=this[_0x12cddb(0x62f)],_0x4e1b07[_0x12cddb(0x1ee)]=this['innerHeight'];},Window_BattleStatus[_0xabeb6b(0xc8)]['refreshActorPortrait']=function(_0xc97549){const _0x1a329f=_0xabeb6b;if(this[_0x1a329f(0x3fb)]()!==_0x1a329f(0x62b))return;this['drawItemImagePortraitStyle'](_0xc97549[_0x1a329f(0x513)]());},Window_BattleStatus['prototype'][_0xabeb6b(0x1ce)]=function(_0x4fafb4,_0x3617f1){const _0x1aba8f=_0xabeb6b;if(!this[_0x1aba8f(0x164)])return;if(!_0x4fafb4)return;if(!_0x3617f1)return;const _0x345e2e=this[_0x1aba8f(0x27c)](_0x3617f1[_0x1aba8f(0x513)]());_0x345e2e['x']+=_0x345e2e['width']/0x2+this[_0x1aba8f(0xa3c)],_0x4fafb4['x']=_0x345e2e['x'],_0x4fafb4['y']=_0x345e2e['y'],this[_0x1aba8f(0x164)][_0x1aba8f(0x8d3)](_0x4fafb4);},Window_BattleStatus['prototype']['removeDamageSprite']=function(_0x224980){const _0x45f091=_0xabeb6b;if(!this[_0x45f091(0x164)])return;if(!_0x224980)return;this[_0x45f091(0x164)][_0x45f091(0xe0)](_0x224980);},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x251)]=function(){const _0x5909a7=_0xabeb6b;if(!this[_0x5909a7(0x81f)]())return;if(!this[_0x5909a7(0x1ba)])this[_0x5909a7(0x87d)]();this[_0x5909a7(0x659)](),this[_0x5909a7(0x5a2)]();},Window_BattleStatus[_0xabeb6b(0xc8)]['isBorderStylePortraitShown']=function(){const _0x102866=_0xabeb6b;if(this[_0x102866(0x840)]!==Window_BattleStatus)return![];if(!SceneManager[_0x102866(0x87a)]())return![];return VisuMZ[_0x102866(0x553)][_0x102866(0x78f)]['BattleLayout'][_0x102866(0x31d)];},Window_BattleStatus['prototype'][_0xabeb6b(0x87d)]=function(){const _0x599fa9=_0xabeb6b;this[_0x599fa9(0x1ba)]=new Sprite();const _0x402b07=SceneManager[_0x599fa9(0x483)],_0x20d3ae=_0x402b07[_0x599fa9(0xbe)][_0x599fa9(0x996)](_0x402b07[_0x599fa9(0x93b)]);_0x402b07[_0x599fa9(0xa58)](this[_0x599fa9(0x1ba)],_0x20d3ae),this[_0x599fa9(0x1ba)][_0x599fa9(0xb3e)]['x']=0.5,this[_0x599fa9(0x1ba)][_0x599fa9(0xb3e)]['y']=0x1;const _0x522c44=VisuMZ['BattleCore'][_0x599fa9(0x78f)][_0x599fa9(0x198)]['PortraitScaleBorderStyle'];this[_0x599fa9(0x1ba)]['scale']['x']=_0x522c44,this['_borderPortraitSprite'][_0x599fa9(0xb4d)]['y']=_0x522c44,this[_0x599fa9(0x1ba)]['y']=this['y']+this[_0x599fa9(0x1ee)],this[_0x599fa9(0xae5)]=0x0;},Window_BattleStatus['prototype'][_0xabeb6b(0xa96)]=function(){const _0x55bea6=_0xabeb6b;return BattleManager[_0x55bea6(0x8bb)]();},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x659)]=function(){const _0x2c79de=_0xabeb6b;this['_borderPortraitSprite'][_0x2c79de(0xbc2)]=this[_0x2c79de(0xa96)]();const _0x3ff7a4=BattleManager[_0x2c79de(0x70a)](),_0x316088=_0x3ff7a4?_0x3ff7a4[_0x2c79de(0xb5b)]()||'':'';if(_0x3ff7a4===this[_0x2c79de(0x1ba)]['actor']&&_0x316088===this[_0x2c79de(0x1ba)][_0x2c79de(0x542)])return;this['_borderPortraitSprite'][_0x2c79de(0x70a)]=_0x3ff7a4||this['_borderPortraitSprite'][_0x2c79de(0x70a)],this[_0x2c79de(0x1ba)][_0x2c79de(0x542)]=_0x316088;if(!_0x3ff7a4)return;else{if(_0x316088===''){this[_0x2c79de(0x1ba)][_0x2c79de(0xac0)]=ImageManager[_0x2c79de(0x1d2)],this[_0x2c79de(0x1ba)][_0x2c79de(0x542)]='';return;}else{const _0x22f67c=ImageManager[_0x2c79de(0x383)](_0x316088);this[_0x2c79de(0x1ba)][_0x2c79de(0x9ac)]=0x0,_0x22f67c[_0x2c79de(0x642)](this[_0x2c79de(0xa97)]['bind'](this,_0x22f67c));}}},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0xa97)]=function(_0xf76614){const _0x5aa4ee=_0xabeb6b;this[_0x5aa4ee(0xae5)]=0x14,this['_borderPortraitSprite'][_0x5aa4ee(0xac0)]=_0xf76614;SceneManager[_0x5aa4ee(0x483)]['isRightInputMode']()?(this[_0x5aa4ee(0x1ba)]['x']=0x0,this['_borderPortraitTargetX']=Math[_0x5aa4ee(0x534)](_0xf76614[_0x5aa4ee(0x461)]/0x2)):(this[_0x5aa4ee(0x1ba)]['x']=this[_0x5aa4ee(0x461)],this[_0x5aa4ee(0xbbd)]=this[_0x5aa4ee(0x461)]*0x3/0x4);this['_borderPortraitSprite']['opacity']=0x0,this[_0x5aa4ee(0x1ba)]['y']=this['y']+this[_0x5aa4ee(0x1ee)];const _0x307e2f=BattleManager[_0x5aa4ee(0x70a)]();_0x307e2f&&(this[_0x5aa4ee(0xbbd)]+=_0x307e2f[_0x5aa4ee(0x8ed)](),this[_0x5aa4ee(0x1ba)]['y']+=_0x307e2f[_0x5aa4ee(0x5ae)]());},Window_BattleStatus['prototype'][_0xabeb6b(0x5a2)]=function(){const _0x335878=_0xabeb6b;if(this[_0x335878(0xae5)]>0x0){const _0x2e1684=this['_borderPortraitDuration'],_0xd52dd5=this['_borderPortraitSprite'];_0xd52dd5['x']=(_0xd52dd5['x']*(_0x2e1684-0x1)+this[_0x335878(0xbbd)])/_0x2e1684,_0xd52dd5[_0x335878(0x9ac)]=(_0xd52dd5[_0x335878(0x9ac)]*(_0x2e1684-0x1)+0xff)/_0x2e1684,this[_0x335878(0xae5)]--;}},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x5c3)]=function(){const _0x2858f8=_0xabeb6b;return;this['_effectsContainer']&&(this[_0x2858f8(0x618)]['x']=this['x'],this[_0x2858f8(0x618)]['y']=this['y']),this[_0x2858f8(0x164)]&&(this['_damageContainer']['x']=this['x'],this[_0x2858f8(0x164)]['y']=this['y']);},Window_BattleStatus['prototype'][_0xabeb6b(0xa10)]=function(){const _0x4fd226=_0xabeb6b,_0x309664=VisuMZ['BattleCore'][_0x4fd226(0x78f)][_0x4fd226(0x198)];if(_0x309664['StatusWindowAttachmentBack']){const _0x4bfb64=new Sprite();_0x4bfb64[_0x4fd226(0xac0)]=ImageManager[_0x4fd226(0x7a9)](_0x309664[_0x4fd226(0x2cd)]),_0x4bfb64['x']=_0x309664[_0x4fd226(0xa59)]||0x0,_0x4bfb64['y']=_0x309664['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x4fd226(0x312)](_0x4bfb64),this[_0x4fd226(0x41d)]=_0x4bfb64;}if(_0x309664[_0x4fd226(0x599)]){const _0x11904a=new Sprite();_0x11904a[_0x4fd226(0xac0)]=ImageManager[_0x4fd226(0x7a9)](_0x309664[_0x4fd226(0x599)]),_0x11904a['x']=_0x309664[_0x4fd226(0xa4b)]||0x0,_0x11904a['y']=_0x309664['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0x4fd226(0x8d3)](_0x11904a),this[_0x4fd226(0x12f)]=_0x11904a;}},Window_BattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x14a)]=function(){const _0x3eaca5=_0xabeb6b;this[_0x3eaca5(0x12f)]&&this['addChild'](this[_0x3eaca5(0x12f)]),this[_0x3eaca5(0x41d)]&&this[_0x3eaca5(0x312)](this['_backAttachmentSprite']);},Window_BattleActor[_0xabeb6b(0xc8)][_0xabeb6b(0x3e5)]=function(){const _0x47ab33=_0xabeb6b;return this[_0x47ab33(0x576)]();},Window_BattleActor['prototype'][_0xabeb6b(0x576)]=function(){const _0x3b1348=_0xabeb6b,_0x259484=BattleManager[_0x3b1348(0x960)]();if(!_0x259484)return!![];if(!_0x259484[_0x3b1348(0xb39)]())return!![];const _0x50a7ff=this['actor'](this['index']()),_0x23ffc9=_0x259484[_0x3b1348(0xb39)]()[_0x3b1348(0x6f8)];if(_0x259484[_0x3b1348(0x647)]()){if(_0x50a7ff===BattleManager[_0x3b1348(0x70a)]())return![];}if(_0x259484[_0x3b1348(0x27d)]()){if(!_0x50a7ff[_0x3b1348(0x69e)]())return![];}if(_0x259484[_0x3b1348(0x5b0)]()){if(!_0x50a7ff[_0x3b1348(0x946)]())return![];}return!![];},Window_BattleActor['prototype'][_0xabeb6b(0x9b6)]=function(_0xadc998){this['_enemyWindowMode']=_0xadc998;},VisuMZ['BattleCore'][_0xabeb6b(0x81b)]=Window_BattleActor[_0xabeb6b(0xc8)]['processTouch'],Window_BattleActor[_0xabeb6b(0xc8)][_0xabeb6b(0x370)]=function(){const _0x3140ca=_0xabeb6b;Window_BattleStatus[_0x3140ca(0xc8)][_0x3140ca(0x370)]['call'](this),this[_0x3140ca(0x938)]?this[_0x3140ca(0x7de)]():VisuMZ['BattleCore'][_0x3140ca(0x81b)][_0x3140ca(0x378)](this);},Window_BattleActor[_0xabeb6b(0xc8)]['processEnemyModeTouchBattleCore']=function(){const _0x93c8d=_0xabeb6b,_0x23bd6a=SceneManager[_0x93c8d(0x483)][_0x93c8d(0x389)];if(!_0x23bd6a)return;this[_0x93c8d(0x5df)]=![];const _0xe18632=this[_0x93c8d(0x237)]();if(_0xe18632>=0x0){this[_0x93c8d(0x802)](_0xe18632);if(TouchInput[_0x93c8d(0x479)]()){const _0x245830=$gameParty['members']()[_0xe18632],_0x535b33=_0x23bd6a[_0x93c8d(0x680)][_0x93c8d(0x996)](_0x245830);_0x535b33>=0x0&&(_0x23bd6a[_0x93c8d(0x802)](_0x535b33),_0x23bd6a[_0x93c8d(0x777)]());}}},Window_BattleActor['prototype'][_0xabeb6b(0x764)]=function(){const _0x5b342a=_0xabeb6b;this['_enemyWindowMode']&&(this[_0x5b342a(0xa16)]++,this[_0x5b342a(0xc3)]=!![]);const _0x5bca09=Window_BattleStatus[_0x5b342a(0xc8)][_0x5b342a(0x764)][_0x5b342a(0x378)](this);return this[_0x5b342a(0x938)]&&(this[_0x5b342a(0xc3)]=![]),_0x5bca09;},VisuMZ[_0xabeb6b(0x553)]['Window_BattleActor_show']=Window_BattleActor[_0xabeb6b(0xc8)][_0xabeb6b(0x6eb)],Window_BattleActor[_0xabeb6b(0xc8)][_0xabeb6b(0x6eb)]=function(){const _0x503175=_0xabeb6b;VisuMZ[_0x503175(0x553)][_0x503175(0x4b7)][_0x503175(0x378)](this);const _0x24d6a1=BattleManager[_0x503175(0x960)]();if(_0x24d6a1){const _0x460149=$gameParty[_0x503175(0x120)]();_0x24d6a1['canSingleOrMultipleSelect']()&&_0x460149[_0x503175(0x93a)]>0x1&&this[_0x503175(0x6c6)](_0x503175(0x744),this['selectAllActors'][_0x503175(0xa39)](this));}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xa76)]=Window_BattleActor[_0xabeb6b(0xc8)]['hide'],Window_BattleActor[_0xabeb6b(0xc8)][_0xabeb6b(0x855)]=function(){const _0x2958a7=_0xabeb6b;VisuMZ[_0x2958a7(0x553)][_0x2958a7(0xa76)]['call'](this),delete this['_handlers'][_0x2958a7(0x44f)],delete this[_0x2958a7(0x477)]['pagedown'];},Window_BattleActor['prototype'][_0xabeb6b(0x67d)]=function(){const _0x113724=_0xabeb6b,_0x2effe6=BattleManager[_0x113724(0x960)]();if(_0x2effe6)_0x2effe6[_0x113724(0xac7)](_0x113724(0x265));this[_0x113724(0x777)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x30d)]=Window_BattleEnemy['prototype'][_0xabeb6b(0x8ea)],Window_BattleEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)]=function(_0x1f0fad){const _0x4129a1=_0xabeb6b;this[_0x4129a1(0x323)]=null,VisuMZ[_0x4129a1(0x553)][_0x4129a1(0x30d)]['call'](this,_0x1f0fad);if(Imported[_0x4129a1(0x47c)]){if(VisuMZ[_0x4129a1(0x8c7)][_0x4129a1(0x729)]<1.12){let _0x2b76b1='';_0x2b76b1+='VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20',_0x2b76b1+=_0x4129a1(0x1ab),_0x2b76b1+=_0x4129a1(0x221),alert(_0x2b76b1),SceneManager[_0x4129a1(0x9d8)]();}}},Window_BattleEnemy['prototype'][_0xabeb6b(0x181)]=function(){return this['maxItems']();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x275)]=Window_BattleEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x6eb)],Window_BattleEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x6eb)]=function(){const _0x24470d=_0xabeb6b;VisuMZ[_0x24470d(0x553)]['Window_BattleEnemy_show'][_0x24470d(0x378)](this),this['y']=Graphics[_0x24470d(0x1ee)]*0xa,this[_0x24470d(0x9da)]()&&this[_0x24470d(0x622)]();},VisuMZ[_0xabeb6b(0x553)]['Window_BattleEnemy_hide']=Window_BattleEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x855)],Window_BattleEnemy['prototype'][_0xabeb6b(0x855)]=function(){const _0x5833dd=_0xabeb6b;VisuMZ[_0x5833dd(0x553)][_0x5833dd(0x5b6)][_0x5833dd(0x378)](this),$gameParty[_0x5833dd(0x802)](null),delete this[_0x5833dd(0x477)][_0x5833dd(0x44f)],delete this[_0x5833dd(0x477)][_0x5833dd(0x744)];},Window_BattleEnemy['prototype'][_0xabeb6b(0xa4e)]=function(){const _0x42d7e1=_0xabeb6b;let _0x1f92a2=$gameTroop[_0x42d7e1(0x120)]();const _0x323af1=BattleManager[_0x42d7e1(0x960)]();if(_0x323af1){_0x323af1[_0x42d7e1(0xa91)]()&&_0x1f92a2[_0x42d7e1(0x93a)]>0x1&&this[_0x42d7e1(0x6c6)](_0x42d7e1(0x44f),this[_0x42d7e1(0xb32)][_0x42d7e1(0xa39)](this));if(_0x323af1[_0x42d7e1(0x974)]()){const _0x283709=$gameParty['aliveMembers']();_0x1f92a2=_0x1f92a2['concat'](_0x283709),_0x323af1[_0x42d7e1(0xa91)]()&&_0x283709['length']>0x1&&this[_0x42d7e1(0x6c6)](_0x42d7e1(0x744),this[_0x42d7e1(0x67d)][_0x42d7e1(0xa39)](this));}}return _0x1f92a2;},Window_BattleEnemy[_0xabeb6b(0xc8)]['refresh']=function(){const _0x5f0e3e=_0xabeb6b;this[_0x5f0e3e(0x680)]=this[_0x5f0e3e(0xa4e)](),this['sortEnemies'](),Window_Selectable['prototype'][_0x5f0e3e(0x9f5)][_0x5f0e3e(0x378)](this);},Window_BattleEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x154)]=function(){const _0x103a18=_0xabeb6b;this[_0x103a18(0x680)][_0x103a18(0xae7)]((_0x8bb48b,_0x5d83e1)=>{const _0x537157=_0x103a18;if(_0x8bb48b['isActor']()!==_0x5d83e1[_0x537157(0xb6a)]()){if(_0x8bb48b[_0x537157(0x54b)]())return-0x1;if(_0x5d83e1['isEnemy']())return 0x1;}if(_0x8bb48b[_0x537157(0xb6a)]()&&_0x5d83e1[_0x537157(0xb6a)]())return _0x8bb48b[_0x537157(0x513)]()-_0x5d83e1[_0x537157(0x513)]();return _0x8bb48b[_0x537157(0x7bb)]()[_0x537157(0x945)]===_0x5d83e1[_0x537157(0x7bb)]()[_0x537157(0x945)]?_0x8bb48b[_0x537157(0x7bb)]()[_0x537157(0xb85)]-_0x5d83e1[_0x537157(0x7bb)]()[_0x537157(0xb85)]:_0x8bb48b[_0x537157(0x7bb)]()['_baseX']-_0x5d83e1[_0x537157(0x7bb)]()['_baseX'];}),SceneManager[_0x103a18(0x799)]()&&this['_enemies']['reverse']();},Window_BattleEnemy['prototype']['autoSelect']=function(){const _0x19f84e=_0xabeb6b,_0x4438e3=VisuMZ[_0x19f84e(0x553)]['Settings'][_0x19f84e(0xa08)];_0x4438e3[_0x19f84e(0x859)]?this[_0x19f84e(0x9a0)]():this[_0x19f84e(0x21a)]();},Window_BattleEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x9a0)]=function(){const _0x27f1ed=_0xabeb6b,_0x606962=BattleManager['inputtingAction']();if(_0x606962&&_0x606962[_0x27f1ed(0x974)]()){if(_0x606962[_0x27f1ed(0x3d2)]()){if(this['_lastActor']&&this[_0x27f1ed(0x680)][_0x27f1ed(0x5d8)](this['_lastActor'])){const _0x3922a2=this[_0x27f1ed(0x680)][_0x27f1ed(0x996)](this[_0x27f1ed(0xa5a)]);return this[_0x27f1ed(0x5b4)](_0x3922a2);}else return this['autoSelectPriority']();}}if(this[_0x27f1ed(0x323)]&&this[_0x27f1ed(0x680)]['includes'](this[_0x27f1ed(0x323)])){const _0x9e6ce7=this[_0x27f1ed(0x680)][_0x27f1ed(0x996)](this[_0x27f1ed(0x323)]);this[_0x27f1ed(0x5b4)](_0x9e6ce7);}else this['autoSelectPriority']();},Window_BattleEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x21a)]=function(){const _0x3a4393=_0xabeb6b,_0x1f2760=BattleManager[_0x3a4393(0x960)]();if(_0x1f2760&&_0x1f2760[_0x3a4393(0x974)]()){const _0x8fdf8e=$gameParty['aliveMembers']()[0x0];let _0xd1a6d8=this['_enemies'][_0x3a4393(0x996)](_0x8fdf8e);const _0x4f7402=_0x1f2760[_0x3a4393(0xb39)]()[_0x3a4393(0x172)];if(_0x4f7402[_0x3a4393(0xef)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x3a4393(0x5b4)](_0xd1a6d8);return;}else{if(_0x4f7402[_0x3a4393(0xef)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this['forceSelect'](_0xd1a6d8-0x1);return;}}}const _0x577b01=VisuMZ['BattleCore'][_0x3a4393(0x78f)][_0x3a4393(0xa08)];let _0x4fba2d=![];$gameSystem['isSideView']()?_0x4fba2d=_0x577b01[_0x3a4393(0xbaf)]:_0x4fba2d=_0x577b01[_0x3a4393(0x686)],this[_0x3a4393(0x5b4)](_0x4fba2d?this['maxItems']()-0x1:0x0);},Window_BattleEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x977)]=function(){const _0x3d6a8b=_0xabeb6b;Window_Selectable[_0x3d6a8b(0xc8)]['callOkHandler'][_0x3d6a8b(0x378)](this);if(!this[_0x3d6a8b(0x7d3)]())return;if(this[_0x3d6a8b(0x7d3)]()[_0x3d6a8b(0x54b)]())this[_0x3d6a8b(0x323)]=this[_0x3d6a8b(0x7d3)]();if(this['enemy']()[_0x3d6a8b(0xb6a)]())this['_lastActor']=this[_0x3d6a8b(0x7d3)]();},Window_BattleEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x802)]=function(_0xf53d7){const _0x154c69=_0xabeb6b;Window_Selectable[_0x154c69(0xc8)][_0x154c69(0x802)][_0x154c69(0x378)](this,_0xf53d7),$gameTroop[_0x154c69(0x802)](this[_0x154c69(0x7d3)]()),$gameParty[_0x154c69(0x802)](this[_0x154c69(0x7d3)]());if(!this[_0x154c69(0x7d3)]())return;if(this[_0x154c69(0x9da)]()){const _0x1af518=SceneManager[_0x154c69(0x483)][_0x154c69(0x3c6)];this[_0x154c69(0x7d3)]()['isActor']()?_0x1af518[_0x154c69(0x802)](this['enemy']()[_0x154c69(0x513)]()):_0x1af518[_0x154c69(0x928)]();}},Window_BattleEnemy[_0xabeb6b(0xc8)]['meetsSelectFrontviewActorConditions']=function(){const _0x803f04=_0xabeb6b;if(!this['visible'])return![];if($gameSystem[_0x803f04(0x4d5)]())return![];const _0x3ee879=SceneManager[_0x803f04(0x483)][_0x803f04(0x3fb)](),_0x5ec3c3=['default',_0x803f04(0x907),'xp',_0x803f04(0x62b),_0x803f04(0x2d0)];return _0x5ec3c3['includes'](_0x3ee879);},Window_BattleEnemy['prototype'][_0xabeb6b(0x622)]=function(){const _0x302374=_0xabeb6b,_0x34b681=SceneManager['_scene']['_actorWindow'];_0x34b681[_0x302374(0x6eb)](),_0x34b681[_0x302374(0x9b6)](!![]),_0x34b681['refresh'](),_0x34b681[_0x302374(0x928)]();const _0x17d870=SceneManager[_0x302374(0x483)]['battleLayoutStyle'](),_0x49eb02=['xp',_0x302374(0x62b),_0x302374(0x2d0)];if(_0x49eb02[_0x302374(0x5d8)](_0x17d870)){const _0x28fa99=SceneManager[_0x302374(0x483)][_0x302374(0x4ab)];_0x28fa99[_0x302374(0xb4d)]['y']=0x0;}},Window_BattleEnemy['prototype'][_0xabeb6b(0x926)]=function(){const _0x5ebf15=_0xabeb6b,_0x2824b9=SceneManager[_0x5ebf15(0x483)][_0x5ebf15(0x3c6)];_0x2824b9['hide'](),_0x2824b9[_0x5ebf15(0x9b6)](![]),_0x2824b9[_0x5ebf15(0x928)]();const _0x451480=SceneManager[_0x5ebf15(0x483)][_0x5ebf15(0x4ab)];_0x451480[_0x5ebf15(0xb4d)]['y']=0x1;},Window_BattleEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0xb32)]=function(){const _0x4762ef=_0xabeb6b,_0xc335c=BattleManager[_0x4762ef(0x960)]();if(_0xc335c)_0xc335c['setTargetBattlerKey']('all\x20enemies');this[_0x4762ef(0x777)]();},Window_BattleEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x67d)]=function(){const _0x45599b=_0xabeb6b,_0x10980c=BattleManager[_0x45599b(0x960)]();if(_0x10980c)_0x10980c[_0x45599b(0xac7)](_0x45599b(0x265));this[_0x45599b(0x777)]();},Window_BattleEnemy['prototype']['isCurrentItemEnabled']=function(){const _0x10d92f=_0xabeb6b;return this[_0x10d92f(0x576)]();},Window_BattleEnemy[_0xabeb6b(0xc8)][_0xabeb6b(0x576)]=function(){const _0xcd8245=_0xabeb6b,_0x3a8147=BattleManager[_0xcd8245(0x960)]();if(!_0x3a8147)return!![];if(!_0x3a8147[_0xcd8245(0xb39)]())return!![];const _0x3198b3=this['enemy'](),_0x2a2afc=_0x3a8147['item']()[_0xcd8245(0x6f8)];if(_0x3a8147['isForNotUser']()){if(_0x3198b3===BattleManager[_0xcd8245(0x70a)]())return![];}return!![];},Window_BattleItem[_0xabeb6b(0xc8)][_0xabeb6b(0x5d8)]=function(_0x5d6d32){const _0x43ef32=_0xabeb6b;if(!_0x5d6d32)return![];return _0x5d6d32['occasion']===0x0||_0x5d6d32[_0x43ef32(0x837)]===0x1;};function Window_AutoBattleCancel(){const _0x43e094=_0xabeb6b;this[_0x43e094(0x8ea)](...arguments);}Window_AutoBattleCancel['prototype']=Object[_0xabeb6b(0xa3b)](Window_Base[_0xabeb6b(0xc8)]),Window_AutoBattleCancel['prototype'][_0xabeb6b(0x840)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)]=function(_0x3c6747){const _0x54b4bb=_0xabeb6b;Window_Base[_0x54b4bb(0xc8)]['initialize'][_0x54b4bb(0x378)](this,_0x3c6747),this[_0x54b4bb(0x1a1)](this[_0x54b4bb(0x4c4)]()),this[_0x54b4bb(0x9f5)]();},Window_AutoBattleCancel[_0xabeb6b(0xc8)][_0xabeb6b(0x4c4)]=function(){const _0xd33f51=_0xabeb6b;return VisuMZ[_0xd33f51(0x553)][_0xd33f51(0x78f)][_0xd33f51(0xb92)][_0xd33f51(0x49d)];},Window_AutoBattleCancel['prototype']['refresh']=function(){const _0x52ccde=_0xabeb6b;this[_0x52ccde(0x7a0)][_0x52ccde(0x500)]();const _0x36f517=VisuMZ['BattleCore'][_0x52ccde(0x78f)]['AutoBattle'][_0x52ccde(0x110)],_0x24c259=_0x36f517[_0x52ccde(0x782)](this[_0x52ccde(0x68a)](),this['cancelButtonText']()),_0xad7df9=this[_0x52ccde(0x76d)](_0x24c259)[_0x52ccde(0x461)],_0x58d3fe=Math[_0x52ccde(0x108)]((this[_0x52ccde(0x62f)]-_0xad7df9)/0x2);this[_0x52ccde(0x674)](_0x24c259,_0x58d3fe,0x0,_0xad7df9);},Window_AutoBattleCancel['prototype'][_0xabeb6b(0x68a)]=function(){const _0x5a7329=_0xabeb6b;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x5a7329(0xa28)]('ok'):VisuMZ['BattleCore'][_0x5a7329(0x78f)][_0x5a7329(0xb92)][_0x5a7329(0x1b6)];},Window_AutoBattleCancel[_0xabeb6b(0xc8)]['cancelButtonText']=function(){const _0x4f1c82=_0xabeb6b;return Imported['VisuMZ_0_CoreEngine']?TextManager['getInputButtonString'](_0x4f1c82(0xbb5)):VisuMZ[_0x4f1c82(0x553)][_0x4f1c82(0x78f)][_0x4f1c82(0xb92)][_0x4f1c82(0x3c4)];},Window_AutoBattleCancel[_0xabeb6b(0xc8)][_0xabeb6b(0x5bc)]=function(){const _0x29b81f=_0xabeb6b;Window_Base[_0x29b81f(0xc8)][_0x29b81f(0x5bc)][_0x29b81f(0x378)](this),this[_0x29b81f(0x2d7)](),this[_0x29b81f(0xfc)]();},Window_AutoBattleCancel[_0xabeb6b(0xc8)][_0xabeb6b(0x2d7)]=function(){this['visible']=BattleManager['_autoBattle'];},Window_AutoBattleCancel[_0xabeb6b(0xc8)]['updateCancel']=function(){const _0x4f6544=_0xabeb6b;if(!BattleManager[_0x4f6544(0xf5)])return;(Input[_0x4f6544(0x6c7)]('ok')||Input['isTriggered']('cancel')||TouchInput[_0x4f6544(0x479)]()||TouchInput['isCancelled']())&&(SoundManager['playCancel'](),BattleManager[_0x4f6544(0xf5)]=![],Input[_0x4f6544(0x500)](),TouchInput[_0x4f6544(0x500)]());};function Window_EnemyName(){const _0x3205dd=_0xabeb6b;this[_0x3205dd(0x8ea)](...arguments);}Window_EnemyName['prototype']=Object[_0xabeb6b(0xa3b)](Window_StatusBase[_0xabeb6b(0xc8)]),Window_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x840)]=Window_EnemyName,Window_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)]=function(_0x37fa0e){const _0x22ef2f=_0xabeb6b;this[_0x22ef2f(0x2dd)]=_0x37fa0e,this[_0x22ef2f(0xb8c)]='';const _0x3c745e=new Rectangle(0x0,0x0,Graphics[_0x22ef2f(0x143)],this[_0x22ef2f(0x80d)]()*0x4);Window_StatusBase[_0x22ef2f(0xc8)]['initialize'][_0x22ef2f(0x378)](this,_0x3c745e),this[_0x22ef2f(0x1a1)](0x2),this[_0x22ef2f(0xba4)]=0x0;},Window_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0xb0c)]=function(){const _0xbf002b=_0xabeb6b;this[_0xbf002b(0xa3c)]=0x0;},Window_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x7d3)]=function(){const _0x4f94b4=_0xabeb6b;return $gameTroop[_0x4f94b4(0x85a)]()[this[_0x4f94b4(0x2dd)]];},Window_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x5bc)]=function(){const _0x84d359=_0xabeb6b;Window_StatusBase[_0x84d359(0xc8)]['update']['call'](this),this[_0x84d359(0x7d3)]()&&this[_0x84d359(0x7d3)]()[_0x84d359(0x6e8)]()!==this[_0x84d359(0xb8c)]&&(this[_0x84d359(0xb8c)]=this[_0x84d359(0x7d3)]()[_0x84d359(0x6e8)](),this[_0x84d359(0x9f5)]()),this[_0x84d359(0x7fd)](),this[_0x84d359(0x8df)]();},Window_EnemyName[_0xabeb6b(0xc8)]['updateOpacity']=function(){const _0x41cfaf=_0xabeb6b;if(!this[_0x41cfaf(0x7d3)]()){if(this[_0x41cfaf(0xba4)]>0x0)this['contentsOpacity']-=0x10;}else{if(this[_0x41cfaf(0x7d3)]()['isDead']()){if(this[_0x41cfaf(0xba4)]>0x0)this['contentsOpacity']-=0x10;}else{if(SceneManager[_0x41cfaf(0x483)][_0x41cfaf(0x389)]&&SceneManager['_scene']['_enemyWindow'][_0x41cfaf(0xc3)]&&SceneManager['_scene'][_0x41cfaf(0x389)]['_enemies'][_0x41cfaf(0x5d8)](this[_0x41cfaf(0x7d3)]())){if(this[_0x41cfaf(0xba4)]<0xff)this['contentsOpacity']+=0x10;}else this[_0x41cfaf(0xba4)]>0x0&&(this[_0x41cfaf(0xba4)]-=0x10);}}},Window_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x8df)]=function(){const _0x442b5=_0xabeb6b;if(!this[_0x442b5(0x7d3)]())return;SceneManager[_0x442b5(0x799)]()?this['x']=Graphics[_0x442b5(0x143)]-this[_0x442b5(0x7d3)]()[_0x442b5(0x7bb)]()[_0x442b5(0x945)]:this['x']=this[_0x442b5(0x7d3)]()[_0x442b5(0x7bb)]()[_0x442b5(0x945)];this['x']-=Math['round'](this['width']/0x2),this['y']=this[_0x442b5(0x7d3)]()['battler']()[_0x442b5(0xb85)]-Math['round'](this['lineHeight']()*1.5);const _0x48daa1=VisuMZ[_0x442b5(0x553)][_0x442b5(0x78f)]['Enemy'];this['x']+=_0x48daa1['NameOffsetX']||0x0,this['y']+=_0x48daa1['NameOffsetY']||0x0;},Window_EnemyName['prototype']['resetFontSettings']=function(){const _0x4734aa=_0xabeb6b;Window_Base[_0x4734aa(0xc8)]['resetFontSettings']['call'](this),this['contents'][_0x4734aa(0x8dd)]=VisuMZ['BattleCore'][_0x4734aa(0x78f)][_0x4734aa(0xa08)][_0x4734aa(0x654)];},Window_EnemyName['prototype'][_0xabeb6b(0x9f5)]=function(){const _0x4a1f30=_0xabeb6b;Window_StatusBase['prototype'][_0x4a1f30(0x9f5)]['call'](this),this[_0x4a1f30(0x7a0)]['clear']();if(!this[_0x4a1f30(0x7d3)]())return;this[_0x4a1f30(0x7b8)]();},Window_EnemyName[_0xabeb6b(0xc8)][_0xabeb6b(0x7b8)]=function(){const _0x2afba8=_0xabeb6b;this[_0x2afba8(0xb8c)]=this['enemy']()['name']();const _0x396e27=this[_0x2afba8(0x76d)](this[_0x2afba8(0xb8c)])[_0x2afba8(0x461)],_0x5f09f1=Math['round']((this[_0x2afba8(0x62f)]-_0x396e27)/0x2);this[_0x2afba8(0x674)](this['_text'],_0x5f09f1,0x0,_0x396e27+0x8);},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x15b)]=function(){const _0x4e3f29=_0xabeb6b;return VisuMZ['BattleCore']['Settings']['BattleLog'][_0x4e3f29(0x31f)];},Window_BattleLog['prototype'][_0xabeb6b(0x8d8)]=function(){const _0x10ad6c=_0xabeb6b;return VisuMZ[_0x10ad6c(0x553)][_0x10ad6c(0x78f)][_0x10ad6c(0xabe)]['MessageWait'];},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0xace)]=function(){const _0x3020fb=_0xabeb6b;return VisuMZ['BattleCore'][_0x3020fb(0x78f)][_0x3020fb(0xabe)][_0x3020fb(0x92a)];},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x49b)]=function(){return![];},Window_BattleLog['prototype'][_0xabeb6b(0xac6)]=function(_0x46e572,_0x4e10dc){const _0x3d98f7=_0xabeb6b;this[_0x3d98f7(0xa1c)]('actionSplicePoint'),BattleManager['invokeAction'](_0x46e572,_0x4e10dc),this[_0x3d98f7(0x8e7)]();},Window_BattleLog[_0xabeb6b(0xc8)]['emulateActionEffect']=function(_0x17ef2b,_0x536e62,_0x81d4ef){const _0x153135=_0xabeb6b;this['unshift'](_0x153135(0x8a7)),BattleManager[_0x153135(0x1c5)](_0x17ef2b,_0x536e62,_0x81d4ef),this[_0x153135(0x8e7)]();},Window_BattleLog[_0xabeb6b(0xc8)]['actionSplicePoint']=function(){const _0x442260=_0xabeb6b;this[_0x442260(0x8e7)]();},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x5cb)]=function(_0x371c67){const _0x4cbc95=_0xabeb6b,_0x11fb02=Array[_0x4cbc95(0xc8)][_0x4cbc95(0x4e7)][_0x4cbc95(0x378)](arguments,0x1),_0x3a6b21={'name':_0x371c67,'params':_0x11fb02},_0x1703f4=this[_0x4cbc95(0x44c)][_0x4cbc95(0x614)](_0x1d0a7c=>_0x1d0a7c[_0x4cbc95(0x6e8)])[_0x4cbc95(0x996)](_0x4cbc95(0x8a7));_0x1703f4>=0x0?this[_0x4cbc95(0x44c)][_0x4cbc95(0x656)](_0x1703f4,0x0,_0x3a6b21):this[_0x4cbc95(0x44c)][_0x4cbc95(0x5cb)](_0x3a6b21);},Window_BattleLog['prototype'][_0xabeb6b(0xa1c)]=function(_0x372964){const _0x25a1ee=_0xabeb6b,_0x5c3cab=Array[_0x25a1ee(0xc8)][_0x25a1ee(0x4e7)][_0x25a1ee(0x378)](arguments,0x1);this['_methods'][_0x25a1ee(0xa1c)]({'name':_0x372964,'params':_0x5c3cab});},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0xc2)]=function(){const _0x2248ed=_0xabeb6b;if(!$gameTemp[_0x2248ed(0x920)]())return;console[_0x2248ed(0x339)](this[_0x2248ed(0x44c)][_0x2248ed(0x614)](_0x4d622d=>_0x4d622d[_0x2248ed(0x6e8)])['join']('\x0a'));},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xcb)]=Window_BattleLog['prototype'][_0xabeb6b(0x9f5)],Window_BattleLog['prototype'][_0xabeb6b(0x9f5)]=function(){const _0x2a1565=_0xabeb6b;this[_0x2a1565(0xb16)]=!![];},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x992)]=Window_BattleLog[_0xabeb6b(0xc8)]['update'],Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x5bc)]=function(){const _0x5db214=_0xabeb6b;VisuMZ[_0x5db214(0x553)]['Window_BattleLog_update']['call'](this);if(this['_requestRefresh'])this[_0x5db214(0xb15)]();},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0xb15)]=function(){const _0x91d8f5=_0xabeb6b;this['_requestRefresh']=![],VisuMZ[_0x91d8f5(0x553)]['Window_BattleLog_refresh'][_0x91d8f5(0x378)](this);},Window_BattleLog[_0xabeb6b(0xc8)]['drawLineText']=function(_0x4886e1){const _0x47d0cb=_0xabeb6b;let _0x31122b=VisuMZ[_0x47d0cb(0x553)][_0x47d0cb(0x78f)][_0x47d0cb(0xabe)]['TextAlign'][_0x47d0cb(0xa5b)]()[_0x47d0cb(0xd3)](),_0x194210=this['_lines'][_0x4886e1];if(_0x194210['match'](/<LEFT>/i))_0x31122b='left';else{if(_0x194210[_0x47d0cb(0xef)](/<CENTER>/i))_0x31122b=_0x47d0cb(0x627);else _0x194210[_0x47d0cb(0xef)](/<RIGHT>/i)&&(_0x31122b=_0x47d0cb(0x20e));}_0x194210=_0x194210[_0x47d0cb(0x5ec)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x194210=_0x194210['replace'](/\\I\[0\]/gi,'');const _0x5a537b=this[_0x47d0cb(0x4e1)](_0x4886e1);this[_0x47d0cb(0x7a0)]['clearRect'](_0x5a537b['x'],_0x5a537b['y'],_0x5a537b[_0x47d0cb(0x461)],_0x5a537b[_0x47d0cb(0x1ee)]);const _0x5b8947=this[_0x47d0cb(0x76d)](_0x194210)[_0x47d0cb(0x461)];let _0x1c481e=_0x5a537b['x'];if(_0x31122b===_0x47d0cb(0x627))_0x1c481e+=(_0x5a537b[_0x47d0cb(0x461)]-_0x5b8947)/0x2;else _0x31122b===_0x47d0cb(0x20e)&&(_0x1c481e+=_0x5a537b[_0x47d0cb(0x461)]-_0x5b8947);this[_0x47d0cb(0x674)](_0x194210,_0x1c481e,_0x5a537b['y'],_0x5b8947+0x8);},Window_BattleLog['prototype'][_0xabeb6b(0x8dc)]=function(_0x34e6c5){const _0x3266f3=_0xabeb6b;this[_0x3266f3(0xa6c)][_0x3266f3(0x5cb)](_0x34e6c5),this['refresh'](),this['callNextMethod']();},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x800)]=function(){const _0xa8d87f=_0xabeb6b;let _0x289237=![];switch(this[_0xa8d87f(0x117)]){case _0xa8d87f(0x7c8):_0x289237=this[_0xa8d87f(0x754)][_0xa8d87f(0xaa8)]();break;case _0xa8d87f(0xb76):_0x289237=this['_spriteset'][_0xa8d87f(0x79e)]();break;case _0xa8d87f(0x828):_0x289237=this[_0xa8d87f(0x754)][_0xa8d87f(0x7e2)]();break;case'float':_0x289237=this['_spriteset'][_0xa8d87f(0x6f3)]();break;case _0xa8d87f(0x575):_0x289237=this[_0xa8d87f(0x754)][_0xa8d87f(0x38e)]();break;case'opacity':_0x289237=this['_spriteset'][_0xa8d87f(0x853)]();break;}return!_0x289237&&(this['_waitMode']=''),_0x289237;},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x380)]=function(){const _0x32e49a=_0xabeb6b;this[_0x32e49a(0xa1d)](_0x32e49a(0x828));},Window_BattleLog[_0xabeb6b(0xc8)]['waitForFloat']=function(){this['setWaitMode']('float');},Window_BattleLog['prototype'][_0xabeb6b(0x26e)]=function(){const _0x359cd0=_0xabeb6b;this[_0x359cd0(0xa1d)](_0x359cd0(0x575));},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x104)]=function(){const _0x4e5bb8=_0xabeb6b;this[_0x4e5bb8(0xa1d)](_0x4e5bb8(0x9ac));},Window_BattleLog['prototype'][_0xabeb6b(0x1db)]=function(){const _0x2269cf=_0xabeb6b,_0x3051a6=VisuMZ['BattleCore'][_0x2269cf(0x78f)][_0x2269cf(0xabe)];if(!_0x3051a6['StartTurnShow'])return;this[_0x2269cf(0x5cb)](_0x2269cf(0x8dc),_0x3051a6[_0x2269cf(0x4dd)][_0x2269cf(0x782)]($gameTroop[_0x2269cf(0xb37)]())),this[_0x2269cf(0x5cb)](_0x2269cf(0x2c4),_0x3051a6[_0x2269cf(0x5f0)]),this['push']('clear');};var $subject,$action,$targets;Window_BattleLog['prototype'][_0xabeb6b(0x54f)]=function(_0x371ddd,_0x2607cb,_0x5557a9){const _0x164a1e=_0xabeb6b;$subject=_0x371ddd,$action=_0x2607cb,$targets=_0x5557a9,this['isCustomActionSequence'](_0x2607cb)?BattleManager[_0x164a1e(0x7ac)]():this[_0x164a1e(0x135)](_0x371ddd,_0x2607cb,_0x5557a9);},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x66d)]=function(_0x162bcb){const _0x3cea19=_0xabeb6b;if(!SceneManager[_0x3cea19(0x87a)]())return![];if(!_0x162bcb)return![];if(!_0x162bcb['item']())return![];if(_0x162bcb[_0x3cea19(0xb39)]()['note'][_0x3cea19(0xef)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x3cea19(0x824)](_0x162bcb[_0x3cea19(0xb39)]()))return!![];return![];},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x135)]=function(_0x569a52,_0xe202ab,_0x429e88){const _0x20509c=_0xabeb6b;this[_0x20509c(0x617)](_0x569a52,_0xe202ab,_0x429e88),this[_0x20509c(0xa6f)](_0x569a52,_0xe202ab,_0x429e88),this[_0x20509c(0x9f6)](_0x569a52,_0xe202ab,_0x429e88);},Window_BattleLog['prototype']['displayAction']=function(_0x4b9609,_0x478095){const _0x284b68=_0xabeb6b,_0x3846b9=VisuMZ[_0x284b68(0x553)][_0x284b68(0x78f)][_0x284b68(0xabe)];_0x3846b9['ActionCenteredName']&&this[_0x284b68(0x5cb)](_0x284b68(0x8dc),_0x284b68(0x1ea)[_0x284b68(0x782)](DataManager[_0x284b68(0x1dd)](_0x478095)));if(DataManager['isSkill'](_0x478095)){if(_0x3846b9[_0x284b68(0x5b9)])this[_0x284b68(0x210)](_0x478095[_0x284b68(0x748)],_0x4b9609,_0x478095);if(_0x3846b9['ActionSkillMsg2'])this[_0x284b68(0x210)](_0x478095[_0x284b68(0x5ab)],_0x4b9609,_0x478095);}else{if(_0x3846b9['ActionItemMsg'])this['displayItemMessage'](TextManager[_0x284b68(0x805)],_0x4b9609,_0x478095);}},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x617)]=function(_0x26afda,_0x1c264c,_0x3831c2){const _0x39e2d2=_0xabeb6b,_0x8728ee=_0x1c264c[_0x39e2d2(0xb39)]();this[_0x39e2d2(0x25e)](_0x26afda,_0x8728ee),this[_0x39e2d2(0x5cb)]('applyImmortal',_0x26afda,_0x3831c2,!![]),this[_0x39e2d2(0x5cb)]('performActionStart',_0x26afda,_0x1c264c),this[_0x39e2d2(0x5cb)]('waitForMovement'),this[_0x39e2d2(0x5cb)](_0x39e2d2(0x8e6),_0x26afda,_0x1c264c),this[_0x39e2d2(0x5cb)](_0x39e2d2(0x380));},Window_BattleLog['prototype'][_0xabeb6b(0xa6f)]=function(_0x3de37a,_0x197073,_0x3c602c){const _0x5a2066=_0xabeb6b;if(this[_0x5a2066(0xa93)](_0x197073))this['autoMeleeSingleTargetActionSet'](_0x3de37a,_0x197073,_0x3c602c);else{if(this[_0x5a2066(0x29b)](_0x197073))this[_0x5a2066(0x1e4)](_0x3de37a,_0x197073,_0x3c602c);else _0x197073[_0x5a2066(0x8f7)]()?this['targetActionSet'](_0x3de37a,_0x197073,_0x3c602c):this[_0x5a2066(0x2da)](_0x3de37a,_0x197073,_0x3c602c);}},Window_BattleLog[_0xabeb6b(0xc8)]['addMeleeReturnActionSet']=function(_0x546acc,_0x23a0df,_0x109690,_0x5491f1){const _0x36c0c3=_0xabeb6b;if(_0x23a0df){const _0x1537a8=_0x546acc['battler']();this['push'](_0x36c0c3(0x129),[_0x546acc],_0x109690,_0x5491f1),this[_0x36c0c3(0x5cb)](_0x36c0c3(0xadd),_0x546acc,_0x1537a8[_0x36c0c3(0x615)],_0x1537a8[_0x36c0c3(0x3a2)],_0x5491f1,![],'Linear'),this[_0x36c0c3(0x5cb)](_0x36c0c3(0x67a),[_0x546acc],_0x36c0c3(0xa02)),this[_0x36c0c3(0x5cb)](_0x36c0c3(0x19d)),this[_0x36c0c3(0x5cb)](_0x36c0c3(0x67a),[_0x546acc],_0x36c0c3(0xae3));}},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0xa93)]=function(_0x5a9d54){const _0x4fa591=_0xabeb6b;if(!_0x5a9d54[_0x4fa591(0x2fd)]())return![];if(!_0x5a9d54[_0x4fa591(0x2ba)]())return![];if(!_0x5a9d54[_0x4fa591(0x719)]())return![];return VisuMZ[_0x4fa591(0x553)][_0x4fa591(0x78f)][_0x4fa591(0xc4)][_0x4fa591(0x524)];},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x626)]=function(_0x2881b4,_0xcca360,_0x3bff86){const _0x5d1914=_0xabeb6b,_0x1c1727=_0x2881b4['getAttackMotion']()[_0x5d1914(0x2f9)]<0x2,_0x59e534=0x14,_0x4ee77e=0x30;let _0x4a0ed5=!![];_0x3bff86[_0x5d1914(0x93a)]>0x0&&_0x2881b4[_0x5d1914(0xb6a)]()===_0x3bff86[0x0][_0x5d1914(0xb6a)]()&&(_0x4a0ed5=![]);_0x1c1727&&_0x4a0ed5&&(this['push'](_0x5d1914(0x129),[_0x2881b4],_0x4ee77e,_0x59e534),this['push'](_0x5d1914(0x2de),_0x2881b4,_0x3bff86,_0x5d1914(0x6fa),_0x59e534,!![],'Linear',!![]),this[_0x5d1914(0x5cb)](_0x5d1914(0x67a),[_0x2881b4],'walk'),this['push'](_0x5d1914(0x19d)));let _0x49602c=_0xcca360['isAttack']()?this[_0x5d1914(0x6f1)](_0x2881b4):0x1;for(let _0x5b9329=0x0;_0x5b9329<_0x49602c;_0x5b9329++){_0xcca360[_0x5d1914(0x76c)]()&&_0x2881b4[_0x5d1914(0xb6a)]()&&this['push'](_0x5d1914(0x4dc),_0x2881b4,_0x5b9329),_0xcca360[_0x5d1914(0xb39)]()['animationId']<0x0?this[_0x5d1914(0x939)](_0x2881b4,_0xcca360,_0x3bff86):this['wholeActionSet'](_0x2881b4,_0xcca360,_0x3bff86);}_0xcca360[_0x5d1914(0x76c)]()&&_0x2881b4[_0x5d1914(0xb6a)]()&&this[_0x5d1914(0x5cb)]('clearActiveWeaponSet',_0x2881b4),this[_0x5d1914(0x5cb)](_0x5d1914(0x68e),_0x2881b4,_0x3bff86,![]),this[_0x5d1914(0x239)](_0x2881b4,_0x1c1727,_0x4ee77e,_0x59e534);},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x29b)]=function(_0x3485d2){const _0x411a30=_0xabeb6b;if(!_0x3485d2[_0x411a30(0x2fd)]())return![];if(!_0x3485d2[_0x411a30(0x4af)]())return![];if(!_0x3485d2[_0x411a30(0x719)]())return![];return VisuMZ['BattleCore'][_0x411a30(0x78f)][_0x411a30(0xc4)][_0x411a30(0x79f)];},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x1e4)]=function(_0x531429,_0x2b05f0,_0x488b85){const _0x4f8f33=_0xabeb6b,_0x13e063=_0x531429['getAttackMotion']()[_0x4f8f33(0x2f9)]<0x2,_0x2249e7=0x14,_0x2b09fb=0x30;if(_0x13e063){this[_0x4f8f33(0x5cb)](_0x4f8f33(0x129),[_0x531429],_0x2b09fb,_0x2249e7);const _0x2b1d53=_0x488b85['length']>0x1?'front\x20center':_0x4f8f33(0x6fa);this[_0x4f8f33(0x5cb)](_0x4f8f33(0x2de),_0x531429,_0x488b85,_0x2b1d53,_0x2249e7,!![],_0x4f8f33(0x899),!![]),this[_0x4f8f33(0x5cb)](_0x4f8f33(0x67a),[_0x531429],_0x4f8f33(0xae3)),this[_0x4f8f33(0x5cb)](_0x4f8f33(0x19d));}let _0x2b51d7=_0x2b05f0[_0x4f8f33(0x76c)]()?this[_0x4f8f33(0x6f1)](_0x531429):0x1;for(let _0x25f122=0x0;_0x25f122<_0x2b51d7;_0x25f122++){_0x2b05f0['isAttack']()&&_0x531429[_0x4f8f33(0xb6a)]()&&this[_0x4f8f33(0x5cb)]('setActiveWeaponSet',_0x531429,_0x25f122),this[_0x4f8f33(0x2da)](_0x531429,_0x2b05f0,_0x488b85);}_0x2b05f0[_0x4f8f33(0x76c)]()&&_0x531429[_0x4f8f33(0xb6a)]()&&this[_0x4f8f33(0x5cb)](_0x4f8f33(0x7ca),_0x531429),this[_0x4f8f33(0x5cb)](_0x4f8f33(0x68e),_0x531429,_0x488b85,![]),this['addMeleeReturnActionSet'](_0x531429,_0x13e063,_0x2b09fb,_0x2249e7);},Window_BattleLog['prototype']['targetActionSet']=function(_0x5a792d,_0x2622bb,_0x348ada){const _0x5a0452=_0xabeb6b,_0x146c3f=_0x2622bb[_0x5a0452(0xb39)]();for(const _0x4449fc of _0x348ada){if(!_0x4449fc)continue;this[_0x5a0452(0x5cb)](_0x5a0452(0x402),_0x5a792d,_0x2622bb),this['push']('waitCount',Sprite_Battler[_0x5a0452(0x723)]),this[_0x5a0452(0x5cb)](_0x5a0452(0x8f6),_0x5a792d,[_0x4449fc],_0x146c3f['animationId']),this[_0x5a0452(0x5cb)]('waitCount',0x18),this[_0x5a0452(0x5cb)](_0x5a0452(0xac6),_0x5a792d,_0x4449fc);}},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x2da)]=function(_0x4ce773,_0x4e0ff6,_0x3f243f){const _0x1e776b=_0xabeb6b,_0x2abf73=_0x4e0ff6[_0x1e776b(0xb39)]();let _0x4c564b=_0x4e0ff6['isAttack']()?0x1+_0x4ce773[_0x1e776b(0x5b2)]():0x1;while(_0x4c564b--){this['push'](_0x1e776b(0x402),_0x4ce773,_0x4e0ff6),this['push'](_0x1e776b(0x2c4),Sprite_Battler[_0x1e776b(0x723)]),this[_0x1e776b(0x5cb)]('showAnimation',_0x4ce773,_0x3f243f[_0x1e776b(0x934)](),_0x2abf73[_0x1e776b(0x43e)]),this[_0x1e776b(0x5cb)](_0x1e776b(0x380));}for(const _0x29a7a5 of _0x3f243f){if(!_0x29a7a5)continue;this[_0x1e776b(0x5cb)](_0x1e776b(0xac6),_0x4ce773,_0x29a7a5);}},Window_BattleLog['prototype'][_0xabeb6b(0x9f6)]=function(_0xa9ec7c,_0x248569,_0x28201a){const _0x24ee30=_0xabeb6b,_0x87bf25=_0x248569[_0x24ee30(0xb39)]();this['push']('applyImmortal',_0xa9ec7c,_0x28201a,![]),this[_0x24ee30(0x5cb)](_0x24ee30(0x2bb)),this[_0x24ee30(0x5cb)](_0x24ee30(0x328)),this[_0x24ee30(0x5cb)]('clear'),this['push']('performActionEnd',_0xa9ec7c),this[_0x24ee30(0x5cb)](_0x24ee30(0x19d));},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x235)]=function(_0x414eca){$subject=null,$action=null,$targets=[];},VisuMZ[_0xabeb6b(0x553)]['Window_BattleLog_displayCurrentState']=Window_BattleLog['prototype'][_0xabeb6b(0x5ac)],Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x5ac)]=function(_0x539c7b){const _0x3bda0a=_0xabeb6b;if(!VisuMZ['BattleCore'][_0x3bda0a(0x78f)][_0x3bda0a(0xabe)][_0x3bda0a(0xa8e)])return;VisuMZ['BattleCore']['Window_BattleLog_displayCurrentState'][_0x3bda0a(0x378)](this,_0x539c7b);},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x3dd)]=function(_0x9e87a9){const _0x1da2b6=_0xabeb6b;this[_0x1da2b6(0x5cb)](_0x1da2b6(0x42f),_0x9e87a9);VisuMZ[_0x1da2b6(0x553)][_0x1da2b6(0x78f)][_0x1da2b6(0xc4)]['CounterPlayback']&&this[_0x1da2b6(0x5cb)](_0x1da2b6(0x8f6),_0x9e87a9,[BattleManager[_0x1da2b6(0x4ee)]],-0x1);if(!VisuMZ[_0x1da2b6(0x553)]['Settings'][_0x1da2b6(0xabe)]['ShowCounter'])return;this[_0x1da2b6(0x5cb)](_0x1da2b6(0x8dc),TextManager[_0x1da2b6(0x6bf)][_0x1da2b6(0x782)](_0x9e87a9[_0x1da2b6(0x6e8)]()));const _0x499d8e=VisuMZ['BattleCore'][_0x1da2b6(0x78f)][_0x1da2b6(0xabe)][_0x1da2b6(0x33a)]??0x0;if(_0x499d8e>0x0)this[_0x1da2b6(0x5cb)](_0x1da2b6(0x2c4),_0x499d8e);;},Window_BattleLog[_0xabeb6b(0xc8)]['displayReflection']=function(_0x31fd13){const _0x1a1730=_0xabeb6b;this[_0x1a1730(0x5cb)](_0x1a1730(0x7e6),_0x31fd13);if(!VisuMZ['BattleCore'][_0x1a1730(0x78f)][_0x1a1730(0xabe)]['ShowReflect'])return;this[_0x1a1730(0x5cb)](_0x1a1730(0x8dc),TextManager[_0x1a1730(0xa74)][_0x1a1730(0x782)](_0x31fd13[_0x1a1730(0x6e8)]()));const _0x2d1f58=VisuMZ[_0x1a1730(0x553)][_0x1a1730(0x78f)][_0x1a1730(0xabe)][_0x1a1730(0x785)]??0x0;if(_0x2d1f58>0x0)this[_0x1a1730(0x5cb)](_0x1a1730(0x2c4),_0x2d1f58);;},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x450)]=function(_0x3ddd47,_0x53dece){const _0x4abb9d=_0xabeb6b;if(VisuMZ[_0x4abb9d(0x553)][_0x4abb9d(0x78f)][_0x4abb9d(0xc4)][_0x4abb9d(0x106)]){const _0x46b3cf=_0x53dece['item']();this['push'](_0x4abb9d(0x8f6),_0x3ddd47,[_0x3ddd47],_0x46b3cf[_0x4abb9d(0x43e)]);}},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x852)]=function(_0x46713b,_0x50ae94){const _0x249f1b=_0xabeb6b;this[_0x249f1b(0x5cb)](_0x249f1b(0x6b5),_0x46713b,_0x50ae94);if(!VisuMZ['BattleCore'][_0x249f1b(0x78f)]['BattleLog'][_0x249f1b(0x3fc)])return;const _0x44dcce=_0x46713b[_0x249f1b(0x6e8)](),_0x450d9d=TextManager[_0x249f1b(0x397)][_0x249f1b(0x782)](_0x44dcce,_0x50ae94[_0x249f1b(0x6e8)]());this['push'](_0x249f1b(0x8dc),_0x450d9d);const _0x202ac6=VisuMZ[_0x249f1b(0x553)][_0x249f1b(0x78f)][_0x249f1b(0xabe)]['ShowSubstituteWait']??0x0;if(_0x202ac6>0x0)this[_0x249f1b(0x5cb)](_0x249f1b(0x2c4),_0x202ac6);;},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x8b4)]=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0xabd)],Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0xabd)]=function(_0xdc3420,_0x2091ee){const _0x144d18=_0xabeb6b;VisuMZ['BattleCore'][_0x144d18(0x8b4)][_0x144d18(0x378)](this,_0xdc3420,_0x2091ee);},VisuMZ['BattleCore']['Window_BattleLog_displayFailure']=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x5bf)],Window_BattleLog['prototype'][_0xabeb6b(0x5bf)]=function(_0x1fd516){const _0x3e2f15=_0xabeb6b;if(!VisuMZ[_0x3e2f15(0x553)][_0x3e2f15(0x78f)][_0x3e2f15(0xabe)]['ShowFailure'])return;VisuMZ['BattleCore'][_0x3e2f15(0x191)][_0x3e2f15(0x378)](this,_0x1fd516);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x4a2)]=Window_BattleLog['prototype']['displayCritical'],Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x199)]=function(_0x2f47e8){const _0x5319a6=_0xabeb6b;if(!VisuMZ[_0x5319a6(0x553)][_0x5319a6(0x78f)][_0x5319a6(0xabe)]['ShowCritical'])return;VisuMZ[_0x5319a6(0x553)][_0x5319a6(0x4a2)]['call'](this,_0x2f47e8);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xcd)]=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x244)],Window_BattleLog[_0xabeb6b(0xc8)]['displayMiss']=function(_0x1035a8){const _0x131fcd=_0xabeb6b;!VisuMZ[_0x131fcd(0x553)][_0x131fcd(0x78f)][_0x131fcd(0xabe)][_0x131fcd(0x363)]?this['push']('performMiss',_0x1035a8):VisuMZ[_0x131fcd(0x553)][_0x131fcd(0xcd)][_0x131fcd(0x378)](this,_0x1035a8);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x98c)]=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x891)],Window_BattleLog[_0xabeb6b(0xc8)]['displayEvasion']=function(_0xabc99a){const _0x4ef06f=_0xabeb6b;!VisuMZ['BattleCore']['Settings'][_0x4ef06f(0xabe)][_0x4ef06f(0x363)]?_0xabc99a['result']()[_0x4ef06f(0x24f)]?this[_0x4ef06f(0x5cb)](_0x4ef06f(0x658),_0xabc99a):this[_0x4ef06f(0x5cb)](_0x4ef06f(0x1f0),_0xabc99a):VisuMZ['BattleCore']['Window_BattleLog_displayEvasion']['call'](this,_0xabc99a);},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x67b)]=function(_0x25cb97){const _0xf11371=_0xabeb6b;_0x25cb97[_0xf11371(0x96a)]()[_0xf11371(0xbba)]&&(_0x25cb97[_0xf11371(0x5af)]=0x0,_0x25cb97['result']()[_0xf11371(0x88b)]>0x0&&!_0x25cb97[_0xf11371(0x96a)]()['drain']&&(_0x25cb97[_0xf11371(0x5af)]=_0x25cb97[_0xf11371(0x96a)]()[_0xf11371(0x88b)],this[_0xf11371(0x5cb)](_0xf11371(0x1a5),_0x25cb97)),_0x25cb97[_0xf11371(0x96a)]()['hpDamage']<0x0&&this[_0xf11371(0x5cb)](_0xf11371(0x3f1),_0x25cb97),VisuMZ[_0xf11371(0x553)]['Settings'][_0xf11371(0xabe)][_0xf11371(0x279)]&&this[_0xf11371(0x5cb)](_0xf11371(0x8dc),this[_0xf11371(0x857)](_0x25cb97)));},VisuMZ[_0xabeb6b(0x553)]['Window_BattleLog_displayMpDamage']=Window_BattleLog['prototype'][_0xabeb6b(0x714)],Window_BattleLog[_0xabeb6b(0xc8)]['displayMpDamage']=function(_0x2a61ce){const _0x4e4f0e=_0xabeb6b;if(!VisuMZ['BattleCore'][_0x4e4f0e(0x78f)][_0x4e4f0e(0xabe)][_0x4e4f0e(0x89a)])return;VisuMZ['BattleCore'][_0x4e4f0e(0x784)][_0x4e4f0e(0x378)](this,_0x2a61ce);},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x58e)]=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x2b1)],Window_BattleLog[_0xabeb6b(0xc8)]['displayTpDamage']=function(_0x25c690){const _0x2bec00=_0xabeb6b;if(!VisuMZ[_0x2bec00(0x553)][_0x2bec00(0x78f)][_0x2bec00(0xabe)][_0x2bec00(0x5b1)])return;VisuMZ[_0x2bec00(0x553)][_0x2bec00(0x58e)][_0x2bec00(0x378)](this,_0x25c690);},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x193)]=function(_0x5d5c51){const _0x3a9d73=_0xabeb6b;_0x5d5c51['result']()['isStatusAffected']()&&(this[_0x3a9d73(0x5cb)](_0x3a9d73(0x404)),this[_0x3a9d73(0xbb)](_0x5d5c51),this[_0x3a9d73(0x1e0)](_0x5d5c51),this[_0x3a9d73(0x5cb)](_0x3a9d73(0x2bb)));},Window_BattleLog['prototype']['displayAddedStates']=function(_0x1b3e2c){const _0x3e3b63=_0xabeb6b,_0x34a534=_0x1b3e2c[_0x3e3b63(0x96a)](),_0x22089a=_0x34a534[_0x3e3b63(0x6b8)]();for(const _0x43875c of _0x22089a){const _0x8f80ed=_0x1b3e2c['isActor']()?_0x43875c['message1']:_0x43875c[_0x3e3b63(0x5ab)];_0x8f80ed&&VisuMZ['BattleCore']['Settings'][_0x3e3b63(0xabe)][_0x3e3b63(0x242)]&&(this['push']('fnordAddedStates'),this[_0x3e3b63(0x5cb)](_0x3e3b63(0x9ba)),this['push'](_0x3e3b63(0x404)),this[_0x3e3b63(0x5cb)](_0x3e3b63(0x8dc),_0x8f80ed[_0x3e3b63(0x782)](_0x1b3e2c[_0x3e3b63(0x6e8)]())),this[_0x3e3b63(0x5cb)]('wait')),_0x43875c['id']===_0x1b3e2c['deathStateId']()&&this[_0x3e3b63(0x5cb)](_0x3e3b63(0xbad),_0x1b3e2c);}},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0xbb8)]=function(){},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x878)]=function(_0x359bb8){const _0x4ea00c=_0xabeb6b;if(!VisuMZ[_0x4ea00c(0x553)][_0x4ea00c(0x78f)]['BattleLog'][_0x4ea00c(0x9c4)])return;const _0x11d44e=_0x359bb8[_0x4ea00c(0x96a)](),_0x33162f=_0x11d44e['removedStateObjects']();for(const _0x4d3395 of _0x33162f){_0x4d3395['message4']&&(this['push'](_0x4ea00c(0x675)),this['push'](_0x4ea00c(0x9ba)),this[_0x4ea00c(0x5cb)](_0x4ea00c(0x404)),this[_0x4ea00c(0x5cb)](_0x4ea00c(0x8dc),_0x4d3395[_0x4ea00c(0x9d0)]['format'](_0x359bb8['name']())),this[_0x4ea00c(0x5cb)](_0x4ea00c(0x269)));}},Window_BattleLog['prototype'][_0xabeb6b(0x675)]=function(){},Window_BattleLog['prototype'][_0xabeb6b(0x1e0)]=function(_0x59182a){const _0x4b029f=_0xabeb6b,_0x31640c=VisuMZ[_0x4b029f(0x553)][_0x4b029f(0x78f)][_0x4b029f(0xabe)],_0x44f208=_0x59182a[_0x4b029f(0x96a)]();if(_0x31640c[_0x4b029f(0x6f7)])this[_0x4b029f(0xa2a)](_0x59182a,_0x44f208[_0x4b029f(0x9e3)],TextManager['buffAdd']);if(_0x31640c[_0x4b029f(0x146)])this[_0x4b029f(0xa2a)](_0x59182a,_0x44f208[_0x4b029f(0x832)],TextManager[_0x4b029f(0x603)]);if(_0x31640c[_0x4b029f(0x1ff)])this[_0x4b029f(0xa2a)](_0x59182a,_0x44f208[_0x4b029f(0xbd)],TextManager[_0x4b029f(0x9e5)]);},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0xa2a)]=function(_0x4a6cf2,_0x2ca4bf,_0x1fb8e8){const _0x1087dc=_0xabeb6b;for(const _0x1b8674 of _0x2ca4bf){const _0x50cf41=_0x1fb8e8[_0x1087dc(0x782)](_0x4a6cf2[_0x1087dc(0x6e8)](),TextManager['param'](_0x1b8674));this[_0x1087dc(0x5cb)](_0x1087dc(0x9ba)),this[_0x1087dc(0x5cb)]('pushBaseLine'),this[_0x1087dc(0x5cb)](_0x1087dc(0x8dc),_0x50cf41),this['push'](_0x1087dc(0x269));}},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xa31)]=Window_BattleLog['prototype'][_0xabeb6b(0x500)],Window_BattleLog[_0xabeb6b(0xc8)]['clear']=function(){const _0x429225=_0xabeb6b;VisuMZ[_0x429225(0x553)][_0x429225(0xa31)][_0x429225(0x378)](this),this[_0x429225(0x8e7)]();},VisuMZ['BattleCore'][_0xabeb6b(0xcc)]=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x404)],Window_BattleLog[_0xabeb6b(0xc8)]['pushBaseLine']=function(){const _0x5e4c0b=_0xabeb6b;VisuMZ[_0x5e4c0b(0x553)][_0x5e4c0b(0xcc)][_0x5e4c0b(0x378)](this),this[_0x5e4c0b(0x8e7)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x20c)]=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x9ba)],Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x9ba)]=function(){const _0x3cff0c=_0xabeb6b;VisuMZ['BattleCore'][_0x3cff0c(0x20c)]['call'](this),this[_0x3cff0c(0xb15)](),this[_0x3cff0c(0x8e7)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x5fd)]=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x421)],Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x421)]=function(_0x509002){const _0x3885c2=_0xabeb6b;VisuMZ[_0x3885c2(0x553)][_0x3885c2(0x5fd)][_0x3885c2(0x378)](this,_0x509002),this[_0x3885c2(0x8e7)]();},Window_BattleLog['prototype'][_0xabeb6b(0x2bb)]=function(){const _0x4e986c=_0xabeb6b;let _0xb7834b=0x0;this['_baseLineStack'][_0x4e986c(0x93a)]>0x0&&(_0xb7834b=this[_0x4e986c(0x761)][this[_0x4e986c(0x761)]['length']-0x1]),this[_0x4e986c(0xa6c)][_0x4e986c(0x93a)]>_0xb7834b?this[_0x4e986c(0x269)]():this[_0x4e986c(0x8e7)]();},VisuMZ[_0xabeb6b(0x553)]['Window_BattleLog_performActionStart']=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0xa23)],Window_BattleLog['prototype'][_0xabeb6b(0xa23)]=function(_0x15e8dc,_0x55c621){const _0x438991=_0xabeb6b;VisuMZ[_0x438991(0x553)][_0x438991(0x1c1)][_0x438991(0x378)](this,_0x15e8dc,_0x55c621),this[_0x438991(0x8e7)]();},VisuMZ['BattleCore']['Window_BattleLog_performAction']=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x402)],Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x402)]=function(_0x170639,_0x4de7e0){const _0x36ff4a=_0xabeb6b;VisuMZ['BattleCore'][_0x36ff4a(0x918)]['call'](this,_0x170639,_0x4de7e0),this[_0x36ff4a(0x8e7)]();},VisuMZ[_0xabeb6b(0x553)]['Window_BattleLog_performActionEnd']=Window_BattleLog[_0xabeb6b(0xc8)]['performActionEnd'],Window_BattleLog['prototype'][_0xabeb6b(0x957)]=function(_0x2f005d){const _0x343e07=_0xabeb6b;VisuMZ[_0x343e07(0x553)][_0x343e07(0x728)]['call'](this,_0x2f005d);for(const _0x1f8be5 of BattleManager[_0x343e07(0xb9a)]()){if(!_0x1f8be5)continue;if(_0x1f8be5[_0x343e07(0x69e)]())continue;_0x1f8be5[_0x343e07(0x476)]();}this[_0x343e07(0x8e7)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x629)]=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x1a5)],Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x1a5)]=function(_0x4cbd2b){const _0x1bb5f6=_0xabeb6b;VisuMZ[_0x1bb5f6(0x553)][_0x1bb5f6(0x629)][_0x1bb5f6(0x378)](this,_0x4cbd2b),this[_0x1bb5f6(0x8e7)]();},VisuMZ[_0xabeb6b(0x553)]['Window_BattleLog_performMiss']=Window_BattleLog[_0xabeb6b(0xc8)]['performMiss'],Window_BattleLog['prototype'][_0xabeb6b(0x7f4)]=function(_0x50d3de){const _0x23cad1=_0xabeb6b;VisuMZ[_0x23cad1(0x553)][_0x23cad1(0x937)][_0x23cad1(0x378)](this,_0x50d3de),this[_0x23cad1(0x8e7)]();},VisuMZ['BattleCore'][_0xabeb6b(0xb0b)]=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x3f1)],Window_BattleLog['prototype'][_0xabeb6b(0x3f1)]=function(_0x299acf){const _0x57e82a=_0xabeb6b;VisuMZ['BattleCore']['Window_BattleLog_performRecovery'][_0x57e82a(0x378)](this,_0x299acf),this[_0x57e82a(0x8e7)]();},VisuMZ[_0xabeb6b(0x553)]['Window_BattleLog_performEvasion']=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x658)],Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x658)]=function(_0x5a4130){const _0xcd5d01=_0xabeb6b;VisuMZ[_0xcd5d01(0x553)][_0xcd5d01(0x5b3)]['call'](this,_0x5a4130),this[_0xcd5d01(0x8e7)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x7f9)]=Window_BattleLog[_0xabeb6b(0xc8)]['performMagicEvasion'],Window_BattleLog['prototype'][_0xabeb6b(0x1f0)]=function(_0x25135f){const _0x5920e0=_0xabeb6b;VisuMZ[_0x5920e0(0x553)][_0x5920e0(0x7f9)][_0x5920e0(0x378)](this,_0x25135f),this[_0x5920e0(0x8e7)]();},VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0xba3)]=Window_BattleLog[_0xabeb6b(0xc8)]['performCounter'],Window_BattleLog['prototype'][_0xabeb6b(0x42f)]=function(_0x21d669){const _0x27f699=_0xabeb6b;VisuMZ[_0x27f699(0x553)][_0x27f699(0xba3)]['call'](this,_0x21d669),this['callNextMethod']();},VisuMZ['BattleCore'][_0xabeb6b(0x56e)]=Window_BattleLog['prototype'][_0xabeb6b(0x7e6)],Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x7e6)]=function(_0x2aced2){const _0x43c4e7=_0xabeb6b;VisuMZ[_0x43c4e7(0x553)][_0x43c4e7(0x56e)]['call'](this,_0x2aced2),this[_0x43c4e7(0x8e7)]();},VisuMZ['BattleCore'][_0xabeb6b(0x6ce)]=Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x6b5)],Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x6b5)]=function(_0x5e2685,_0x10988b){const _0x253328=_0xabeb6b;VisuMZ[_0x253328(0x553)][_0x253328(0x6ce)][_0x253328(0x378)](this,_0x5e2685,_0x10988b),this['callNextMethod']();},VisuMZ['BattleCore'][_0xabeb6b(0x75e)]=Window_BattleLog['prototype'][_0xabeb6b(0xbad)],Window_BattleLog[_0xabeb6b(0xc8)]['performCollapse']=function(_0x5df95d){const _0x5d343a=_0xabeb6b;VisuMZ[_0x5d343a(0x553)][_0x5d343a(0x75e)][_0x5d343a(0x378)](this,_0x5df95d),this[_0x5d343a(0x8e7)]();},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x8e6)]=function(_0x7657be,_0x397026){const _0x48ceff=_0xabeb6b;_0x7657be[_0x48ceff(0x8e6)](_0x397026),this[_0x48ceff(0x8e7)]();},Window_BattleLog['prototype'][_0xabeb6b(0xd9)]=function(_0x543aa7,_0x456a0a){const _0x32c93b=_0xabeb6b,_0x11f3f3=_0x543aa7[_0x32c93b(0xbc9)]();_0x11f3f3<=0x0?SoundManager[_0x32c93b(0xb86)]():this[_0x32c93b(0x8a8)](_0x456a0a,_0x11f3f3);},Window_BattleLog['prototype'][_0xabeb6b(0x68e)]=function(_0x1b10c8,_0x533e1e,_0xa6c703){const _0x5c6061=_0xabeb6b,_0x49ac94=[_0x1b10c8][_0x5c6061(0x5e0)](_0x533e1e);for(const _0x5eee7a of _0x49ac94){if(!_0x5eee7a)continue;_0x5eee7a[_0x5c6061(0x4e6)](_0xa6c703);}this['callNextMethod']();},Window_BattleLog['prototype'][_0xabeb6b(0x2c4)]=function(_0x26daef){const _0x3b3d2f=_0xabeb6b;this[_0x3b3d2f(0x6d8)]=_0x26daef;},Window_BattleLog[_0xabeb6b(0xc8)]['requestMotion']=function(_0x59506a,_0x46571b){const _0x3472d2=_0xabeb6b;for(const _0x737adb of _0x59506a){if(!_0x737adb)continue;_0x737adb[_0x3472d2(0x67a)](_0x46571b);}this[_0x3472d2(0x8e7)]();},Window_BattleLog['prototype']['performMoveToPoint']=function(_0x551fe4,_0x32af03,_0x53afed,_0x2087c8,_0x28f14a,_0x59f9d0){const _0x478e6c=_0xabeb6b;_0x551fe4[_0x478e6c(0x79b)](_0x32af03,_0x53afed,_0x2087c8,_0x28f14a,_0x59f9d0,-0x1),this['callNextMethod']();},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x2de)]=function(_0x486782,_0x44fa0a,_0x3ea94a,_0x11e852,_0x4e85a9,_0xe0204,_0x43b91f){const _0xa1674f=_0xabeb6b,_0x57bbc9=Math['min'](..._0x44fa0a['map'](_0x513e27=>_0x513e27[_0xa1674f(0x7bb)]()[_0xa1674f(0x945)]-_0x513e27[_0xa1674f(0x7bb)]()[_0xa1674f(0x3c9)]()/0x2)),_0x10430c=Math[_0xa1674f(0xb72)](..._0x44fa0a['map'](_0x18332f=>_0x18332f[_0xa1674f(0x7bb)]()[_0xa1674f(0x945)]+_0x18332f[_0xa1674f(0x7bb)]()['mainSpriteWidth']()/0x2)),_0x8f9dc6=Math[_0xa1674f(0x1be)](..._0x44fa0a[_0xa1674f(0x614)](_0x3e4c54=>_0x3e4c54[_0xa1674f(0x7bb)]()[_0xa1674f(0xb85)]-_0x3e4c54[_0xa1674f(0x7bb)]()[_0xa1674f(0x530)]())),_0x42815f=Math[_0xa1674f(0xb72)](..._0x44fa0a[_0xa1674f(0x614)](_0x35f524=>_0x35f524[_0xa1674f(0x7bb)]()[_0xa1674f(0xb85)])),_0x8dd959=_0x44fa0a[_0xa1674f(0x959)](_0x5bbc33=>_0x5bbc33[_0xa1674f(0xb6a)]())[_0xa1674f(0x93a)],_0x55c7a2=_0x44fa0a['filter'](_0x569ac0=>_0x569ac0[_0xa1674f(0x54b)]())[_0xa1674f(0x93a)];let _0x1b3d68=0x0,_0x239bd1=0x0;if(_0x3ea94a['match'](/front/i))_0x1b3d68=_0x8dd959>=_0x55c7a2?_0x57bbc9:_0x10430c;else{if(_0x3ea94a[_0xa1674f(0xef)](/middle/i))_0x1b3d68=(_0x57bbc9+_0x10430c)/0x2,_0x43b91f=-0x1;else _0x3ea94a[_0xa1674f(0xef)](/back/i)&&(_0x1b3d68=_0x8dd959>=_0x55c7a2?_0x10430c:_0x57bbc9);}if(_0x3ea94a['match'](/head/i))_0x239bd1=_0x8f9dc6;else{if(_0x3ea94a[_0xa1674f(0xef)](/center/i)){_0x239bd1=(_0x8f9dc6+_0x42815f)/0x2;if(_0x486782[_0xa1674f(0x7bb)]())_0x239bd1+=_0x486782[_0xa1674f(0x7bb)]()[_0xa1674f(0x1ee)]/0x2;}else _0x3ea94a[_0xa1674f(0xef)](/base/i)&&(_0x239bd1=_0x42815f);}_0x486782['moveBattlerToPoint'](_0x1b3d68,_0x239bd1,_0x11e852,_0x4e85a9,_0xe0204,_0x43b91f),this['callNextMethod']();},Window_BattleLog[_0xabeb6b(0xc8)][_0xabeb6b(0x129)]=function(_0x4c5191,_0x1eb0f3,_0x383a2c){const _0x468af3=_0xabeb6b;for(const _0x4d7a43 of _0x4c5191){if(!_0x4d7a43)continue;_0x4d7a43[_0x468af3(0x776)](_0x1eb0f3,_0x383a2c);}this['callNextMethod']();};function Window_BattleMultiTarget(){const _0x5c9a81=_0xabeb6b;this[_0x5c9a81(0x8ea)](...arguments);}Window_BattleMultiTarget[_0xabeb6b(0xc8)]=Object[_0xabeb6b(0xa3b)](Window_Command[_0xabeb6b(0xc8)]),Window_BattleMultiTarget[_0xabeb6b(0xc8)][_0xabeb6b(0x840)]=Window_BattleMultiTarget,VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xac3)]=VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xac3)]||{},Window_BattleMultiTarget[_0xabeb6b(0x550)]=VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)]['MultiTarget'][_0xabeb6b(0x223)]??0x118,Window_BattleMultiTarget['BG_TYPE']=VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)]['MultiTarget'][_0xabeb6b(0x166)]??0x2,Window_BattleMultiTarget[_0xabeb6b(0xb44)]=VisuMZ['BattleCore']['Settings'][_0xabeb6b(0xac3)][_0xabeb6b(0x266)]??!![],Window_BattleMultiTarget['ALL_ACTORS']=VisuMZ['BattleCore'][_0xabeb6b(0x78f)]['MultiTarget'][_0xabeb6b(0x8b6)]??'All\x20Allies',Window_BattleMultiTarget[_0xabeb6b(0x57a)]=VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xac3)][_0xabeb6b(0xaaa)]??_0xabeb6b(0x377),Window_BattleMultiTarget[_0xabeb6b(0x68d)]=VisuMZ['BattleCore'][_0xabeb6b(0x78f)][_0xabeb6b(0xac3)][_0xabeb6b(0x4ca)]??0x0,Window_BattleMultiTarget['ACTOR_OFFSET_Y']=VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xac3)]['ActorOffsetY']??0x0,Window_BattleMultiTarget[_0xabeb6b(0x577)]=VisuMZ['BattleCore']['Settings'][_0xabeb6b(0xac3)][_0xabeb6b(0x838)]??0x0,Window_BattleMultiTarget[_0xabeb6b(0x883)]=VisuMZ['BattleCore'][_0xabeb6b(0x78f)][_0xabeb6b(0xac3)][_0xabeb6b(0xb78)]??0x0,Window_BattleMultiTarget[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)]=function(_0x5f1e8d,_0x3ea503){const _0x5bd6b6=_0xabeb6b;this['_forActor']=_0x3ea503,Window_Command[_0x5bd6b6(0xc8)][_0x5bd6b6(0x8ea)][_0x5bd6b6(0x378)](this,_0x5f1e8d),this[_0x5bd6b6(0x1a1)](Window_BattleMultiTarget['BG_TYPE']),this[_0x5bd6b6(0xa15)](),this[_0x5bd6b6(0x855)](),this[_0x5bd6b6(0x928)]();},Window_BattleMultiTarget[_0xabeb6b(0xc8)][_0xabeb6b(0xa27)]=function(){return this['_forActor'];},Window_BattleMultiTarget[_0xabeb6b(0xc8)][_0xabeb6b(0x6e4)]=function(){const _0x3f0e8b=_0xabeb6b;let _0x31de91=this[_0x3f0e8b(0xa27)]()?Window_BattleMultiTarget['ALL_ACTORS']:Window_BattleMultiTarget[_0x3f0e8b(0x57a)];if(Imported[_0x3f0e8b(0x765)]&&Window_BattleMultiTarget[_0x3f0e8b(0xb44)]){this[_0x3f0e8b(0x877)]=this[_0x3f0e8b(0xa27)]()?_0x3f0e8b(0x744):_0x3f0e8b(0x44f),this[_0x3f0e8b(0xb47)]=TextManager[_0x3f0e8b(0xa28)](this[_0x3f0e8b(0x877)]);const _0x209874=VisuMZ[_0x3f0e8b(0x643)][_0x3f0e8b(0x78f)][_0x3f0e8b(0x6c0)][_0x3f0e8b(0x4e9)];_0x31de91=_0x209874[_0x3f0e8b(0x782)](this[_0x3f0e8b(0xb47)],_0x31de91);}this[_0x3f0e8b(0x33f)](_0x31de91,_0x3f0e8b(0x15a));},Window_BattleMultiTarget[_0xabeb6b(0xc8)][_0xabeb6b(0xade)]=function(_0x4804e5){const _0x1e4bf6=_0xabeb6b,_0x176de4=this[_0x1e4bf6(0xab0)](_0x4804e5);this['resetTextColor'](),this[_0x1e4bf6(0x99d)](this[_0x1e4bf6(0x35a)](_0x4804e5));const _0x375476=this[_0x1e4bf6(0x76e)](_0x4804e5),_0x460674=this[_0x1e4bf6(0x76d)](_0x375476)[_0x1e4bf6(0x461)],_0x42c26d=_0x176de4['x']+Math[_0x1e4bf6(0x108)]((_0x176de4['width']-_0x460674)/0x2);this[_0x1e4bf6(0x674)](_0x375476,_0x42c26d,_0x176de4['y'],_0x176de4[_0x1e4bf6(0x461)]);},Window_BattleMultiTarget['prototype'][_0xabeb6b(0x5bc)]=function(){const _0x589ae1=_0xabeb6b;Window_Command[_0x589ae1(0xc8)][_0x589ae1(0x5bc)][_0x589ae1(0x378)](this),this[_0x589ae1(0x2d7)](),this[_0x589ae1(0x99f)]();},Window_BattleMultiTarget[_0xabeb6b(0xc8)]['updateVisibility']=function(){const _0x2cb720=_0xabeb6b;this['visible']=this[_0x2cb720(0x814)]();},Window_BattleMultiTarget[_0xabeb6b(0xc8)][_0xabeb6b(0x814)]=function(){const _0x2b3c8c=_0xabeb6b,_0x736fce=BattleManager[_0x2b3c8c(0x960)](),_0x380e95=_0x736fce&&_0x736fce[_0x2b3c8c(0xa91)]();if(!_0x380e95)return![];const _0x3fb81a=SceneManager[_0x2b3c8c(0x483)];if(this['forActor']()){if(_0x3fb81a[_0x2b3c8c(0x3c6)][_0x2b3c8c(0xc3)]&&_0x3fb81a[_0x2b3c8c(0x3c6)][_0x2b3c8c(0x477)][_0x2b3c8c(0x744)])return!![];if(_0x3fb81a['_enemyWindow'][_0x2b3c8c(0xc3)]&&_0x3fb81a[_0x2b3c8c(0x389)][_0x2b3c8c(0x477)][_0x2b3c8c(0x744)])return!![];}else{if(_0x3fb81a[_0x2b3c8c(0x389)][_0x2b3c8c(0xc3)]&&_0x3fb81a[_0x2b3c8c(0x389)][_0x2b3c8c(0x477)][_0x2b3c8c(0x44f)])return!![];}return![];},Window_BattleMultiTarget['prototype'][_0xabeb6b(0x99f)]=function(){const _0x1a8894=_0xabeb6b;if(!Imported[_0x1a8894(0x765)])return;this[_0x1a8894(0xb47)]!==TextManager[_0x1a8894(0xa28)](this[_0x1a8894(0x877)])&&this[_0x1a8894(0x9f5)]();},Window_BattleMultiTarget['prototype']['processTouch']=function(){const _0x29ef1a=_0xabeb6b;if(this[_0x29ef1a(0xbc2)]&&TouchInput[_0x29ef1a(0x479)]()){const _0x187fcb=this[_0x29ef1a(0x237)]();if(_0x187fcb>=0x0){const _0x3d5dde=this[_0x29ef1a(0xa27)]()?_0x29ef1a(0x744):_0x29ef1a(0x44f);Input['virtualClick'](_0x3d5dde);}}};function Window_DamageCounter(){this['initialize'](...arguments);}Window_DamageCounter[_0xabeb6b(0xc8)]=Object[_0xabeb6b(0xa3b)](Window_Base[_0xabeb6b(0xc8)]),Window_DamageCounter[_0xabeb6b(0xc8)][_0xabeb6b(0x840)]=Window_DamageCounter,Window_DamageCounter['SETTINGS']={'enabled':VisuMZ[_0xabeb6b(0x553)]['Settings'][_0xabeb6b(0x2ef)][_0xabeb6b(0x4c3)]??!![],'customFontFace':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)]['ComboWindow'][_0xabeb6b(0x42d)]??'','textAlign':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0x2ef)][_0xabeb6b(0x30c)]??_0xabeb6b(0x3fe),'hitsDmgFmt':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)]['ComboWindow']['hitsDmgFmt']??_0xabeb6b(0x4ef),'hitsHealFmt':VisuMZ['BattleCore']['Settings'][_0xabeb6b(0x2ef)][_0xabeb6b(0x780)]??'\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','totalDmgFmt':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0x2ef)]['totalDmgFmt']??'\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','totalHealFmt':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)]['ComboWindow'][_0xabeb6b(0x881)]??_0xabeb6b(0x35c),'fadeShiftX':VisuMZ[_0xabeb6b(0x553)]['Settings'][_0xabeb6b(0x2ef)]['fadeShiftX']??-0x2,'fadeShiftY':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)]['ComboWindow'][_0xabeb6b(0x283)]??0x0,'positionOffsetX':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)]['ComboWindow'][_0xabeb6b(0x57f)]??0x0,'positionOffsetY':VisuMZ[_0xabeb6b(0x553)]['Settings'][_0xabeb6b(0x2ef)]['PosOffsetY']??0x0,'updateDuration':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0x2ef)][_0xabeb6b(0x9b7)]??0x14,'minimumStayDuration':VisuMZ['BattleCore']['Settings'][_0xabeb6b(0x2ef)]['minimumStayDuration']??0x28,'minimumHits':VisuMZ['BattleCore']['Settings'][_0xabeb6b(0x2ef)][_0xabeb6b(0xb35)]??0x1,'opacitySpeed':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0x2ef)][_0xabeb6b(0x1c2)]??0x10},Window_DamageCounter[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)]=function(_0x58e646){const _0x5a67e3=_0xabeb6b;this['_visibleDuration']=0x0,Window_Base['prototype']['initialize'][_0x5a67e3(0x378)](this,_0x58e646),this[_0x5a67e3(0xab2)]=_0x58e646['x'],this[_0x5a67e3(0x4ae)]=_0x58e646['y'],this['resetCounter'](),this[_0x5a67e3(0x1a1)](0x2);},Window_DamageCounter[_0xabeb6b(0xc8)][_0xabeb6b(0x366)]=function(){const _0x3e3065=_0xabeb6b;this[_0x3e3065(0x45d)]=0x0,this[_0x3e3065(0x27a)]=0x0,this[_0x3e3065(0x58a)]=0x0,this['_targetHits']=0x0,this['_targetDamage']=0x0;},Window_DamageCounter[_0xabeb6b(0xc8)][_0xabeb6b(0x493)]=function(){const _0x121b8c=_0xabeb6b;Window_Base[_0x121b8c(0xc8)]['resetFontSettings']['call'](this);const _0x29a0e5=Window_DamageCounter[_0x121b8c(0x7fa)];_0x29a0e5[_0x121b8c(0x18f)]?this[_0x121b8c(0x7a0)][_0x121b8c(0x7bc)]=_0x29a0e5[_0x121b8c(0x18f)]:this[_0x121b8c(0x7a0)][_0x121b8c(0x7bc)]=$gameSystem[_0x121b8c(0x818)]();};var $comboWindowReset=function(){const _0x5bc645=_0xabeb6b;if(!SceneManager[_0x5bc645(0x87a)]())return;const _0x2caba8=SceneManager[_0x5bc645(0x483)][_0x5bc645(0xb3d)];if(_0x2caba8)_0x2caba8[_0x5bc645(0x366)]();};Window_DamageCounter['prototype'][_0xabeb6b(0x8db)]=function(_0x1e721e){const _0x1fcfbf=_0xabeb6b;this[_0x1fcfbf(0x169)]+=Math[_0x1fcfbf(0xb36)](_0x1e721e);const _0x269350=Window_DamageCounter[_0x1fcfbf(0x7fa)];this[_0x1fcfbf(0x45d)]=_0x269350[_0x1fcfbf(0x9b7)],this[_0x1fcfbf(0x169)]>=_0x269350[_0x1fcfbf(0xb35)]&&(this['_visibleDuration']=_0x269350[_0x1fcfbf(0xa19)]);};var $comboWindowIncreaseHits=function(_0x392c98){const _0x3eec17=_0xabeb6b;if(!SceneManager['isSceneBattle']())return;const _0x18f1d5=SceneManager[_0x3eec17(0x483)][_0x3eec17(0xb3d)];if(_0x18f1d5)_0x18f1d5['increaseHits'](_0x392c98);};Window_DamageCounter[_0xabeb6b(0xc8)]['increaseTotal']=function(_0x225b89){const _0x439366=_0xabeb6b;this['_targetDamage']+=Math[_0x439366(0xb36)](_0x225b89);const _0x3ea2e3=Window_DamageCounter[_0x439366(0x7fa)];this[_0x439366(0x45d)]=_0x3ea2e3[_0x439366(0x9b7)],this['_targetHits']>=_0x3ea2e3[_0x439366(0xb35)]&&(this[_0x439366(0xa6d)]=_0x3ea2e3[_0x439366(0xa19)]);};var $comboWindowIncreaseDamage=function(_0x2abd85){const _0x5f81c3=_0xabeb6b;if(!SceneManager[_0x5f81c3(0x87a)]())return;const _0x3c485f=SceneManager['_scene']['_damageCounterWindow'];if(_0x3c485f)_0x3c485f[_0x5f81c3(0x917)](_0x2abd85);},$comboWindowIncreaseHealing=function(_0x4be951){const _0x49de3a=_0xabeb6b;if(!SceneManager[_0x49de3a(0x87a)]())return;const _0x34ed14=SceneManager[_0x49de3a(0x483)][_0x49de3a(0xb3d)];if(_0x34ed14)_0x34ed14[_0x49de3a(0x917)](-_0x4be951);};VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x256)]=Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x226)],Scene_Battle['prototype'][_0xabeb6b(0x226)]=function(){const _0xe19990=_0xabeb6b;this['createDamageCounterWindow'](),VisuMZ['BattleCore'][_0xe19990(0x256)]['call'](this);},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x1ae)]=function(){const _0x50778f=_0xabeb6b;if(!Window_DamageCounter[_0x50778f(0x7fa)][_0x50778f(0x795)])return;const _0x44ec80=this[_0x50778f(0x28c)](),_0x324d26=new Window_DamageCounter(_0x44ec80);this['addWindow'](_0x324d26),this[_0x50778f(0xb3d)]=_0x324d26;},Scene_Battle['prototype']['damageCounterWindowRect']=function(){const _0x3d9d27=_0xabeb6b;if(VisuMZ[_0x3d9d27(0x553)][_0x3d9d27(0x78f)][_0x3d9d27(0x2ef)][_0x3d9d27(0x95e)])return VisuMZ[_0x3d9d27(0x553)][_0x3d9d27(0x78f)][_0x3d9d27(0x2ef)][_0x3d9d27(0x95e)][_0x3d9d27(0x378)](this);const _0x213646=Math[_0x3d9d27(0x534)](Graphics['width']/0x4),_0xc01b68=this[_0x3d9d27(0x1ef)](0x2,!![]),_0x2bbb94=0x0+this['comboWindowOffsetX'](),_0x3a222e=Math[_0x3d9d27(0xb36)](Graphics[_0x3d9d27(0x588)]*0x1/0x3)+this[_0x3d9d27(0x3f0)]();return new Rectangle(_0x2bbb94,_0x3a222e,_0x213646,_0xc01b68);},Scene_Battle['prototype'][_0xabeb6b(0x5c6)]=function(){const _0x2eddc3=_0xabeb6b;return Window_DamageCounter[_0x2eddc3(0x7fa)][_0x2eddc3(0x988)];},Scene_Battle[_0xabeb6b(0xc8)][_0xabeb6b(0x3f0)]=function(){const _0x267c6d=_0xabeb6b;return Window_DamageCounter[_0x267c6d(0x7fa)][_0x267c6d(0x756)];},Window_DamageCounter[_0xabeb6b(0xc8)][_0xabeb6b(0x5bc)]=function(){const _0xf3275=_0xabeb6b;Window_Base[_0xf3275(0xc8)][_0xf3275(0x5bc)][_0xf3275(0x378)](this),this[_0xf3275(0x511)](),this[_0xf3275(0x7fd)]();},Window_DamageCounter['prototype']['updateCounter']=function(){const _0x4efd34=_0xabeb6b;if(this[_0x4efd34(0x45d)]<=0x0)return;const _0x4da25c=this['_updateDuration'];this[_0x4efd34(0x27a)]=this[_0x4efd34(0x169)],this[_0x4efd34(0x58a)]=(this[_0x4efd34(0x58a)]*(_0x4da25c-0x1)+this['_targetDamage'])/_0x4da25c,this[_0x4efd34(0x45d)]--,this[_0x4efd34(0x45d)]<=0x0&&(this[_0x4efd34(0x27a)]=this[_0x4efd34(0x169)],this[_0x4efd34(0x58a)]=this[_0x4efd34(0x16f)]),this[_0x4efd34(0x9f5)]();},Window_DamageCounter[_0xabeb6b(0xc8)][_0xabeb6b(0x7fd)]=function(){const _0xf6d124=_0xabeb6b,_0x1c7dbb=Window_DamageCounter[_0xf6d124(0x7fa)],_0x2d6d9c=this['visibilityState'](),_0x381ab0=_0x1c7dbb[_0xf6d124(0x1c2)]||0x1;if(_0x2d6d9c&&this[_0xf6d124(0xba4)]<0xff)this[_0xf6d124(0xba4)]+=_0x381ab0;else!_0x2d6d9c&&this['contentsOpacity']>0x0&&(this[_0xf6d124(0xba4)]-=_0x381ab0,this['x']+=_0x1c7dbb[_0xf6d124(0x185)]||0x0,this['y']+=_0x1c7dbb[_0xf6d124(0x283)]||0x0);},Window_DamageCounter[_0xabeb6b(0xc8)][_0xabeb6b(0x814)]=function(){const _0x10475b=_0xabeb6b,_0x347dcc=Window_DamageCounter[_0x10475b(0x7fa)];if(this[_0x10475b(0x169)]>=_0x347dcc[_0x10475b(0xb35)])return!![];if(this[_0x10475b(0xa6d)]-->0x0)return!![];return![];},VisuMZ[_0xabeb6b(0x553)]['Game_Action_executeHpDamage_ComboWindow']=Game_Action['prototype'][_0xabeb6b(0xa00)],Game_Action[_0xabeb6b(0xc8)]['executeHpDamage']=function(_0x11f4d3,_0x2ebf6d){const _0x375652=_0xabeb6b;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x2ebf6d),VisuMZ[_0x375652(0x553)]['Game_Action_executeHpDamage_ComboWindow'][_0x375652(0x378)](this,_0x11f4d3,_0x2ebf6d);},VisuMZ[_0xabeb6b(0x553)]['BattleManager_endAction_ComboWindow']=BattleManager[_0xabeb6b(0x235)],BattleManager['endAction']=function(){const _0x1072e7=_0xabeb6b;$comboWindowReset(),VisuMZ['BattleCore']['BattleManager_endAction_ComboWindow'][_0x1072e7(0x378)](this);},Window_DamageCounter[_0xabeb6b(0xc8)]['refresh']=function(){const _0x1e2190=_0xabeb6b;this['contents']['clear'](),this['drawComboText'](),this['x']=this[_0x1e2190(0xab2)],this['y']=this[_0x1e2190(0x4ae)];},Window_DamageCounter[_0xabeb6b(0xc8)][_0xabeb6b(0xa52)]=function(){const _0xf6c46=_0xabeb6b,_0x4aa8b4=Window_DamageCounter[_0xf6c46(0x7fa)];return _0x4aa8b4[_0xf6c46(0x365)]||_0xf6c46(0x3fe);},Window_DamageCounter[_0xabeb6b(0xc8)]['hitText']=function(){const _0x71c16f=_0xabeb6b,_0x29d43c=Window_DamageCounter[_0x71c16f(0x7fa)];let _0x5d23b6=this[_0x71c16f(0x58a)]>=0x0?_0x29d43c[_0x71c16f(0x64a)]:_0x29d43c['hitsHealFmt'];return _0x5d23b6['format'](Math[_0x71c16f(0x7e9)](Math[_0x71c16f(0x534)](this[_0x71c16f(0x27a)])));},Window_DamageCounter[_0xabeb6b(0xc8)]['damageText']=function(){const _0x3ce13d=_0xabeb6b,_0x34f180=Window_DamageCounter[_0x3ce13d(0x7fa)];let _0x30046b=this[_0x3ce13d(0x58a)]>=0x0?_0x34f180[_0x3ce13d(0x8e1)]:_0x34f180[_0x3ce13d(0x881)];return _0x30046b[_0x3ce13d(0x782)](Math[_0x3ce13d(0x7e9)](Math[_0x3ce13d(0xb36)](this['_totalDamage'])));},Window_DamageCounter[_0xabeb6b(0xc8)][_0xabeb6b(0xaf1)]=function(){const _0x1d4e6f=_0xabeb6b;if(VisuMZ[_0x1d4e6f(0x553)][_0x1d4e6f(0x78f)][_0x1d4e6f(0x2ef)]['ComboWindow_DrawJS'])return VisuMZ[_0x1d4e6f(0x553)]['Settings']['ComboWindow']['ComboWindow_DrawJS'][_0x1d4e6f(0x378)](this);let _0x44de29=0x0,_0x27189f=0x0;const _0x3073aa=this[_0x1d4e6f(0x8c1)](),_0x1d0b94=this['textSizeEx'](_0x3073aa);if(this[_0x1d4e6f(0xa52)]()==='right')_0x44de29=this[_0x1d4e6f(0x62f)]-this['itemPadding']()-_0x1d0b94['width'];else this[_0x1d4e6f(0xa52)]()===_0x1d4e6f(0x627)?_0x44de29=Math[_0x1d4e6f(0x108)]((this[_0x1d4e6f(0x62f)]-_0x1d0b94[_0x1d4e6f(0x461)])/0x2):_0x44de29=this[_0x1d4e6f(0x329)]();this['drawTextEx'](_0x3073aa,_0x44de29,_0x27189f),_0x27189f+=Math[_0x1d4e6f(0x534)](this['lineHeight']()*0x2/0x3);const _0x2a2950=this[_0x1d4e6f(0x4a1)](),_0x1b1575=this[_0x1d4e6f(0x76d)](_0x2a2950);if(this[_0x1d4e6f(0xa52)]()==='right')_0x44de29=this[_0x1d4e6f(0x62f)]-this[_0x1d4e6f(0x329)]()-_0x1b1575['width'];else this[_0x1d4e6f(0xa52)]()===_0x1d4e6f(0x627)?_0x44de29=Math['floor']((this['innerWidth']-_0x1b1575['width'])/0x2):_0x44de29=this[_0x1d4e6f(0x329)]();this[_0x1d4e6f(0x674)](_0x2a2950,_0x44de29,_0x27189f);};function Window_InBattleStatus(){const _0x7ea11a=_0xabeb6b;this[_0x7ea11a(0x8ea)](...arguments);}function _0x382d(){const _0x42fe9e=['NameOffsetY','Game_Action_isForAll','TpGaugeOffsetY','_bypass_applyBattleCoreHitRateJS','createAttachmentSprites','FlinchDistanceX','Scene_Battle_onActorOk','getStypeIdWithName','arPenFlat','deactivate','_animationCount','traitObjects','frontview_ui','minimumStayDuration','inHomePosition','ActSeq_Animation_CastAnimation','unshift','setWaitMode','none','targetObjects','setLetter','JumpToLabel','SwitchMissEvade','performActionStart','setupWeaponAnimation','ActSeq_Grid_AnimationJsAtNode','setBattlerFlip','forActor','getInputButtonString','StateOverlayOffsetY','displayBuffs','VisuMZ_1_MessageCore','performWeaponAnimation','PopupShiftY','ActSeq_Inject_AnimationEnd','ParseClassNotetags','_itemWindow','Window_BattleLog_clear','makeBuffName','_skewX','CmdIconItem','ActSeq_Movement_WaitForMovement','ARRAYFUNC','ReflectAnimation','invokeMagicReflection','bind','isDebuffAffected','create','padding','addAttackCommand','_battleCoreNoElement','getMenuImage','paramBuffRate','ActSeq_Impact_ShockwaveEachTargets','shadow','dead\x20battlers','addBattleCoreAutoBattleStartupCommand','Duration','moveToStartPosition','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','drawItemImageListStyle','slices','friendsUnit','StatusWindowAttachmentFrontOffsetX','getBattlerKeyTargets','_commonEventKey','validTargets','AsUser','WaitForSkew','blt','textAlignment','originalName','pattern','DefeatEvent','actorCommandWindowRect','pointY','addChildAt','StatusWindowAttachmentBackOffsetX','_lastActor','toLowerCase','isPartyCommandWindowDisabled','guardLifeSteal','isChanting','victory','PreApplyAsUserJS','LifeStealRegExp','makeTargetsBattleCoreJS','isWaiting','itemCri','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','PostEndActionJS','_updateCursorArea','LUK','setGuard','buff','actionsFmt','_lines','_visibleDuration','terminate','createEffectActionSet','setupDesaturateImpactFilter','attack','_pattern','isETB','magicReflection','troop','Window_BattleActor_hide','Parse_Notetags_Targets','updateShadowPosition','Game_Map_battleback1Name','SKILLS','BattleManager_setup','_targetBattlerKey','ClearBattleLog','_growEasing','partyCommandWindowRect','makeTurnsText','battleCommandIcon','drawItemStatusListStyle','process_VisuMZ_BattleCore_CommonEventKeys','_tempActor','InBattleStatus','ActSeq_Camera_Clamp','_displayBattleCoreTransitionErrorMsg','setupChild','head','enemyHiddenParameter','ActSeq_Animation_ShowAnimationJS','loadBitmap','hpRate','ShowCurrentState','ActSeq_Camera_Reset','currentMaxValue','canSingleOrMultipleSelect','ActSeq_Mechanics_TextPopup','isMeleeSingleTargetAction','Param','loadSvEnemy','isBorderPortraitSpriteVisible','processBorderActor','startFloat','parallaxHue','Sprite_Actor_setActorHome','CastCertain','loadFaceImages','updateEventMain','clearTargetBattlerKey','StyleON','drawItemImageXPStyle','removeChildFromUiContainer','isOpenAndActive','statusWindowRectDefaultStyle','ActSeq_ChangeAngle','updateShadowBattleCore','isCustomBattleScope','speed','isEffecting','startHomeMove','AllEnemiesText','targetsForOpponents','open','_cancelButton','Sprite_Enemy_updateBossCollapse','inBattle','itemLineRect','CommandAddOptions','_targetX','Game_Battler_onBattleEnd','pageButtonY','VisuMZ_3_ActSeqImpact','DistanceX','_targetHomeX','redraw','ActSeq_Animation_AttackAnimation','close','Scene_Battle_itemWindowRect','_pageupButton','displayActionResults','BattleLog','CriticalDuration','bitmap','displayType','_list','MultiTarget','Parse_Notetags_HelpDescription','loadOtherActorImages','actionEffect','setTargetBattlerKey','ForceRandom','LIGHT','_targetFloatHeight','makeDamageValue','parent','_attackAnimationId','backColor','user','flashDuration','Wave','updateStart','removeBuff','trueRandomTarget','isMagical','singleSkill','drawIcon','ActSeq_Grid_TeleportToNode','_targetIndex','Sprite_AnimationMV_updatePosition','_hideAllIcons','Sprite_Enemy_updateCollapse','performMoveToPoint','drawItem','die','BindCommonEventKeysForGroup','bossCollapse','Sprite_Battler_initMembers','walk','createRateJS','_borderPortraitDuration','startShakeFlinch','sort','updatePositionBattleCore','obj','isAutoBattleCommandEnabled','_growWholeDuration','addChildToUiContainer','drawItemStatusXPStyle','battleJump','ActSeq_Movement_WaitForSpin','Scene_Battle_logWindowRect','drawComboText','_nameTempVisibleDuration','updateBattleProcess','battlerSprites','ActSeq_Impact_MotionTrailCreate','process_VisuMZ_BattleCore_CreateRegExp','ChargeRate','isUndecided','Game_Temp_requestBalloon','HelpOptions','prepare','updateNameTempVisibility','setBattleCameraPoint','removeState','options','opponentsUnit','flipVisualCutinVert','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','invokeAction','updatePhase','State-%1-%2','_offsetY','ActSeq_Mechanics_StbRemoveExcessActions','undecided','MeleeDistance','SkillsStatesCore','Window_BattleLog_performRecovery','updatePadding','TP_Flat','weatherPower','Skill-%1-%2','Scene_Boot_onDatabaseLoaded','GRID\x20MOVE','_flashColor','VisuMZ_2_WeaponSwapSystem','excludeListing','processRefresh','_requestRefresh','alive\x20actors\x20not\x20user','Game_Interpreter_terminate','clearMotion','ShakeFlinch','isBTB','canAddSkillCommand','PRE-','previousActor','_frame','traits','extraPositionX','Scene_Map_initialize','updateShadowScale','isForOpponentBattleCore','battleUIOffsetX','Angle','onAllActionsEnd','destroyDamageSprite','updateStateSprite','cancelHpLifeSteal','processExtendTroopMembers','onEnemyOk','_actor','Game_Battler_performEvasion','OffsetAdjust','ActSeq_Inject_WaitForInjectAni','canInput','selectAllEnemies','buffNameFmt','jsScaleUp','minimumHits','round','turnCount','Game_Action_updateLastTarget','item','statusDescription','numRepeats','AddOption','_damageCounterWindow','anchor','BattleManager_endAction','endBattle','MotionFrameWait','battleOpacity','_executedValue','SHOW_BUTTON','graphicType','setCustomDamageFormula','_buttonText','Amp','currentSymbol','DEF','ActSeq_Set_SetupAction','autoBattleWindowRect','scale','_tpbChargeTime','randomInt','ParseStateNotetags','softDamageCapRate','CommonEventID','valueColor','BattleSystemBTB','floatBattler','toUseBoostPoints','weaponTypes','rate','regionId','placeTimeGauge','getBattlePortraitFilename','setBattlerFacePoint','PostStartTurnJS','removeCurrentAction','revertTpbCachedActor','clearBattlerMotionTrailData','createUIContainer','isForAliveFriendBattleCore','guard','_colorType','code','applyCritical','%1EndTurnJS','Scene_Battle_createActorCommandWindow','isHiddenSkill','isActor','applyTargetFilters','isActiveTpb','helpWindowRectBorderStyle','visualCutinPortraitFilename','needsInputWindowChange','mpColor','loadBattleback2','max','adjustPosition_ScaleUp','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','_homeEasing','movement','COBWEB','EnemyOffsetY','ActSeq_Movement_HomeReset','MAT','makeSpeed','_jumpDuration','ActSeq_DB_DragonbonesTimeScale','ActSeq_Set_WholeActionSet','SvBattlerMass-%1-%2','linkSprite','gainStoredBoostPoints','\x5cC[0]','_battleBalloonSprites','PreApply%1JS','_baseY','playEnemyAttack','%1\x20Aspect','_visualHpGauge_JustDied','stop','battleStatusSprite','ActSeq_Animation_WaitForAnimation','_text','MAXMP','applyGuard','scrollTo','ActionAnimation','jsAccuracy','AutoBattle','SvMotionIdleMass-%1-%2','Scene_Battle_updateStatusWindowPosition','battleSpin','drawActorGraphic','characterName','_phase','lifeStealTrait','allBattleMembers','#%1','changeCtbCastTime','ActSeq_Movement_WaitForOpacity','TpGaugeOffsetX','BattleAI','4uzlcGJ','HelpSkillType','helpWindowRect','Window_BattleLog_performCounter','contentsOpacity','%1▲','Scene_ItemBase_applyItem','VisualCutinEffect','isValid','Sprite_Damage_createChildSprite','parseLocalizedText','setupBlueRedInvertImpactFilter','faceRect','performCollapse','ActionEnd','SideviewSelect','processCancel','processBattleBalloonRequests','startPartyCommandSelection','ITEM','Setting','cancel','ItemID','AUTO\x20BATTLE','fnordAddedStates','gradientFillRect','hpAffected','WaitForMovement','isAutoBattle','_borderPortraitTargetX','WaitCount1','MaxHP','sleep','VisuMZ_2_HorrorEffects','visible','nameY','startMove','_animation','cutinExit','Scene_Battle_createEnemyWindow','spriteId','attackAnimationId1','ActSeq_BattleLog_Clear','opacityStart','ActSeq_Horror_TVCreate','pageButtonX','onDatabaseLoaded','_multipliers','hasSkill','_updateClientArea','BattleManager_isTpbMainPhase','ActSeq_Mechanics_DamagePopup','forceEscapeSprite','text','performAttack','Sprite_Actor_updateFrame','WaitForCamera','getDamageStyle','includeState','SmoothImage','SkillItemMiddleLayout','isBusy','windowAreaHeight','ParseActorNotetags','finishActorInput','addBattleCoreAutoBattleStyleCommand','Game_Action_setSubject','_escapeRatio','moveBattlerHomeDistance','isHidden','HalfActions','isBigCharacter','applyGlobal','currentClass','displayChangedStates','%1EndBattleJS','removedBuffs','children','Game_Battler_makeSpeed','isVisualHpGaugeDisplayed','isJumping','logActionList','active','ActionSequence','skillItemWindowRectMiddle','eraseState','commandNameWindowDrawBackground','prototype','Scene_Battle_update','autoBattle','Window_BattleLog_refresh','Window_BattleLog_pushBaseLine','Window_BattleLog_displayMiss','HitFlat','_angleDuration','Scene_Battle_helpWindowRect','Spriteset_Battle_update','_performDamageMotion','trim','_indent','setEventCallback','hasAspectData','swing','isTpbReady','showEnemyAttackAnimation','evalDamageFormulaBattleCore','_returnWindow','isSkipPartyCommandWindow','updateSpin','ATTACK','Game_Party_addActor','removeChild','onActorOk','setupMotionBlurImpactFilter','stepForward','BattleManager_processVictory','Game_Action_itemTargetCandidates','updateCommandNameWindow','removeImmortal','isArray','changeTextColor','_targetOffsetX','getCommonEventIdWithName','gainBravePoints','ActSeq_Movement_WaitForSkew','USER-DEFINED\x201','match','symbol','pages','battleFloat','Mechanics','changeAtbChargeTime','_autoBattle','gainHp','iconIndex','toUpperCase','updateBattlerContainer','overworldBattleback2Name','Scene_Map_initializeAfter','updateCancel','default','processAbort','battlerName','Game_Battler_startTpbTurn','onTurnEnd','LIGHT-BULB','mpDamageFmt','waitForOpacity','isLearnedSkill','ReflectPlayback','alive\x20opponents','floor','dead\x20friends','statusWindowRect','ActSeq_Grid_TraverseToNode','_weather','_cache','HelpEscape','touchUI','AutoBattleMsg','ActSeq_BattleLog_WaitForBattleLog','Formula','_hpGaugeSprite','ActSeq_Angle_Reset','drawSkillCost','PreStartTurnJS','_waitMode','ActSeq_Animation_ActionAnimation','Game_BattlerBase_allIconsIBS','Damage','ActSeq_Weapon_NextActiveWeapon','Opacity','ActSeq_Horror_NoiseCreate','setStateTurns','processDefeat','aliveMembers','ConvertCount','GetActionSequenceSpecialTarget','processRandomizedData','find','setBattleSkew','VisuMZ_2_BattleSystemBTB','isCharging','_forcing','performJump','iconWidth','clearOnceParallelInterpreters','VisuMZ_1_ElementStatusCore','createStateSprite','_statusType','_frontAttachmentSprite','BattleManager_checkSubstitute','maxBattleMembers','_executeHpDamage','FRUSTRATION','_animationSprites','usePremadeActionSequence','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','Scene_Battle_windowAreaHeight','5261328ySjEJD','_commandNameWindow','HelpAutoBattle','updateFloat','Game_Battler_performDamage','Game_BattlerBase_eraseState','debuffValueFmt','_drawTextOutline','hidden','parallaxScrollX','debuffHelpFmt','boxWidth','updateHomeMove','SkillItemStandardCols','ShowAddedDebuff','needsActorInputCancel','Scene_Battle_commandFight','ActSeq_Mechanics_OnceParallel','updateAttachmentSprites','softDamageCap','_targetAngle','\x20to\x20%1\x20midbattle.','addAutoBattleCommand','ActSeq_Mechanics_EmulateSkillCost','applyVariance','resetNameTempVisibility','ChantStyle','PartyCmd','sortEnemies','_inBattleStatusWindow','becomeSTBExploited','ESCAPE','battleGrow','Game_Action_executeMpDamage','selectAll','maxLines','statusWindowRectXPStyle','extraPositionScaledY','processPostBattleCommonEvents','CombatLogIcon','alive\x20friends\x20not\x20user','jsCritRateAsTarget','alive\x20enemies\x20not\x20user','OffsetX','_damageContainer','iconText','BgType','_growY','ActSeq_Motion_FreezeMotionFrame','_targetHits','HpGaugeOffsetY','clearBattleCoreAspects','placeStateIcon','removeDamageSprite','ScaleDown','_targetDamage','getBattlerFromKey','attackAnimationId2','scope','Sprite_Enemy_update','setItem','Sprite_Weapon_loadBitmap','maxCommands','removeOnceParallelInterpreter','setSvBattlerSprite','Game_Action_setSkill','createSeparateDamagePopups','EmergeText','random','isDying','isPreviousScene','setBattleAngle','Sprite_Actor_update','maxCols','adjustPosition_ScaleDown','HelpFight','FvAniCenterAll','fadeShiftX','BTB','Game_Action_isForAliveFriend','gainHalfActionsPTB','WaitForFloat','invokeCounterAttack','process_VisuMZ_BattleCore_Notetags','ActSeq_Animation_ChangeBattlePortrait','isFrameVisible','_targetOpacity','customFontFace','Scene_Battle_createPartyCommandWindow','Window_BattleLog_displayFailure','motionType','displayAffectedStatus','_floatWholeDuration','Game_Actor_setup','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','createString','BattleLayout','displayCritical','animationNextDelay','actorId','isCertainHit','waitForMovement','MotionIdle','PopupOffsetY','pageOffsetX','setBackgroundType','processEscape','Sprite_Actor_setBattler','addNormalStatus','performDamage','Game_Action_setItem','Sprite_Enemy_initVisibility','_reflectionTarget','_targets','SwitchCritical','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','Game_BattlerBase_refresh','setTroopPage','createDamageCounterWindow','criticalDmgRate','\x5cI[%2]\x5cC[16]%1\x5cC[0]','requestRefresh','performLifeSteal','createEnemyWindow','Scene_Battle_terminate','createActionSequenceProjectile','AutoBattleOK','requestMotionRefresh','CreateCutinSettings','_floatHeight','_borderPortraitSprite','paintOpacity','canBattlerMove','Game_Action_itemHit','min','DistanceAdjust','_growDuration','Window_BattleLog_performActionStart','opacitySpeed','NameAttachStateIcon','adjustPosition_ScaleToFit','emulateAction','isForOneBattleCore','removeAnimation','_enemy','process_VisuMZ_BattleCore_Action_Notetags','updateBattlebackBitmap2','Scene_Map_updateCallMenu','Scene_Battle_startEnemySelection','ActSeq_Motion_RefreshMotion','addDamageSprite','all\x20enemies','ActSeq_Mechanics_Immortal','dimColor2','_emptyBitmap','_flipScaleX','VisuMZ_2_BattleSystemETB','onGrowEnd','multiTargetWindowRect','Game_Battler_clearMotion','ExtraSettings','ActSeqImpact','FlashDuration','startTurn','getEnemyIdWithName','battleDisplayText','DefaultHardCap','updateShadowVisibility','displayChangedBuffs','_aspectData','Sprite_Actor_updateShadow','Index','autoMeleeMultiTargetActionSet','command236','Game_Action_numRepeats','ActSeq_Movement_MoveToTarget','addItemCommand','customDamageFormula','<CENTER>%1','adjustPosition','turnsFmt','onEncounter','height','calcWindowHeight','performMagicEvasion','isNameTemporarilyVisible','nextActor','-%1','addShowHpGaugeCommand','playCursor','textColor','reduce','ActSeq_Cutin_EndVisualCutinEffectType','drawStates','sliceMin','ParseWeaponNotetags','TurnsFmt','BattleDefeatJS','Exploited','ShowRemovedBuff','AlphaFilter','playEnemyDamage','MpGaugeOffsetY','normalColor','checkShowHideBattleNotetags','dataId','battleSkew','regenerateAllBattleCore','VarianceFormulaJS','Game_Map_setupBattleback','Game_Action_clear','smooth','Window_BattleLog_popBaseLine','ActionCount','right','gainMp','displayItemMessage','_dragonbonesSpriteContainer','1570540YoSGig','battleCommands','debuffNameFmt','CriticalDmgFlat','BattleManager_startAction','AniDuration','_cacheTextWidth','clearResult','autoSelectPriority','top','useDigitGrouping','loadBattleback1','Game_Action_isForOpponent','Game_Action_executeDamage','Users','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','onBattleEndBattleCore','WindowWidth','1:1','PreDamageAsTargetJS','createAllWindows','EscapeSuccessJS','collapseType','WaitForExit','endVisualCutin','_actorMultiTargetWindow','casting','clearFreezeMotionForWeapons','_actions','hitType','Point','Game_Interpreter_updateWaitMode','displayedParams','autoBattleAtStart','damageOffsetY','endAction','_wtypeIDs','hitIndex','_targetGrowY','addMeleeReturnActionSet','ActSeq_Mechanics_CtbOrder','pageOffsetY','clearHorrorEffects','buffValueFmt','Game_Temp_initialize','▲%1','3802278YfXnYC','Actions','ShowAddedState','Elements','displayMiss','animationBaseDelay','FocusY','skillItemWindowRectBorderStyle','getBattleMembers','MUSICNOTE','BreakShields','createBattleFieldContainer','findSymbolExt','ActSeq_Target_NextTarget','mpDamage','physical','notFocusValid','updateBorderStyle','%1RegenerateJS','_battlerName','applyBattleCoreJS','_battlePortrait','Scene_Battle_createAllWindows_ComboWindow','VisuMZ_3_ActSeqProjectiles','isAffectedByBreakShield','EXCLAMATION','_commonEventIDs','_index','ACTOR_OFFSET_Y','Sprite_Actor_createStateSprite','displayAction','applyItem','jsCritRateAsUser','isTimeActive','_tempBattler','CriticalColor','refreshDimmerBitmap','all\x20actors','ShowButton','Reveal','command339','wait','Sprite_Animation_targetSpritePosition','_buffTurns','pauseInjectAnimation','isConfused','waitForJump','createDistortionSprite','ATK','initMembersBattleCore','_motion','BattleManager_onEscapeSuccess','alive\x20battlers\x20not\x20target','Window_BattleEnemy_show','isSkewing','_distortionSprite','ActSeq_Grid_AddTriggerToNode','ShowHpDmg','_totalHits','ActSeq_Mechanics_AtbGauge','itemRect','isForDeadFriend','selectSymbol','addBuff','setupIconTextPopup','BattleManager_startInput','WaitForAnimation','fadeShiftY','_battleCoreAddedElements','makeStateName','portraitFlipHorz','ActSeq_Animation_BalloonIconSpecific','updateOnceParallelInterpreters','innerHeight','setReturnWindow','setupRgbSplitImpactFilter','damageCounterWindowRect','itemEffectRecoverHp','addState','updateLink','_interpreter','repeatTargets','updateSelectionEffect','Sprite_Battler_updateMain','???','Game_Actor_equips','ActSeq_Mechanics_EtbAction','_enemySprite','isChangingOpacity','_stateIconSprite','ChangeOrderBy','isMeleeMultiTargetAction','canAttack','AttackAnimation','transform','Game_Battler_clearDamagePopup','ActSeq_Movement_FaceTarget','_enemySprites','BattleManager_checkBattleEnd','DisplayAction','alive\x20actors\x20not\x20target','removeAnimationFromContainer','CommandWidth','BaseTroopIDs','hpHealingFmt','PostApplyAsTargetJS','_battler','BattlebackScale','emerge','_currentActor','_shake','Game_Map_encounterList','Actor','displayTpDamage','setVisibleUI','setupBattleCoreData','needsSelectionBattleCore','CheckVisibleSwitchNotetags','createBattleBalloon','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','setBattler','_battleLayoutStyle','isForOne','waitForNewLine','normalIcon','ActSeq_Mechanics_ActiveChainInputDisable','isSpriteVisible','ActSeq_BattleLog_Refresh','blockWidth','Enemy-%1-%2','Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','updateHelp','waitCount','getColor','setClickHandler','applyBattleCoreCriticalHitRateJS','PreApplyAsTargetJS','isBreakStunned','windowPadding','_linkedSprite','_targetHomeY','StatusWindowAttachmentBack','ParseSkillNotetags','Game_Action_needsSelection','border','_tpbState','StepDistanceX','Game_BattlerBase_addNewState','timeScale','isPartyTpbInputtable','_endingBattle','updateVisibility','checkTpbInputClose','value','wholeActionSet','loadEnemy','ActSeq_Zoom_WaitForZoom','_enemyID','performMoveToTargets','ActSeq_Mechanics_CustomDmgFormula','NewPopupBottom','enemyId','ActSeq_Grid_PullToTargetNode','drawItemStyleIconText','getNextDamagePopup','weapons','DamageStyles','HelpItem','MotionType','isBattleRefreshRequested','loadCharacter','ParseItemNotetags','HITTYPE_CERTAIN','autoSelect','8104064uljFEF','ComboWindow','onBattleStartOnceParallels','resetResultSwitches','getAttackMotion','makeSuccess','HpGauge','BattleManager_invokeCounterAttack','ActSeq_Impact_ZoomBlurPoint','_stateTurns','command283','type','missle','updateMain','Sprite_Battleback_adjustPosition','isPhysical','iconHeight','_uiContainer','PrioritySortActive','evaded','ConfigManager_applyData','_lineHeight','addBattlerBuffsDebuffs','clearBattleBalloons','makeActionListAutoAttack','ActSeq_Mechanics_StbExtraAction','Parse_Notetags_TraitObjects','checkSubstitute','onEncounterBattleCore','DefaultDamageStyle','TextAlign','Window_BattleEnemy_initialize','PreDamageJS','statusWindowRectBorderStyle','collapse','VisuMZ_2_BattleSystemPTB','addChildToBack','apply','isSpinning','LIGHT\x20BULB','subject','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','ForceDeath','_padding','Game_Action_applyGlobal','EscapeFailureJS','DigitGroupingDamageSprites','ShowPortraitsBorderStyle','isBattleTest','MaxLines','FUNC','setStateTooltipBattler','JS\x20%1REGENERATE','_lastEnemy','TpbGaugeOffsetX','aspect','Scene_Battle_skillWindowRect','ActSeq_Angle_WaitForAngle','waitForEffect','itemPadding','alignBattleCoreDamageSprite','checkTpbInputOpen','removeStatesAuto','_namesCount','addDebuff','isNonSubmenuCancel','Game_Battler_onTurnEnd','UNTITLED','checkCacheKey','_battlerHue','MP_Flat','updateStateSpriteBattleCore','updateStatusWindowPosition','updateCancelButton','targetBattlerContainerOpacity','log','ShowCounterWait','disarmMpLifeSteal','_updateTargetValue','isDTB','changeWeather','addCommand','setBattlerMotionTrailData','ActSeq_Inject_AnimationStart','6tWhiyA','battleCorePreBattleCommonEvent','createInBattleStatusWindow','performTpbActiveCheckSwitch','GroupDigits','Sprite_Battler_setBattler','addFightCommand','addPartyCommand','changeBattlebacks','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','guardMpLifeSteal','isNegativeLifeSteal','createBattleFieldBattleCore','weatherType','PopupShiftX','negativeHpLifeSteal','_inBattleStatusMode','FlinchDistanceY','_targetSkewX','clearFreezeMotion','dead\x20enemies','CriticalHitRateJS','compatibilityVisible','createDamageSprite','isCommandEnabled','makeAutoBattleActions','\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','_opacityWholeDuration','HITTYPE_PHYSICAL','deadMembers','Window_Options_statusText','_preBattleCommonEvent','getItemDamageAmountTextOriginal','ShowMissEvasion','cameraOffsetDuration','textAlign','resetCounter','CalcEscapeRatioJS','_buffs','isEscapeCommandEnabled','jsAccuracyAsTarget','actorCommandEscape','extraPositionY','lastBattleSkill','updateStaticSvBattlerFrames','maxWidth','processTouch','isNextScene','\x5cI[%1]\x5cC[%3]%2','dead\x20actors','ActSeq_Element_AddElements','executeMpDamage','VariableHeal','All\x20Enemies','call','_lastRegenFrameCount','AspectColor','Window_PartyCommand_initialize','setBlendColor','debuffColor','CriticalDmgRate','_injectAnimationSprite','waitForAnimation','addWindow','findTargetSprite','loadPicture','%1\x20%2','_speed','isIncludedInEnemyWindow','ActSeqProjectiles','auto','_enemyWindow','drawDebuffs','emulateActionEffect','BattleManager_startBattle','clearAllVisualCutins','isAnyoneJumping','freezeFrame','enemyMpGaugeRate','preemptive','mainSprite','isCancelLifeSteal','pha','isForAnyoneFocusOpponents','onSkewEnd','substitute','ShowHide','ActSeq_Mechanics_EmulateGuardEffect','frameVisible','createActorCommandWindow','prev\x20target','getAttackMotionSlot','offsetY','extendTroopMembers','isAnyBattleBalloonPlaying','skill','_homeY','Sprite_Enemy_createStateIconSprite','itemEffectGainTp','setup','_enemyMultiTargetWindow','forceWeaponAnimation','startIcon','EnableSoftCap','repositionCancelButtonBorderStyle','BattleManager_initMembers','icon','AsTarget','canAttackBattleCore','NOTE','textBaseline','ActSeq_Movement_Opacity','enemyShowParametersIfDefeated','ActSeq_Movement_Float','VisuMZ_2_BattleSystemSTB','Shadow2','isTurnBased','ext','#ffffff','Spriteset_Battle_createLowerLayer','ActSeq_Movement_Skew','ActSeq_Camera_Offset','drawItemActorSvBattler','isImmortal','setMoveEasingType','_partyCommandWindow','ActionEndUpdate','commandEscape','motionIdle','\x5cI[%1]\x5cHEXCOLOR<%3>%2','AutoBattleCancel','Window_ActorCommand_initialize','_actorWindow','autoBattleUseSkills','parseForcedGameTroopSettingsBattleCore','mainSpriteWidth','HomePosJS','selectNextCommand','VisuMZ_4_BreakShields','BattleSystemCTB','base','state','glitch','ActSeq_BattleLog_PopBaseLine','isForAnyoneFocusFriends','_enemyNameContainer','_battleField','ScaleX','command3011','Width','ActSeq_Grid_PushFromTargetNode','isDisplayEmergedEnemies','drawingAreaWidth','Scene_Battle_start','hasStaticSvBattler','displayCounter','guardSkillId','abnormal','startBattle','launchBattle','maxItems','_selectionEffectCount','isTickBased','isCurrentItemEnabled','pause','CurrentTurn','ShakeFlinchPower','setHue','startActorSelection','StateIconOffsetY','refreshStatusWindow','_forcedHomeX','ActSeq_Mechanics_RemoveState','parse','comboWindowOffsetY','performRecovery','Game_Action_setAttack','isActiveTpbReady','svBattlerAnchorX','mainSpriteScaleX','_deathStateApplied','MotionSpeed','CreateCommonEventKeys','Scene_Battle_onEnemyCancel','setBattlePortrait','battleLayoutStyle','ShowSubstitute','isOpen','left','_targetGrowX','setupTextPopup','onActorCancel','performAction','GUARD','pushBaseLine','updateScale','updateCustomActionSequence','helpAreaHeight','stypeId','Scene_Battle_selectNextCommand','updateCollapse','Game_Troop_setup','ActSeq_BattleLog_AddText','spinBattler','isMoving','drawActorLevel','ConvertParams','svShadow','setHorrorEffectSettings','setActorHome','alphabetic','ActSeq_Animation_BalloonAnimation','addAutoBattleCommands','jsScaleToFit','isSkillItemWindowsMiddle','enemyShowParametersIfBattleTest','createHelpWindowBattleCore','ActSeq_Movement_MoveToPoint','_shakeFlinchPower','_backAttachmentSprite','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','allIcons','buffIconIndex','popupDamage','BattleEndEvent','svActor','AutoAddState','STR','playBattleVoice','NextTurn','Normal','fittingHeight','BattleVictoryJS','PrioritySortActors','Scene_Battle_createPartyCommandWindowIBS','CustomFontFace','BattleManager_onEncounter','performCounter','move','_homeWholeDuration','_enemyId','registerCommand','powerDownColor','PreStartActionJS','ActSeq_Mechanics_Multipliers','checkBattleEnd','MANUAL','MIN_SAFE_INTEGER','battleback2Name','forceAction','_shadowSprite','setupShockwaveImpactFilter','animationId','makeTargetSelectionMoreVisible','activate','targetsForFriends','SkewY','isAnyoneInjectAniPrepping','Game_Battler_performActionStart','CheckActSeqProjectileVersion','pageButtonPosition','startOpacity','ActSeq_Impact_BlueRedInvert','wtypeId','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','mmp','_methods','isForFriendBattleCore','magicSkills','pageup','displayReflectionPlayBack','position','placeGauge','FvAniEachTarget','anchorX','recoverAll','ActSeq_ChangeSkew','updateMotionCount','ActSeq_Inject_AnimationPauseResume','onRegeneratePlayStateAnimation','forceMotion','updateBattleBalloons','ActSeq_Target_RandTarget','_updateDuration','setBattleCameraOffset','BoostPoints','_surprise','width','createDamageContainer','startSpin','isSideButtonLayout','initBattlePortrait','commandStyleCheck','setLastBattleSkill','CriticalHitFlat','createJS','isAppeared','QUESTION','%1Damage%2JS','inputting','Name','enemyStatus','isGuardWaiting','mainFontSize','Style','BattleManager_inputtingAction','PreDamage%1JS','PopupDuration','performActionEndMembers','_handlers','stateHelpFmt','isClicked','drawText','ActSeq_Mechanics_AddBuffDebuff','VisuMZ_2_AggroControlSystem','canGuard','BULB','isAnyoneSkewing','noise','ActionEffect','ActSeq_Mechanics_StbExploit','_scene','PreDamageAsUserJS','applyAngleChange','startSkew','createStateIconSprite','ShowFacesListStyle','visualCutinPortraitHue','PostStartBattleJS','Mute','font','SvWeaponSolo-%1-%2','battleCoreTpbMainPhase','contains','Game_BattlerBase_canGuard','_regionBattleback1','_callSceneOptions','resetFontSettings','Text','Game_BattlerBase_isStateResist','isOTB','JSON','ConfigManager_makeData','ActSeq_Grid_RemoveTriggerFromNode','NameLegacy','isFastForward','Spriteset_Battle_updateActors','AutoBattleBgType','weaponImageId','EscapeSuccess','nextActiveWeaponSlot','damageText','Window_BattleLog_displayCritical','isTpb','PopupPosition','startInput','ActSeq_Impact_ColorBreak','displayBattleCoreTransitionErrorMsg','isAtbChargingState','visualHpGauge','mainSpriteScaleY','_statusWindow','ElementStatusCore','enemyNames','_targetY','isForAll','_autoBattleWindow','performActionMotions','fight','adjustPosition_1for1','setupBattleCore','getParamBuffAndStateRate','MotionAni','Window_BattleActor_show','isPreviousSceneBattleTransitionable','AdjustRect','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','Immortal','getChildIndex','drawSingleSkillCost','pageButtons','needsSelection','callOptions','contentsBack','ANGLE','Enable','bgType','drawItemBackground','process_VisuMZ_BattleCore_Failsafes','svAnchorY','_totalValue','ActSeq_Movement_HomeMoveToTarget','ActorOffsetX','states','skillWindowRect','enemyShowParametersAlways','_battlerKeyCache','Scene_Battle_startPartyCommandSelection','processVictory','process_VisuMZ_BattleCore_PluginParams','battleback1Name','Game_Battler_forceAction','battleEnd','isSideView','BattleManager_onEscapeFailure','setHome','thrust','updateFlip','addImmortal','startVisualCutin','setActiveWeaponSet','StartTurnMsg','isAlwaysHidden','onBattleStartBattleCore','initMembers','lineRect','Game_System_initialize','playReflection','equipSlots','FaceDirection','setImmortal','slice','createBattleUIOffsetY','TextFmt','isOverworld','JS\x20%1START\x20ACTION','IconStypeNorm','_active','_subject','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','isRepeated','_makeFontNameText','isStateAffected','battleUIOffsetY','MAXHP','_back1Sprite','ActSeq_Grid_ActionAnimationAtNode','_defeatedEnemies','_pagedownButton','cancelLifeSteal','_allTargets','NameAsTarget','_item','setValue','NameAlwaysSelectOnly','hasBeenDefeatedBefore','clear','StepDuration','startInjectAnimation','addExtendedTroopMembers','PreRegenerateJS','AnchorX','createBattleField','Game_Party_removeActor','getReturnWindow','CmdIconFight','makeBuffHelpText','Game_Interpreter_PluginCommand','value1','damagePopupOffsetY','BattleStartEvent','deathStateId','VisuMZ_3_ActSeqCamera','updateCounter','performSTBExploiter','index','XPSpriteYLocation','battleCameraData','ActSeq_Mechanics_RemoveBuffDebuff','hardDamageCap','isAnimationShownOnBattlePortrait','commandSymbol','isCancelled','itemEffectAddAttackState','skewBattler','_weaponSprite','battleEffect','Game_Map_battleback2Name','damageRate','_stateSprite','EFFECT_COMMON_EVENT','BattleGridSystem','AutoMeleeSolo','isCTB','Pre','processActorCommandCancelTPB','makeUniqueNames','Rate','startMotion','normalHelp','Parse_Notetags_Action','addGeneralOptions','SvBattlerSolo-%1-%2','commandNameWindowCenter','mainSpriteHeight','globalAlpha','command119','ResetOffset','ceil','_shadowScaleX','applyBattleCoreHitRateJS','encounterList','horzCells','_currentAngle','JS\x20%1END\x20BATTLE','refreshBattlerMotions','icons','AttachStateOffsetY','Game_BattlerBase_meetsUsableItemConditions','JS\x20BATTLE\x20VICTORY','equips','Game_Battler_onBattleStart','lastFilename','refreshMotion','moveBattlerHomeToPoint','isFightCommandEnabled','actorCommandSingleSkill','startEnemySelection','battleCoreResumeLaunchBattle','POST-','commandNameWindowDrawText','isEnemy','drawGauge','nameColor','portraitFilename','startAction','WIDTH','attackStatesRate','%1-%2','BattleCore','setupDamagePopup','battlelog','setupNegativeImpactFilter','addActor','requestFauxAnimation','process_VisuMZ_BattleCore_jsFunctions','ActSeq_Mechanics_FtbAction','createEnemyNameContainer','target','GetActionSequenceSpecialTargetWithFlags','autoRemovalTiming','alterType','VisuMZ_3_BoostAction','MP_Rate','makeDeepCopy','isRightInputMode','drawActorName','createPartyCommandWindow','_damagePopupArray','AS\x20USER','battleAngle','_skillIDs','sideview_ui','isBypassDamageCap','changeBattlerOpacity','ConvertActionSequenceTarget','Window_BattleLog_performReflection','\x5cC[16]%1\x5cC[0]','Post','setupCriticalEffect','animationShouldMirror','updateLastTarget','_preemptive','jump','isActionSelectionValid','ENEMY_OFFSET_X','rec','USER-DEFINED\x205','ALL_ENEMIES','smoothSelect','turns','pointX','_svBattlerData','PosOffsetX','targetDistortionSpritePosition','_armorPenetration','PreEndActionJS','ActSeq_Mechanics_OtbOrder','onEscapeSuccess','isTpbCharged','JS\x20%1START\x20BATTLE','ActSeq_Grid_ClearPassiveStatesFromNode','boxHeight','battleCommandName','_totalDamage','\x5cC[4](Passive)','damageOffsetX','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','Window_BattleLog_displayTpDamage','AntiTintUiElements','createCommandNameWindow','ANTI_TINT_UI','ActSeq_Target_CurrentIndex','Scene_Battle_createHelpWindow','View\x20battle\x20member\x20status.','ARRAYJSON','createPartyCommandWindowBattleCore','Variable','regenerateAll','StatusWindowAttachmentFront','anchorY','SWEAT','Scene_QuickLoad','updateTargetPosition','_forcedHomeY','clearBattleRefreshRequest','itemTextAlign','isFlipped','updateBorderSprite','Scene_Options_maxCommands','startInBattleStatus','flashColor','updateHpGaugePosition','_jumpHeight','BattleManager_cancelActorInput','_endBattle','CTB','message2','displayCurrentState','updateAction','getBattlePortraitOffsetY','_lastHpDamage','isForAliveFriend','ShowTpDmg','attackTimesAdd','Window_BattleLog_performEvasion','forceSelect','makeTargetsBattleCore','Window_BattleEnemy_hide','_motionCount','battleSys','ActionSkillMsg1','createShadowSprite','damageContainer','update','redrawForGaugeRate','PortraitScale','displayFailure','placeActorName','createEnemies','loadSvActor','updateEffectContainers','requestDragonbonesAnimation','hpDamageFmt','comboWindowOffsetX','getAspectData','findIndex','ActSeq_Impact_Oversaturate','currentAction','push','getAttackWeaponAnimationId','isStateResist','battlerKey','faceWidth','ArRedFlat','drawItemStyleIcon','_customDamageFormula','RegExp','coreEngineRepositionEnemies','stateMotionIndex','currentExt','Game_Battler_regenerateAll','includes','Targets1','clearNameTempVisibility','escape','hasSvBattler','drawActorIcons','playOnceParallelTroopPage','_doubleTouch','concat','okTargetSelectionVisibility','AnchorY','_shakeFlinchDuration','addOnceParallelInterpreter','Game_Action_isForFriend','ActSeq_BattleLog_PushBaseLine','Game_Action_itemEffectAddAttackState','Scene_Battle_stop','%1▼','TextColor','battlerShadowScaleX','replace','uiMenuStyle','_createClientArea','makeActionOrders','StartTurnWait','reserveCommonEvent','Scene_Battle_commandEscape','visualCutinPortraitType','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','ActSeq_Motion_WaitMotionFrame','FvAniCenterScreen','isAnyoneSpinning','ActSeq_Grid_RemovePassiveStatesFromNode','battleAnimation','bottom','_forcedBattleLayout','createTroopNote','Window_BattleLog_popupDamage','negativeLifeSteal','PostApplyJS','shouldDisperseDamage','battleStatusWindowAnimationContainer','requestPointAnimation','debuffAdd','_floatEasing','gainTp','onJumpEnd','parallaxScrollXinvertEnemy','_duration','special','_motionType','lukEffectRate','alive\x20opponents\x20not\x20target','DamageDisplay','ActSeq_Mechanics_EmulateSkillEffect','ActSeq_Mechanics_AnalyzeWeakness','logWindowRect','_appeared','getLastHpDamage','createKeyJS','map','_homeX','process_VisuMZ_BattleCore_TraitObject_Notetags','setupActionSet','_effectsContainer','alive\x20battlers','setSkill','switchToWeaponType','alterCost','ActSeq_Animation_ShowAnimation','DTB','isBattlerTargeted','ScaleToFit','initElementStatusCore','openBattleActorWindow','expRate','param','_cursorSprite','autoMeleeSingleTargetActionSet','center','isBattleCoreTargetScope','Window_BattleLog_performDamage','TpbActiveChangeEnabled','portrait','Game_Action_isForRandom','applyResultSwitches','_lastPluginCommandInterpreter','innerWidth','getDefeatedEnemies','parameters','offsetX','enemyShowLevel','drawItemActorSprite','Game_Action_executeHpDamage','isOnCurrentMap','_actorCommandWindow','_tpbSceneChangeCacheActor','Scene_Battle_startActorSelection','getHardDamageCap','ActSeq_Element_ForceElements','NUM','HP_Flat','tone','isAtbCastingState','_regionBattleback2','_tpbNeedsPartyCommand','addLoadListener','CoreEngine','Game_Actor_makeActionList','_tempEquipCheck','resizeWindowBorderStyle','isForNotUser','setHelpWindow','setBattlerBattleCore','hitsDmgFmt','setAttack','ActSeq_Mechanics_VariablePopup','IconSet','StartName','autoBattleStyle','Scene_Party','isCommonEventReserved','numTargets','getLastPluginCommandInterpreter','NameFontSize','skills','splice','isActing','performEvasion','prepareBorderActor','createMultiTargetWindows','cancelActorInput','VariableDmg','Mirror','_updateColorFilter','setSTBExploited','ActSeq_Grid_AddTriggerToNodeJS','COMBAT\x20LOG','finalizeScale','SkillID','VisuMZ_2_BattleGridSystem','_skewDuration','updateBattlebackBitmap1','isBattleMember','chantStyle','Game_BattlerBase_initMembers','TpbGaugeOffsetY','SyncBuffExpire','makeBattleCommand','isCustomActionSequence','setSubject','battleMove','PostApplyAsUserJS','damageStyle','drawTextTopAligned','ActSeq_Movement_FaceDirection','drawTextEx','fnordRemovedStates','VisuMZ_3_FrontviewBattleUI','WaitCount','createHpGaugeSprite','destroy','requestMotion','displayHpDamage','Window_BattleStatus_drawItemImage','selectAllActors','Defeat','createEnemySprite','_enemies','_inputting','_branch','isForFriend','isDisarmLifeSteal','Debuffs','FrontViewSelect','ActSeq_Motion_PerformAction','Game_Action_setGuard','drawItemImage','okButtonText','inBattleStatusWindowRect','critical','ACTOR_OFFSET_X','applyImmortal','VisuMZ_3_StateTooltips','makeTargets','Sprite_SvEnemy','Armor-%1-%2','StatusWindowSelectableBackHide','PostEndBattleJS','allowCollapse','_battleBalloonQueue','Destination','charged','getSkillTypes','ActSeq_Movement_BattleStep','makeData','SvWeaponMass-%1-%2','_eventId','isDead','removeBattleBalloon','VisuMZ_2_BattleSystemATB','changeInputWindow','createBattleUIOffsetX','changeAtbCastTime','actions','commandOptions','partyCommandWindowRectXPStyle','_cursorArea','isGuard','VisuMZ_3_ActiveChainSkills','Scene_Battle_onActorCancel','addStatusCommand','Scale','displayStartMessages','updateEvent','AnimationID','text\x20target','enemyTpGaugeRate','isGuardLifeSteal','Scene_Battle_startActorCommandSelection','Sprite_Enemy_updateStateSprite','performSubstitute','CreateActionSequenceTargets','addSingleSkillCommands','addedStateObjects','ParseAllNotetags','addCustomCommands','VisuMZ_2_DragonbonesUnion','smoothness','svBattlerName','Weapon-%1-%2','counterAttack','ButtonAssist','attachSpritesToDistortionSprite','_logWindow','ActSeq_Projectile_Icon','ActSeq_Movement_Scale','ActSeq_Set_TargetActionSet','setHandler','isTriggered','command357','_activeWeaponSlot','PostEndTurnJS','loop','buffColor','AGI','Window_BattleLog_performSubstitute','battleInjectPrep','onAngleEnd','drawActorBuffRates','checkExtendTroopCompatibility','makeActionList','createAnimationContainer','requestAnimation','createMainSprite','CmdIconAutoBattle','_waitCount','GetParamIcon','setFullActionsPTB','ActSeq_Mechanics_WaitForEffect','_targetSkewY','time','resetBreakShield','PreEndTurnJS','onBattleEnd','createCommandVisibleJS','setupBattleback','effects','makeCommandList','ActSeq_Mechanics_AddState','WaitForProjectile','targetSpritePosition','name','setupHpGaugeSprite','SceneManager_push','show','STYPES','▼%1','Exploiter','updateCallMenu','USER-DEFINED\x202','getDualWieldTimes','Game_Enemy_transform','isAnyoneFloating','AutoNotetag','onEnemyCancel','BattleManager_makeActionOrders','ShowAddedBuff','note','svActorHorzCells','front\x20base','removeHorrorEffect','Buffs','Scene_Battle_onEnemyOk','refreshActorPortrait','disperseDamage','getBattlerKeyTargetReplacement','adjustWeaponSpriteOffset','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','ActSeq_BattleLog_DisplayAction','Sprite_Actor_updateBitmap','parallaxHueEnemyModifier','Sprite_Battler_damageOffsetX','VisuMZ_1_SkillsStatesCore','lastCommandSymbol','StatusGraphic','actor','isNextSceneBattleTransitionable','OverallFormulaJS','actionBattleCoreJS','textWidth','RevertAngle','getTraitSetKeys','canEscape','StatusWindow_DrawJS','performAttackSlot','displayMpDamage','startActorCommandSelection','basicGaugesY','missile','helpAreaBottom','isForOpponent','_flashDuration','clearActiveWeaponSlot','ActSeq_DB_DragonbonesMotionAni','svAnchorX','Sprite_Gauge_smoothness','_flinched','shouldHideBattleEndPopups','damagePopupOffsetX','toString','_motionSpeed','doesPageHaveOnceParallelStart','_growX','_freezeMotionData','portraitType','Window_BattleLog_performActionEnd','version','pow','VisuMZ_3_BattleVoices','updateJump','Game_Interpreter_command283','createInnerPortrait','damage','createAutoBattleWindow','battleInjectAni','createHelpWindow','alterPriority','noSimilarSTypes','dying','callUpdateHelp','ActSeq_Movement_Jump','ActSeq_Movement_MoveToJsPoint','testApply','ActSeq_Mechanics_EmulateAttackEffect','currentValue','characterIndex','attackSkillId','cutinEnter','playOnceParallelInterpreter','_iconIndex','setHelpWindowItem','_dimmerSprite','isForRandomBattleCore','pagedown','FaceAway','passiveText','normal','message1','PostStartActionJS','ArPenRate','maxTp','isMagicSkill','extraHeight','setCursorRect','motionSpeed','battleCamera','-----','createMiss','vertCells','_spriteset','updateStateIconSprite','positionOffsetY','CmdIconStatus','isDamagePopupRequested','ActSeq_Impact_TimeStop','%1StartTurnJS','itemWindowRect','addWeaponSwapCommand','isSelected','Window_BattleLog_performCollapse','performShakeFlinch','FullActions','_baseLineStack','dragonbonesData','Frame','_makeCursorAlpha','VisuMZ_0_CoreEngine','_svBattlerSprite','_fauxAnimationSprites','_createDamageContainer','_isBattlerFlipped','CopyCombatLog','StatusWindowSkinHide','isAttack','textSizeEx','commandName','isSubjectValidForAnyoneSelect','initBattleCore','cancelMpLifeSteal','Override','createContents','createWeather','process_VisuMZ_BattleCore_BaseTroops','jumpBattler','processOk','addSkillTypeCommand','applyDamageCaps','expTotal','WaitComplete','ActSeq_Animation_BalloonIcon','_createColorFilter','_opacityEasing','_animationContainer','hitsHealFmt','MpGaugeOffsetX','format','isATB','Window_BattleLog_displayMpDamage','ShowReflectWait','battleMembers','Height','CmdStyle','value2','CastMagical','Targets','createInnerSprite','mhp','alive\x20enemies\x20not\x20target','Settings','\x5cC[%1]','frameCount','_jumpWholeDuration','%1Apply%2JS','ParseEnemyNotetags','enabled','FocusX','BattleManager_processDefeat','string','isBattleFlipped','Game_Battler_performMiss','moveBattlerToPoint','ActSeq_Impact_TimeScale','ActSeq_Movement_WaitForScale','isAnyoneMoving','AutoMeleeAoE','contents','restore','disarmLifeSteal','clearGlobalVariables','ActSeq_Mechanics_CtbSpeed','SvMotionIdleSolo-%1-%2','_actionBattlers','getBattlePortrait','updateBitmap','loadSystem','checkSceneBattleTransitionable','process_VisuMZ_BattleCore_PreBattleCommonEvent','prepareCustomActionSequence','addSkillCommands','_baseTexture','faceHeight','RequiresDefeat','_weaponImageId','Scene_Map_launchBattle','applyFreezeMotionFrames','Sprite_Battler_damageOffsetY','isAnyProjectilePresent','isTpbMainPhase','DestinationJS','drawEnemyName','requestBattleBalloon','paySkillCost','battler','fontFace','updateSkew','ActSeq_Skew_Reset','DistanceY','portraitHue','CommandVisible','<CUSTOM\x20ACTION\x20SEQUENCE>','_onceParallelInterpreters','onEscapeFailure','BattleManager_processAbort','Filename','PostDamageAsTargetJS','effect','VisuMZ_3_SideviewBattleUI','clearActiveWeaponSet','drawActorSimpleStatus','clearDamagePopup','addAnimationSpriteToContainer','Game_Enemy_setup','Scene_Battle_updateCancelButton','FlashColor','isGrowing','ShuffleArray','enemy','Radius','performFlinch','allowRandomSpeed','SkillItemBorderCols','currentDisplayedValue','createAnimationSprite','Scene_Battle_needsInputWindowChangeIBS','DamageType%1','process_VisuMZ_BattleCore_DamageStyles','dead\x20opponents','processEnemyModeTouchBattleCore','turn','BattleManager_updatePhase','createCancelButton','isAnimationPlaying','_showWeapon','isQueueOptionsMenu','swapEnemyIDs','performReflection','ActSeq_Mechanics_BoostPointsStoreData','requestBalloon','abs','removeBuffsAuto','getHalfActionsPTB','Scene_Battle_createAllWindows','commandAutoBattle','onDisabledPartyCommandSelection','COMBATLOG','unchanged','stbGainInstant','18295ltimvG','statusTextAutoBattleStyle','performMiss','ActSeq_Mechanics_PtbConvert','playCancel','setActionState','Turns','Window_BattleLog_performMagicEvasion','SETTINGS','isItem','ExtDisplayedParams','updateOpacity','playOkSound','StateOverlayOffsetX','updateWaitMode','_floatDuration','select','itemHit','_additionalSprites','useItem','processBattleCoreJS','ShakeFlinchDuration','ActSeq_Mechanics_BreakShieldReset','showPortraits','_helpWindow','enemyHpGaugeRate','updateRefresh','lineHeight','_jumpMaxHeight','statusHelpDesc','removeActor','WaitForEffect','WaitForScale','addBattleGridMoveCommand','visibilityState','uiInputPosition','worldTransform','updateShadow','numberFontFace','optDisplayTp','EnableDamageCap','Window_BattleActor_processTouch','ActorCmd','VisuMZ_4_IconBalloons','Sprite_Battler_updatePosition','isBorderStylePortraitShown','Window_Options_addGeneralOptions','updateAngleCalculations','normalText','selectPreviousCommand','checkAutoCustomActionSequenceNotetagEffect','isFriendly','evalDamageFormula','CheckMapBattleEventValid','animation','%1StartBattleJS','_angleWholeDuration','_angleRevertOnFinish','filterArea','isShownOnBattlePortrait','updatePageButtonVisibility','XPActorDefaultHeight','ActSeq_Movement_HomeMoveBy','ShowWeapon','addedDebuffs','Scene_Battle_createActorCommandWindowIBS','isBattleSys','Game_Action_itemEffectAddNormalState','battleBalloon','occasion','EnemyOffsetX','Game_Action_apply','_immortal','svActorVertCells','ActSeq_Grid_MoveTargetsInDirection','criticalDmgFlat','selectNextCommandTpb','VisuMZ_1_MainMenuCore','constructor','Sprite_Enemy_setBattler','stateColor','Sprite_Actor_initMembers','WaitForAngle','battleSpriteSkew','ActSeq_Weapon_SetActiveWeapon','_commonEventQueue','_damages','registerDefeatedEnemy','canMove','stepBack','compareBattlerSprites','_target','_partyWindow','description','balloonId','arRedFlat','displaySubstitute','isAnyoneChangingOpacity','_battlerContainer','hide','ActSeq_Horror_NoiseRemove','makeHpDamageText','remove','LastSelected','members','createMultiTargetWindow','_statesWindow','retrieveBattleBalloon','pop','ActSeq_Movement_WaitForJump','alterChange','Sprite_Battler_update','commandStyle','powerUpColor','partyCommandWindowRectBorderStyle','stateRate','Window_ActorCommand_setup','AspectNameFmt','createTargetsJS','HelpStatus','Sprite_Enemy_setHue','JS\x20%1END\x20ACTION','States','clamp','action','WaitForJump','isFTB','XPActorCommandLines','HP_Rate','isBuffAffected','HitRate','Skills','AllowCollapse','_buttonKey','displayRemovedStates','svBattlerShadowVisible','isSceneBattle','drawBuffs','meetsUsableItemConditions','createBorderStylePortraitSprite','Game_Action_makeDamageValueDisperse','5415735JUwdmS','ARRAYSTR','totalHealFmt','StateID','ENEMY_OFFSET_Y','drawActorBuffTurns','ForceExploiter','some','cancelTargetSelectionVisibility','initVisibility','measureTextWidth','updateFrame','hpDamage','addOptionsCommand','snapForBackground','ActSeq_Impact_ZoomBlurTargetCenter','drawTurnsRemaining','_stypeIDs','displayEvasion','isCancelTriggered','DualWield','BattleCmdList','updateUiContainerPosition','JS\x20%1DAMAGE\x20%2','getItemDamageAmountLabelBattleCore','drawDarkRect','Linear','ShowMpDmg','startJump','skew','applySoftDamageCap','retreat','updateShakeFlinch','VisuMZ_3_VisualCutinEffect','arRedRate','VisuMZ_4_CombatLog','cameraClamp','resize','CmdTextAutoBattle','_skewEasing','actionSplicePoint','showNormalAnimation','centerFrontViewSprite','rowSpacing','negativeMpLifeSteal','ActSeq_Cutin_WaitForEntrance','angle','svBattlerData','ActSeq_Impact_MotionTrailRemove','getSkillIdWithName','save','PostDamage%1JS','changeCtbChargeTime','Window_BattleLog_displayActionResults','PostDamageAsUserJS','AllActorsText','createLowerLayer','battlerSmoothImage','svBattlerAnchorY','getWtypeIdWithName','isInputting','_actionInputIndex','onHomeMoveEnd','Sprite_Battler_startMove','clearBattleCoreData','ActSeq_Grid_AddPassiveStatesToNode','hitText','TPB','\x5cI[%1]%2','applyGlobalCommonEventNotetags','_blendColor','Sprite_Actor_moveToStartPosition','AggroControlSystem','randomTargets','StatusWindowSkinFilename','CmdIconEscape','bitmapHeight','ActSeq_Grid_AnimationIDAtNode','startAttackWeaponAnimation','sliceMax','refreshRequest','_colorFilter','makeStateHelpText','statusText','addChild','canGuardBattleCore','_opacityDuration','onFloatEnd','_back2Sprite','messageSpeed','buffHelpFmt','turnOrderChangeOTB','increaseHits','addText','fontSize','commandFight','updatePosition','_actorSprites','totalDmgFmt','Direction','return\x200','USER-DEFINED\x203','CmdTextAlign','performCastAnimation','callNextMethod','missed','split','initialize','endAnimation','Game_Action_evalDamageFormula','getBattlePortraitOffsetX','loadWindowskin','DamageRate','OffsetY','drawBattlerData','dead','isBattlerGrounded','Actor-%1-%2','attackAnimationIdSlot','showAnimation','isForRandom','battlerShadowScaleY','FollowTurn','setActiveWeaponSlot','addNewState','PreEndBattleJS','_enemyIDs','_drawTextBody','ActSeq_Animation_GuardAnimation','HpGaugeOffsetX','isSkill','itemLifeStealRate','updateInterpreter','+%1\x20MP','declareGlobalVariables','getItemDamageAmountTextBattleCore','list','skillTypes','refreshCursor','Scene_Battle_createAllWindowsIBS','SkewX','processTurn','skillId','createDigits','Game_Action_makeTargets','ActSeq_Mechanics_BoostPointsChange','_offsetX','isSceneChanging','applyForcedGameTroopSettingsBattleCore','_angleEasing','isSpriteVS8dir','onBattleStart','increaseTotal','Window_BattleLog_performAction','jsAccuracyAsUser','Class-%1-%2','adjustFlippedBattlefield','showHelpWindow','attackMotions','applyHardDamageCap','playSystemSound','isPlaytest','ShowPopup','isAutoBattleCommandAdded','ActSeq_BattleVoice_PlayCommonLine','drawBackgroundRect','itemEffectRecoverMp','closeBattleActorWindow','setFrame','deselect','actorCommandCancelTPB','BackColor','isDrain','alterBreakShield','isAnyoneGrowing','Letter','Spriteset_Battle_createBattleField','Game_BattlerBase_die','updateBossCollapse','paramName','spell','clone','BattleManager_startTurn','setText','Window_BattleLog_performMiss','_enemyWindowMode','targetActionSet','length','_windowLayer','ActSeq_Weapon_ClearActiveWeapon','EasingType','alive\x20friends','processHandling','hue','VoiceLineType','updateEffectsContainer','_createCursorArea','delay','_baseX','isAlive','command301','custom','createActors','status','isBattlerFlipped','4041681xhUvtw','StyleName','targetObject','updateAttachedSprites','Game_Temp_requestAnimation','NO\x20ACTOR\x20FOUND!','startGrow','setLastPluginCommandInterpreter','Game_Troop_expTotal','NameAlwaysHidden','Strength','performActionEnd','_createEffectsContainer','filter','Game_Interpreter_command301','getSpecificBattlerKeyTarget','ActSeq_Motion_MotionType','ActSeq_Movement_FacePoint','ComboWindow_RectJS','shift','inputtingAction','MaxMP','100%','_updateFilterArea','ApplyImmortal','MOTIONS','ForceExploited','ActSeq_Impact_Desaturate','temporaryVisibile','parallaxScrollY','result','Shadow','bitmapWidth','formula','ZZZ','tpbActorSwitchConditionsMet','freezeMotion','_playTestFastMode','onOpacityEnd','portraitFlipVert','isForAnyone','mpHealingFmt','moveBattlerDistance','callOkHandler','MDF','applyArmorModifiers','preparePartyRefresh','setBalloonPose','TimeScale','start','onStaticEnemyBitmapLoad','BattleManager_endBattle','setupZoomBlurImpactFilter','Sprite_Battler_setHome','skewDuration','+%1','_action','VisuMZ_2_BattleSystemCTB','origin','drawParamData','positionOffsetX','isFloating','_lastAction','ColorManager_mpColor','Window_BattleLog_displayEvasion','drawItemImagePortraitStyle','canUse','isPTB','AspectIcon','alive\x20battlers\x20not\x20user','Window_BattleLog_update','itemHeight','processForcedAction','statesWindowRect','indexOf','_effectType','startDamagePopup','_skillWindow','startTpbTurn','onMoveEnd','StyleOFF','changePaintOpacity','VisuMZ_2_BattleSystemFTB','updateKeyboardKeys','autoSelectLastSelected','itemEffectAddNormalState','applyData','Targets2','addGuardCommand','criticalHitFlat','%1EndActionJS','ANNOYED','gaugeRate','CheckSkillCommandShowSwitches','moveToStartPositionBattleCore','makeEscapeRatio','opacity','itemTargetCandidates','executeDamage','_battleCoreBattleStartEvent','chant','Scene_Battle_partyCommandWindowRect','addStateTurns','updateActors','endInBattleStatus','partyCommandWindowRectDefaultStyle','setEnemyWindowMode','updateDuration','drawActorFace','gainFullActionsPTB','popBaseLine','addBattlerAspect','WaitForZoom','sortDamageSprites','BravePoints','hitRate','iterateBattler','addEscapeCommand','current\x20target','createChildSprite','ShowRemovedState','ActSeq_Movement_Spin','_updateCursorFilterArea','_forcedBattlers','jsScaleDown','AutoBattleRect','Game_Action_isForDeadFriend','BindCommonEventKeysForObj','_homeDuration','setBattleImpactTimeScale','gaugeX','addSingleSkillCommand','message4','AllowRandomSpeed','_shadowScaleY','_battleCoreBattleResumeAfter','isDeathStateAffected','ActionStart','_skewWholeDuration','Game_Action_isForOne','exit','getDragonbones','meetsSelectFrontviewActorConditions','HEART','VisuMZ_2_PartySystem','setupBattleCoreAspects','PostRegenerateJS','lifeStealRate','resizeWindowXPStyle','setupFont','DefaultStyle','addedBuffs','BattleManager_selectNextCommand','buffRemove','damagePopupPosition','frontviewSpriteY','drawActorClass','battleZoom','\x5cHEXCOLOR<%1>','%1StartActionJS','isAlwaysVisible','setupBattlebackBattleCore','gaugeBackColor','command301_PreBattleEvent','_mainSprite','onSelectAction','_bypassCanCounterCheck','ActSeq_Horror_GlitchRemove','processDrawEnemyBattler','refresh','finishActionSet','drawActorStateTurns','ParseArmorNotetags','TargetLocation','autoBattleStart','_effectDuration','battleProjectiles','isOptionsCommandEnabled','createActorCommandWindowBattleCore','createPageButtons','executeHpDamage','WaitForEntrance','evade','applyEasing','ActSeq_Mechanics_Collapse','ActSeq_Target_PrevTarget','abort','gaugeLineHeight','Enemy','Sprite_Battler_isMoving','StateIconOffsetX','startWeaponAnimation'];_0x382d=function(){return _0x42fe9e;};return _0x382d();}Window_InBattleStatus[_0xabeb6b(0xc8)]=Object[_0xabeb6b(0xa3b)](Window_StatusBase[_0xabeb6b(0xc8)]),Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x840)]=Window_InBattleStatus,Window_InBattleStatus[_0xabeb6b(0x7fa)]={'bgType':VisuMZ[_0xabeb6b(0x553)]['Settings']['InBattleStatus']['StatusWindow_BgType']??0x0,'statusGraphic':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x709)]??'face','statusHelpDesc':VisuMZ[_0xabeb6b(0x553)]['Settings'][_0xabeb6b(0xa85)][_0xabeb6b(0x869)]??_0xabeb6b(0x594),'pageButtons':VisuMZ['BattleCore'][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x4be)]??!![],'pageButtonPosition':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x446)]??_0xabeb6b(0x3fe),'pageOffsetX':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x1a0)]??0x0,'pageOffsetY':VisuMZ['BattleCore'][_0xabeb6b(0x78f)]['InBattleStatus'][_0xabeb6b(0x23b)]??0x0,'buffValueFmt':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)]['InBattleStatus'][_0xabeb6b(0x23d)]??_0xabeb6b(0x23f),'debuffValueFmt':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x13e)]??_0xabeb6b(0x6ed),'enemyStatus':VisuMZ['BattleCore'][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x46f)]??!![],'enemyShowLevel':VisuMZ[_0xabeb6b(0x553)]['Settings']['InBattleStatus'][_0xabeb6b(0x633)]??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ['BattleCore']['Settings']['InBattleStatus'][_0xabeb6b(0xa8a)]??_0xabeb6b(0x294),'enemyShowParametersAlways':VisuMZ['BattleCore'][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x4cd)]??![],'enemyShowParametersIfBattleTest':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)]['InBattleStatus'][_0xabeb6b(0x419)]??!![],'enemyShowParametersIfDefeated':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x3b2)]??!![]},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x8ea)]=function(_0x52bf1e){const _0x2fb919=_0xabeb6b;Window_StatusBase[_0x2fb919(0xc8)][_0x2fb919(0x8ea)][_0x2fb919(0x378)](this,_0x52bf1e),this[_0x2fb919(0x1a1)](Window_InBattleStatus['SETTINGS'][_0x2fb919(0x4c4)]),this[_0x2fb919(0x67f)](),this['createStatesWindow'](),this[_0x2fb919(0x9ff)]();},Window_InBattleStatus[_0xabeb6b(0xc8)]['setBattler']=function(_0x93f905){const _0x488c13=_0xabeb6b;this[_0x488c13(0x2aa)]=_0x93f905,this[_0x488c13(0x9f5)](),this[_0x488c13(0x85c)]&&this[_0x488c13(0x85c)][_0x488c13(0x2b8)](_0x93f905);},Window_InBattleStatus['prototype']['open']=function(){const _0x51e177=_0xabeb6b;Window_StatusBase['prototype'][_0x51e177(0xaac)]['call'](this);if(this['_statesWindow'])this[_0x51e177(0x85c)]['open']();this[_0x51e177(0x82e)](),Imported[_0x51e177(0x68f)]&&SceneManager[_0x51e177(0x321)](null);},Window_InBattleStatus[_0xabeb6b(0xc8)]['close']=function(){const _0x183199=_0xabeb6b;Window_StatusBase['prototype']['close']['call'](this);if(this[_0x183199(0x85c)])this[_0x183199(0x85c)][_0x183199(0xaba)]();},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x28a)]=function(_0x3c4f1d){const _0x31dd34=_0xabeb6b;this[_0x31dd34(0xdb)]=_0x3c4f1d;},Window_InBattleStatus[_0xabeb6b(0xc8)]['getReturnWindow']=function(){const _0x1eea48=_0xabeb6b;return this['_returnWindow']||SceneManager[_0x1eea48(0x483)][_0x1eea48(0x84e)];},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0xa9c)]=function(){const _0x373653=_0xabeb6b;Window_StatusBase['prototype'][_0x373653(0xa9c)][_0x373653(0x378)](this),this[_0x373653(0xac5)]();},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0xac5)]=function(){const _0x32b424=_0xabeb6b;for(const _0xd82ea2 of $gameParty[_0x32b424(0x85a)]()){if(!_0xd82ea2)continue;_0xd82ea2[_0x32b424(0xb97)]()&&ImageManager[_0x32b424(0x2ea)](_0xd82ea2['characterName']()),_0xd82ea2[_0x32b424(0xff)]()&&ImageManager[_0x32b424(0x5c2)](_0xd82ea2[_0x32b424(0xff)]()),_0xd82ea2[_0x32b424(0xa3f)]&&ImageManager[_0x32b424(0x383)](_0xd82ea2[_0x32b424(0xa3f)]());}},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x67f)]=function(){const _0x4a4256=_0xabeb6b;this[_0x4a4256(0x297)]=new Sprite(),this['_enemySprite'][_0x4a4256(0xb3e)]['x']=0.5,this[_0x4a4256(0x297)][_0x4a4256(0xb3e)]['y']=0x1,this[_0x4a4256(0x8d3)](this[_0x4a4256(0x297)]);},Window_InBattleStatus[_0xabeb6b(0xc8)]['createStatesWindow']=function(){const _0x2fb637=_0xabeb6b,_0x25c4f0=this[_0x2fb637(0x995)](),_0xf7dba0=new Window_InBattleStatusStates(_0x25c4f0);this[_0x2fb637(0x8d3)](_0xf7dba0),_0xf7dba0[_0x2fb637(0x648)](SceneManager[_0x2fb637(0x483)]['_helpWindow']),this[_0x2fb637(0x85c)]=_0xf7dba0;},Window_InBattleStatus[_0xabeb6b(0xc8)]['statesWindowRect']=function(){const _0x474db5=_0xabeb6b,_0x4bd30e=Window_InBattleStatusStates['SETTINGS'][_0x474db5(0x36f)],_0x7b700b=Math[_0x474db5(0x1be)](_0x4bd30e,Math[_0x474db5(0x108)](this[_0x474db5(0x461)]/0x2)),_0x50cb52=Graphics[_0x474db5(0x143)]>0x44c?this[_0x474db5(0x1ee)]:this['lineHeight']()*0x4+this[_0x474db5(0xa3c)]*0x2,_0x2c23ad=this['width']-_0x7b700b,_0x31eed8=this['height']-_0x50cb52;return new Rectangle(_0x2c23ad,_0x31eed8,_0x7b700b,_0x50cb52);},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x9ff)]=function(){const _0x5af7a1=_0xabeb6b;if(!ConfigManager[_0x5af7a1(0x10f)])return;if(!Window_InBattleStatus[_0x5af7a1(0x7fa)][_0x5af7a1(0x4be)])return;this[_0x5af7a1(0xabc)]=new Sprite_Button(_0x5af7a1(0x44f)),this[_0x5af7a1(0xabc)]['x']=this[_0x5af7a1(0xbcd)]()+Window_InBattleStatus[_0x5af7a1(0x7fa)][_0x5af7a1(0x1a0)],this['_pageupButton']['y']=this['pageButtonY']()+Window_InBattleStatus['SETTINGS'][_0x5af7a1(0x23b)];const _0x591803=this['_pageupButton']['x']+this[_0x5af7a1(0xabc)][_0x5af7a1(0x461)];this['_pagedownButton']=new Sprite_Button(_0x5af7a1(0x744)),this[_0x5af7a1(0x4f8)]['x']=_0x591803+0x4,this['_pagedownButton']['y']=this[_0x5af7a1(0xabc)]['y'],this['addChild'](this[_0x5af7a1(0xabc)]),this['addChild'](this['_pagedownButton']),this[_0x5af7a1(0xabc)][_0x5af7a1(0x2c6)](this[_0x5af7a1(0xb1e)][_0x5af7a1(0xa39)](this)),this['_pagedownButton'][_0x5af7a1(0x2c6)](this[_0x5af7a1(0x1f2)][_0x5af7a1(0xa39)](this));},Window_InBattleStatus[_0xabeb6b(0xc8)]['pageButtonX']=function(){const _0x47ba02=_0xabeb6b;if(Graphics[_0x47ba02(0x143)]>0x44c&&Graphics[_0x47ba02(0x588)]>0x2bc){if(Window_InBattleStatus['SETTINGS'][_0x47ba02(0x446)]===_0x47ba02(0x3fe)){let _0x49b3d4=Math[_0x47ba02(0x534)]((-this['x']-0x64)/0x2);if(_0x49b3d4>=-0x64)_0x49b3d4=this[_0x47ba02(0xa3c)];return _0x49b3d4;}else{const _0x317fd8=Graphics[_0x47ba02(0x143)]-this['x']-this[_0x47ba02(0x461)];let _0x478cc9=Math['floor']((_0x317fd8-0x64)/0x2)+this['width'];return _0x478cc9;}}else return this[_0x47ba02(0x461)]-0x64-this[_0x47ba02(0xa3c)]/0x2;},Window_InBattleStatus['prototype'][_0xabeb6b(0xab4)]=function(){const _0x1b5845=_0xabeb6b;return Graphics[_0x1b5845(0x143)]>0x44c&&Graphics[_0x1b5845(0x588)]>0x2bc?this[_0x1b5845(0x1ee)]-0x30-this[_0x1b5845(0xa3c)]:0x30+this[_0x1b5845(0xa3c)];},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0xb1e)]=function(){const _0x46deba=_0xabeb6b;let _0x541f77=this[_0x46deba(0x248)]();if(_0x541f77[_0x46deba(0x93a)]<=0x1&&!Window_InBattleStatus[_0x46deba(0x7fa)][_0x46deba(0x46f)])return;let _0x54835f=_0x541f77[_0x46deba(0x996)](this[_0x46deba(0x2aa)]);_0x54835f--;_0x54835f<0x0&&(Window_InBattleStatus[_0x46deba(0x7fa)][_0x46deba(0x46f)]&&(_0x541f77=this[_0x46deba(0x248)](!![])),_0x54835f=_0x541f77[_0x46deba(0x93a)]-0x1);const _0x4a69f1=_0x541f77[_0x54835f];this[_0x46deba(0x2b8)](_0x4a69f1),SoundManager[_0x46deba(0x1f5)]();},Window_InBattleStatus['prototype']['nextActor']=function(){const _0x3d1be5=_0xabeb6b;let _0x318c35=this['getBattleMembers']();if(_0x318c35[_0x3d1be5(0x93a)]<=0x1&&!Window_InBattleStatus[_0x3d1be5(0x7fa)][_0x3d1be5(0x46f)])return;let _0x1dd52e=_0x318c35[_0x3d1be5(0x996)](this[_0x3d1be5(0x2aa)]);_0x1dd52e++;_0x1dd52e>=_0x318c35[_0x3d1be5(0x93a)]&&(Window_InBattleStatus[_0x3d1be5(0x7fa)][_0x3d1be5(0x46f)]&&(_0x318c35=this[_0x3d1be5(0x248)](!![])),_0x1dd52e=0x0);const _0x356496=_0x318c35[_0x1dd52e];this[_0x3d1be5(0x2b8)](_0x356496),SoundManager[_0x3d1be5(0x1f5)]();},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x248)]=function(_0x2d98d1){const _0x3692a9=_0xabeb6b;let _0x5ca507=[];const _0x196b80=_0x2d98d1?this[_0x3692a9(0x2aa)][_0x3692a9(0xb00)]():this[_0x3692a9(0x2aa)][_0x3692a9(0xa4a)]();return _0x196b80===$gameParty?_0x5ca507=$gameParty['battleMembers']():_0x5ca507=$gameTroop[_0x3692a9(0x120)](),_0x5ca507[_0x3692a9(0x858)](null);},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x5bc)]=function(){const _0x3e1c75=_0xabeb6b;Window_Base[_0x3e1c75(0xc8)][_0x3e1c75(0x5bc)][_0x3e1c75(0x378)](this),this[_0x3e1c75(0x93f)]();},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x93f)]=function(){const _0x4b5f70=_0xabeb6b;if(this[_0x4b5f70(0xaa2)]()){if(this[_0x4b5f70(0x892)]())return this['processCancel']();if(Input[_0x4b5f70(0x4f0)](_0x4b5f70(0x20e)))return this[_0x4b5f70(0x1f2)]();if(Input['isRepeated']('left'))return this[_0x4b5f70(0xb1e)]();}},SoundManager[_0xabeb6b(0x1f5)]=function(){const _0x28e997=_0xabeb6b;this[_0x28e997(0x91f)](0x0);},Window_InBattleStatus['prototype'][_0xabeb6b(0xaa2)]=function(){const _0x1cde94=_0xabeb6b;return this[_0x1cde94(0x3fd)]()&&this['visible'];},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x892)]=function(){const _0x3e312c=_0xabeb6b;if(Input[_0x3e312c(0x6c7)]('cancel'))return!![];if(TouchInput[_0x3e312c(0x51a)]())return!![];return![];},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0xbb0)]=function(){const _0x4e7300=_0xabeb6b;SoundManager[_0x4e7300(0x7f6)](),this[_0x4e7300(0xa15)](),this[_0x4e7300(0x85c)]&&(this['_statesWindow'][_0x4e7300(0x928)](),this['_statesWindow'][_0x4e7300(0xa15)]()),SceneManager[_0x4e7300(0x483)][_0x4e7300(0x9b4)]();},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x82e)]=function(){const _0x3305d0=_0xabeb6b;if(!this[_0x3305d0(0xabc)])return;if(!this[_0x3305d0(0x4f8)])return;const _0x35fa32=$gameParty[_0x3305d0(0x786)]()[_0x3305d0(0x93a)]>0x0||Window_InBattleStatus[_0x3305d0(0x7fa)][_0x3305d0(0x46f)];this[_0x3305d0(0xabc)][_0x3305d0(0xbc2)]=_0x35fa32,this[_0x3305d0(0x4f8)][_0x3305d0(0xbc2)]=_0x35fa32;},Window_InBattleStatus['prototype'][_0xabeb6b(0x9f5)]=function(){const _0x182d38=_0xabeb6b;Window_StatusBase[_0x182d38(0xc8)]['refresh'][_0x182d38(0x378)](this);if(this[_0x182d38(0x297)])this[_0x182d38(0x297)]['hide']();this[_0x182d38(0x7a0)][_0x182d38(0x500)](),this[_0x182d38(0x4c1)][_0x182d38(0x500)]();if(!this['_battler'])return;this[_0x182d38(0x8f1)]();},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x8f1)]=function(){const _0x5fe379=_0xabeb6b;if(VisuMZ[_0x5fe379(0x553)]['Settings'][_0x5fe379(0xa85)]['StatusWindow_DrawJS'])return VisuMZ[_0x5fe379(0x553)]['Settings']['InBattleStatus'][_0x5fe379(0x712)][_0x5fe379(0x378)](this);{const _0x48000e=this['colSpacing']()/0x2,_0x137f84=ImageManager[_0x5fe379(0x7af)],_0x4fec63=_0x137f84/0x2-this['lineHeight']()*1.5;this[_0x5fe379(0xb96)](this[_0x5fe379(0x2aa)],_0x48000e+0x1,0x0,ImageManager[_0x5fe379(0x5cf)],_0x137f84),this[_0x5fe379(0x7cb)](this[_0x5fe379(0x2aa)],_0x48000e+0xb4,_0x4fec63);}{let _0x4acdca=this[_0x5fe379(0x3da)](),_0x254fec=0x0,_0x5e0524=Math[_0x5fe379(0x534)](this[_0x5fe379(0x3da)]()/0x2),_0x521a32=0x0;const _0x4cbb79=this[_0x5fe379(0x232)]();let _0x114434=_0x254fec;const _0x2c67f1=this[_0x5fe379(0x289)]-ImageManager['faceHeight'],_0x45f88f=Math[_0x5fe379(0x534)](_0x4cbb79[_0x5fe379(0x93a)]/0x2)*this[_0x5fe379(0x80d)]();let _0x174b4e=Math[_0x5fe379(0x534)]((_0x2c67f1-_0x45f88f)/0x2)+ImageManager[_0x5fe379(0x7af)],_0x56666c=Math[_0x5fe379(0x108)](_0x4acdca/0x2);this['_statesWindow']['y']!==0x0&&(this[_0x5fe379(0x85c)]['y']=_0x174b4e);for(const _0x10f077 of _0x4cbb79){this['drawDarkRect'](_0x114434,_0x174b4e,_0x56666c,this['lineHeight']()),this[_0x5fe379(0x987)](_0x10f077,_0x114434,_0x174b4e,_0x56666c),_0x521a32++,_0x521a32%0x2===0x0?(_0x114434=_0x254fec,_0x174b4e+=this['lineHeight']()):_0x114434=_0x5e0524;}}},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0xb45)]=function(){const _0x2360e4=_0xabeb6b;return VisuMZ['BattleCore'][_0x2360e4(0x78f)][_0x2360e4(0xa85)]['StatusGraphic'];},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0xb96)]=function(_0x1ba0a9,_0x42b74f,_0xcdf859,_0x3ea5be,_0x7ecb45){const _0x40f5d5=_0xabeb6b;if(_0x1ba0a9[_0x40f5d5(0xb6a)]())switch(this[_0x40f5d5(0xb45)]()){case _0x40f5d5(0xa1e):break;case'sprite':this[_0x40f5d5(0x634)](_0x1ba0a9,_0x42b74f,_0xcdf859+0x1,_0x3ea5be,_0x7ecb45-0x2);break;case'svbattler':this[_0x40f5d5(0x3bc)](_0x1ba0a9,_0x42b74f,_0xcdf859+0x1,_0x3ea5be,_0x7ecb45-0x2);break;default:this['drawItemActorFace'](_0x1ba0a9,_0x42b74f,_0xcdf859,_0x3ea5be,_0x7ecb45);break;}else this['drawEnemyBattler'](_0x1ba0a9,_0x42b74f,_0xcdf859,_0x3ea5be,_0x7ecb45);},Window_InBattleStatus['prototype']['drawItemActorFace']=function(_0x4af1b8,_0x189b90,_0x31f6ff,_0x452dbe,_0x589826){const _0x4d8199=_0xabeb6b;_0x452dbe=_0x452dbe||ImageManager[_0x4d8199(0x5cf)],_0x589826=_0x589826||ImageManager[_0x4d8199(0x7af)];const _0x5df45c=ImageManager[_0x4d8199(0x5cf)],_0x40b613=_0x589826-0x2,_0x13b6ef=_0x189b90+Math['floor']((_0x452dbe-_0x5df45c)/0x2);this[_0x4d8199(0x840)]===Window_MenuStatus&&this[_0x4d8199(0x99d)](_0x4af1b8['isBattleMember']()),this[_0x4d8199(0x9b8)](_0x4af1b8,_0x13b6ef,_0x31f6ff,_0x5df45c,_0x40b613),this[_0x4d8199(0x99d)](!![]);},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x634)]=function(_0xccd7c0,_0x8eeae5,_0x1ccdb6,_0x293707,_0x18e305){const _0x2c7906=_0xabeb6b;_0x293707=_0x293707||ImageManager[_0x2c7906(0x5cf)],_0x18e305=_0x18e305||ImageManager[_0x2c7906(0x7af)];const _0x315561=_0xccd7c0[_0x2c7906(0xb97)](),_0x564723=_0xccd7c0[_0x2c7906(0x73c)](),_0x2ac8cf=ImageManager[_0x2c7906(0x2ea)](_0x315561),_0x4fa218=ImageManager[_0x2c7906(0xb8)](_0x315561),_0x48db9a=_0x2ac8cf[_0x2c7906(0x461)]/(_0x4fa218?0x3:0xc),_0x5be192=_0x2ac8cf[_0x2c7906(0x1ee)]/(_0x4fa218?0x4:0x8),_0x3a6485=_0x293707,_0x4c02ae=_0x18e305-0x2,_0x53ba04=_0x8eeae5+Math[_0x2c7906(0x108)](_0x3a6485/0x2),_0x3f6374=_0x1ccdb6+Math[_0x2c7906(0x534)]((_0x18e305+_0x5be192)/0x2);this[_0x2c7906(0x840)]===Window_MenuStatus&&this[_0x2c7906(0x99d)](_0xccd7c0[_0x2c7906(0x667)]());const _0x5e92b4=Math[_0x2c7906(0x1be)](_0x293707,_0x48db9a),_0x4ced45=Math[_0x2c7906(0x1be)](_0x18e305,_0x5be192),_0x2769cd=Math[_0x2c7906(0x108)](_0x8eeae5+Math['max'](_0x293707-_0x48db9a,0x0)/0x2),_0x3135b0=Math[_0x2c7906(0x108)](_0x1ccdb6+Math[_0x2c7906(0xb72)](_0x18e305-_0x5be192,0x0)/0x2),_0x4281c8=_0x4fa218?0x0:_0x564723,_0x41fb82=(_0x4281c8%0x4*0x3+0x1)*_0x48db9a,_0x2c591e=Math[_0x2c7906(0x108)](_0x4281c8/0x4)*0x4*_0x5be192;this[_0x2c7906(0x7a0)]['blt'](_0x2ac8cf,_0x41fb82,_0x2c591e,_0x5e92b4,_0x4ced45,_0x2769cd,_0x3135b0),this[_0x2c7906(0x99d)](!![]);},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x3bc)]=function(_0x10bd2d,_0x5f26aa,_0x6fcd3e,_0x2e854b,_0x9dfadc,_0x5e6270){const _0x122ad1=_0xabeb6b;_0x2e854b=_0x2e854b||ImageManager[_0x122ad1(0x5cf)],_0x9dfadc=_0x9dfadc||ImageManager[_0x122ad1(0x7af)];const _0x1f8173=ImageManager[_0x122ad1(0x5c2)](_0x5e6270?_0x10bd2d[_0x122ad1(0x6bd)]():_0x10bd2d[_0x122ad1(0xff)]()),_0x2a6a19=_0x1f8173[_0x122ad1(0x461)]/ImageManager[_0x122ad1(0x6f9)],_0x147431=_0x1f8173['height']/ImageManager[_0x122ad1(0x83b)],_0x1f9185=_0x2e854b,_0x7d1e87=_0x9dfadc-0x2,_0x5a2ca8=_0x5f26aa+Math[_0x122ad1(0x108)](_0x1f9185/0x2),_0x5145c9=_0x6fcd3e+Math[_0x122ad1(0x534)]((_0x9dfadc+_0x147431)/0x2);this[_0x122ad1(0x840)]===Window_MenuStatus&&this[_0x122ad1(0x99d)](_0x10bd2d[_0x122ad1(0x667)]());const _0x9c953c=_0x10bd2d[_0x122ad1(0x3dc)]&&_0x10bd2d[_0x122ad1(0x3dc)](),_0x268b7a=0x0,_0xf061d6=0x0,_0x4321cc=_0x9c953c?_0x1f8173[_0x122ad1(0x461)]:_0x2a6a19,_0x2e4a16=_0x9c953c?_0x1f8173['height']:_0x147431,_0x197c75=Math[_0x122ad1(0x1be)](0x1,_0x2e854b/_0x4321cc,_0x9dfadc/_0x2e4a16),_0xeeed6=_0x197c75*_0x4321cc,_0x201380=_0x197c75*_0x2e4a16,_0x48c845=Math[_0x122ad1(0x108)](_0x5f26aa+Math[_0x122ad1(0xb72)](_0x2e854b-_0xeeed6,0x0)/0x2),_0x2d3272=Math[_0x122ad1(0x108)](_0x6fcd3e+Math[_0x122ad1(0xb72)](_0x9dfadc-_0x201380,0x0)/0x2);this['contents'][_0x122ad1(0xa51)](_0x1f8173,_0x268b7a,_0xf061d6,_0x4321cc,_0x2e4a16,_0x48c845,_0x2d3272,_0xeeed6,_0x201380),this[_0x122ad1(0x99d)](!![]);},Window_InBattleStatus[_0xabeb6b(0xc8)]['drawEnemyBattler']=function(_0x4eb0e4,_0x1e45b1,_0x4980fe,_0x3d111b,_0x3dc2be){const _0x151c91=_0xabeb6b;if(_0x4eb0e4[_0x151c91(0x5dc)]()){this['drawItemActorSvBattler'](_0x4eb0e4,_0x1e45b1,_0x4980fe+0x1,_0x3d111b,_0x3dc2be-0x2,!![]);return;}const _0x3c517e=_0x4eb0e4['battlerName'](),_0x49aee8=$gameSystem[_0x151c91(0x4d5)]()?ImageManager[_0x151c91(0xa95)](_0x3c517e):ImageManager[_0x151c91(0x2db)](_0x3c517e);_0x49aee8[_0x151c91(0x642)](this[_0x151c91(0x9f4)][_0x151c91(0xa39)](this,_0x4eb0e4,_0x49aee8,_0x1e45b1,_0x4980fe,_0x3d111b,_0x3dc2be));},Window_InBattleStatus[_0xabeb6b(0xc8)]['processDrawEnemyBattler']=function(_0x3c899c,_0x2ea37c,_0x4827e7,_0x4255aa,_0x41380a,_0x615d75){const _0x431494=_0xabeb6b;if(this['_battler']!==_0x3c899c)return;this['_enemySprite'][_0x431494(0x6eb)](),this[_0x431494(0x297)][_0x431494(0xac0)]=new Bitmap(_0x41380a,_0x615d75);const _0x1a2242=_0x41380a,_0xaf4f53=_0x615d75,_0x5b0d26=Math[_0x431494(0x1be)](_0x1a2242,_0xaf4f53),_0x5c41aa=this[_0x431494(0x297)][_0x431494(0xac0)],_0x349c54=Math[_0x431494(0x1be)](0x1,_0x5b0d26/_0x2ea37c[_0x431494(0x461)],_0x5b0d26/_0x2ea37c['height']),_0x176083=_0x2ea37c[_0x431494(0x461)]*_0x349c54,_0x27e6bb=_0x2ea37c[_0x431494(0x1ee)]*_0x349c54,_0x1b6049=Math[_0x431494(0xb36)]((_0x1a2242-_0x176083)/0x2),_0x29b4a7=Math[_0x431494(0xb36)]((_0xaf4f53-_0x27e6bb)/0x2);_0x5c41aa[_0x431494(0xa51)](_0x2ea37c,0x0,0x0,_0x2ea37c[_0x431494(0x461)],_0x2ea37c[_0x431494(0x1ee)],_0x1b6049,_0x29b4a7,_0x176083,_0x27e6bb),this[_0x431494(0x297)][_0x431494(0xb3e)]['x']=0.5,this[_0x431494(0x297)][_0x431494(0xb3e)]['y']=0x1,this[_0x431494(0x297)]['x']=_0x4827e7+_0x41380a/0x2+this[_0x431494(0xa3c)],this[_0x431494(0x297)]['y']=_0x4255aa+_0x615d75+this[_0x431494(0xa3c)],this[_0x431494(0x297)][_0x431494(0x3e9)](this['_battler']['battlerHue']());},Window_InBattleStatus['prototype']['drawActorName']=function(_0x3087ac,_0x6a14a5,_0x386ef1,_0x4e4b2f){const _0x295a2a=_0xabeb6b;if(_0x3087ac[_0x295a2a(0x54b)]())_0x4e4b2f=this[_0x295a2a(0x62f)]-_0x6a14a5;Window_StatusBase[_0x295a2a(0xc8)][_0x295a2a(0x564)][_0x295a2a(0x378)](this,_0x3087ac,_0x6a14a5,_0x386ef1,_0x4e4b2f);},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x9e8)]=function(_0x476231,_0x3ffc9a,_0xab2d20,_0x1ca697){const _0x43dc4a=_0xabeb6b;if(!_0x476231[_0x43dc4a(0xb6a)]())return;Window_StatusBase['prototype'][_0x43dc4a(0x9e8)][_0x43dc4a(0x378)](this,_0x476231,_0x3ffc9a,_0xab2d20,_0x1ca697);},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x40f)]=function(_0x1df8b1,_0x19366f,_0x5128ac){const _0x4b3b67=_0xabeb6b;if(_0x1df8b1[_0x4b3b67(0x54b)]()&&!Window_InBattleStatus[_0x4b3b67(0x7fa)][_0x4b3b67(0x633)])return;Window_StatusBase[_0x4b3b67(0xc8)][_0x4b3b67(0x40f)][_0x4b3b67(0x378)](this,_0x1df8b1,_0x19366f,_0x5128ac);},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x5dd)]=function(_0xce4816,_0x1ed9cf,_0x4800db,_0x4f2fff){const _0x5f19a8=_0xabeb6b;_0xce4816[_0x5f19a8(0xadb)]=!![],Window_StatusBase['prototype']['drawActorIcons'][_0x5f19a8(0x378)](this,_0xce4816,_0x1ed9cf,_0x4800db,_0x4f2fff),_0xce4816['_hideAllIcons']=undefined;},VisuMZ['BattleCore'][_0xabeb6b(0x119)]=Game_BattlerBase[_0xabeb6b(0xc8)][_0xabeb6b(0x41f)],Game_BattlerBase['prototype'][_0xabeb6b(0x41f)]=function(){const _0xe12028=_0xabeb6b;if(this[_0xe12028(0xadb)])return[];return VisuMZ[_0xe12028(0x553)][_0xe12028(0x119)][_0xe12028(0x378)](this);},Window_InBattleStatus[_0xabeb6b(0xc8)]['placeGauge']=function(_0x151d0f,_0x3698eb,_0x381bae,_0x3eaf65){const _0x32daf3=_0xabeb6b,_0x3d2b49='actor%1-gauge-%2'[_0x32daf3(0x782)](_0x151d0f[_0x32daf3(0x5ce)](),_0x3698eb);let _0x1e4a2f=![];if(_0x151d0f['isEnemy']()){const _0x4f7685=Window_InBattleStatus[_0x32daf3(0x7fa)];if(_0x3698eb==='hp'&&_0x4f7685[_0x32daf3(0x80b)])_0x1e4a2f=!![];if(_0x3698eb==='mp'&&_0x4f7685[_0x32daf3(0x390)])_0x1e4a2f=!![];if(_0x3698eb==='tp'&&_0x4f7685[_0x32daf3(0x6b1)])_0x1e4a2f=!![];}const _0x2f5898=this[_0x32daf3(0x78c)](_0x3d2b49,_0x1e4a2f?Sprite_GaugeRate:Sprite_Gauge);_0x2f5898[_0x32daf3(0x3a5)](_0x151d0f,_0x3698eb),_0x2f5898['move'](_0x381bae,_0x3eaf65),_0x2f5898[_0x32daf3(0x6eb)]();},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x3da)]=function(){const _0x4f425f=_0xabeb6b,_0x44dce6=this[_0x4f425f(0x85c)]?this['_statesWindow']['width']:0x0;return this[_0x4f425f(0x62f)]-_0x44dce6+this[_0x4f425f(0xa3c)]*0x2;},Window_InBattleStatus[_0xabeb6b(0xc8)]['displayedParams']=function(){const _0x28e088=_0xabeb6b;return Imported[_0x28e088(0x765)]?VisuMZ['CoreEngine'][_0x28e088(0x78f)][_0x28e088(0xa94)][_0x28e088(0x7fc)]:[_0x28e088(0xbbf),_0x28e088(0x961),_0x28e088(0x270),_0x28e088(0xb4a),'MAT','MDF','AGI',_0x28e088(0xa68)];},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x987)]=function(_0x36c068,_0x2fee72,_0xcb21d5,_0xdbd1f6){const _0x2db3ee=_0xabeb6b,_0x343342=Window_InBattleStatus[_0x2db3ee(0x7fa)],_0x5ef05f=Imported['VisuMZ_0_CoreEngine'];this[_0x2db3ee(0x493)]();let _0x4b41b1='',_0x1e677d=0x0,_0x524955=['MAXHP',_0x2db3ee(0xb8d),'ATK',_0x2db3ee(0xb4a),'MAT',_0x2db3ee(0x978),'AGI',_0x2db3ee(0xa68)][_0x2db3ee(0x996)](String(_0x36c068)[_0x2db3ee(0xf8)]()[_0x2db3ee(0xd3)]());if(_0x5ef05f)_0x4b41b1=TextManager[_0x2db3ee(0x932)](_0x36c068),_0x1e677d=VisuMZ[_0x2db3ee(0x6d9)](_0x36c068);else{if(_0x524955>=0x0&&_0x524955<0x8)_0x4b41b1=TextManager[_0x2db3ee(0x624)](_0x524955);}if(_0x524955>=0x0&&_0x524955<0x8){const _0x2b4362=this[_0x2db3ee(0x2aa)][_0x2db3ee(0x368)][_0x524955];this['_battler'][_0x2db3ee(0x420)](_0x2b4362,_0x524955)!==0x0&&(_0x1e677d=this[_0x2db3ee(0x2aa)][_0x2db3ee(0x420)](_0x2b4362,_0x524955));}if(_0x4b41b1){let _0xb2e0db=_0x2db3ee(0x1b0)[_0x2db3ee(0x782)](_0x4b41b1,_0x1e677d);_0xdbd1f6<=0xd4&&(_0xb2e0db=_0x2db3ee(0x56f)['format'](_0x4b41b1));const _0x4dbdf1=_0xdbd1f6<=0xd4?'\x20':'\x20\x20';this[_0x2db3ee(0x674)](_0x4dbdf1+_0xb2e0db,_0x2fee72,_0xcb21d5);}this['resetTextColor']();let _0x41f171='';_0x5ef05f?_0x41f171=this[_0x2db3ee(0x2aa)]['paramValueByName'](_0x36c068,!![]):_0x41f171=String(this['_battler']['param'](_0x524955));if(this['_battler'][_0x2db3ee(0x54b)]()){let _0x43b5d2=!![];if(_0x343342['enemyShowParametersAlways'])_0x43b5d2=![];if(_0x343342[_0x2db3ee(0x419)]&&BattleManager[_0x2db3ee(0x31e)]())_0x43b5d2=![];if(_0x343342[_0x2db3ee(0x3b2)]&&$gameSystem[_0x2db3ee(0x630)]()[_0x2db3ee(0x5d8)](this[_0x2db3ee(0x2aa)][_0x2db3ee(0x2e1)]()))_0x43b5d2=![];_0x43b5d2&&(_0x41f171=_0x343342['enemyHiddenParameter']);}if(_0x524955>=0x0&&_0x524955<0x8){if(this[_0x2db3ee(0x2aa)][_0x2db3ee(0x4b5)](_0x524955)>0x1)_0x41f171=_0x343342[_0x2db3ee(0x23d)]['format'](_0x41f171),Imported[_0x2db3ee(0x707)]?this['changeTextColor'](ColorManager['buffColor']()):this[_0x2db3ee(0xe9)](ColorManager[_0x2db3ee(0x863)]());else this[_0x2db3ee(0x2aa)][_0x2db3ee(0x4b5)](_0x524955)<0x1&&(_0x41f171=_0x343342[_0x2db3ee(0x13e)][_0x2db3ee(0x782)](_0x41f171),Imported[_0x2db3ee(0x707)]?this[_0x2db3ee(0xe9)](ColorManager[_0x2db3ee(0x37d)]()):this[_0x2db3ee(0xe9)](ColorManager[_0x2db3ee(0x434)]()));}if(String(_0x41f171)){const _0x5cc587=_0xdbd1f6<=0xd4?'\x20':'\x20\x20';this[_0x2db3ee(0x47a)](_0x41f171+_0x5cc587,_0x2fee72,_0xcb21d5,_0xdbd1f6,_0x2db3ee(0x20e));}},Window_InBattleStatus[_0xabeb6b(0xc8)][_0xabeb6b(0x898)]=function(_0x208377,_0x24ba10,_0x1612bd,_0x5a9763){const _0x5ce95b=_0xabeb6b;_0x5a9763=_0x5a9763||this[_0x5ce95b(0x80d)](),this[_0x5ce95b(0x4c1)][_0x5ce95b(0x1bb)]=0xa0;const _0x421c01=ColorManager[_0x5ce95b(0x9ee)]();this['contentsBack']['fillRect'](_0x208377+0x1,_0x24ba10+0x1,_0x1612bd-0x2,_0x5a9763-0x2,_0x421c01),this[_0x5ce95b(0x4c1)][_0x5ce95b(0x1bb)]=0xff;},Game_BattlerBase[_0xabeb6b(0xc8)]['getParamBuffAndStateRate']=function(_0x5813cc){const _0x3342c0=_0xabeb6b;let _0x556101=0x1;_0x556101*=this[_0x3342c0(0xa40)](_0x5813cc);for(const _0x1bc80a of this['states']()){if(!_0x1bc80a)continue;for(const _0x321fb7 of _0x1bc80a[_0x3342c0(0xb20)]){if(!_0x321fb7)continue;if(_0x321fb7[_0x3342c0(0xb65)]!==Game_BattlerBase['TRAIT_PARAM'])continue;if(_0x321fb7[_0x3342c0(0x205)]!==_0x5813cc)continue;_0x556101*=_0x321fb7[_0x3342c0(0x2d9)];}}return _0x556101;};function Window_InBattleStatusStates(){const _0x4e53bc=_0xabeb6b;this[_0x4e53bc(0x8ea)](...arguments);}Window_InBattleStatusStates['prototype']=Object[_0xabeb6b(0xa3b)](Window_Command['prototype']),Window_InBattleStatusStates[_0xabeb6b(0xc8)][_0xabeb6b(0x840)]=Window_InBattleStatusStates,Window_InBattleStatusStates['SETTINGS']={'maxWidth':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)]['statesMaxWidth']??0x180,'drawStates':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x1f9)]??!![],'drawBuffs':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x87b)]??!![],'drawDebuffs':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x38a)]??!![],'normalIcon':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x2bc)]??0x54,'normalText':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)]['normalText']??_0xabeb6b(0x428),'normalHelp':VisuMZ['BattleCore'][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x52b)]??'Status\x20is\x20currently\x20normal.','stateHelpFmt':VisuMZ['BattleCore']['Settings'][_0xabeb6b(0xa85)][_0xabeb6b(0x478)]??_0xabeb6b(0x384),'buffNameFmt':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0xb33)]??_0xabeb6b(0xba5),'buffHelpFmt':VisuMZ['BattleCore'][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)]['buffHelpFmt']??_0xabeb6b(0x4ba),'debuffNameFmt':VisuMZ['BattleCore'][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x214)]??_0xabeb6b(0x5e9),'debuffHelpFmt':VisuMZ[_0xabeb6b(0x553)][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x142)]??_0xabeb6b(0x2c2),'actionsFmt':VisuMZ[_0xabeb6b(0x553)]['Settings'][_0xabeb6b(0xa85)][_0xabeb6b(0xa6b)]??'\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','turnsFmt':VisuMZ['BattleCore'][_0xabeb6b(0x78f)][_0xabeb6b(0xa85)][_0xabeb6b(0x1fc)]??'\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','passiveText':VisuMZ[_0xabeb6b(0x553)]['Settings'][_0xabeb6b(0xa85)][_0xabeb6b(0x746)]??_0xabeb6b(0x58b)},Window_InBattleStatusStates['prototype']['initialize']=function(_0x9d34f5){const _0x37ad9c=_0xabeb6b;this[_0x37ad9c(0x2aa)]=null,Window_Command[_0x37ad9c(0xc8)][_0x37ad9c(0x8ea)][_0x37ad9c(0x378)](this,_0x9d34f5),this['deactivate'](),this[_0x37ad9c(0x928)](),this[_0x37ad9c(0x1a1)](0x2);},Window_InBattleStatusStates['prototype']['setBattler']=function(_0x23ac45){const _0x3d905e=_0xabeb6b;this['_battler']=_0x23ac45||null,this[_0x3d905e(0x9f5)](),this[_0x3d905e(0x57b)](0x0),this[_0x3d905e(0xb8f)](0x0,0x0),this['activate']();},Window_InBattleStatusStates[_0xabeb6b(0xc8)][_0xabeb6b(0x7fe)]=function(){},Window_InBattleStatusStates['prototype'][_0xabeb6b(0x6e4)]=function(){const _0xa7c02c=_0xabeb6b;if(!this[_0xa7c02c(0x2aa)])return;this[_0xa7c02c(0x9bb)](),this['addBattlerStates'](),this[_0xa7c02c(0x304)](),this[_0xa7c02c(0x1a4)]();},Window_InBattleStatusStates[_0xabeb6b(0xc8)]['addBattlerAspect']=function(){const _0x4567e8=_0xabeb6b;if(!this[_0x4567e8(0x2aa)][_0x4567e8(0x54b)]())return;if(!this[_0x4567e8(0x2aa)][_0x4567e8(0xd6)]())return;const _0x58729c=this[_0x4567e8(0x2aa)][_0x4567e8(0x5c7)]()['name'],_0x10801e=this['_battler'][_0x4567e8(0x5c7)]()[_0x4567e8(0xf7)],_0x5bc356=this[_0x4567e8(0x2aa)]['getAspectData']()[_0x4567e8(0x54d)];let _0x13f795='';_0x5bc356[_0x4567e8(0xef)](/#(.*?)/gi)&&Imported[_0x4567e8(0xa2b)]?_0x13f795=_0x4567e8(0x3c3)[_0x4567e8(0x782)](_0x10801e,_0x58729c,_0x5bc356):_0x13f795=_0x4567e8(0x372)[_0x4567e8(0x782)](_0x10801e,_0x58729c,_0x5bc356),this[_0x4567e8(0x33f)](_0x13f795,_0x4567e8(0x325),!![]);},Window_InBattleStatusStates[_0xabeb6b(0xc8)]['addBattlerStates']=function(){const _0xc2a1ef=_0xabeb6b;if(!Window_InBattleStatusStates['SETTINGS'][_0xc2a1ef(0x1f9)])return;for(const _0x1457ef of this['_battler'][_0xc2a1ef(0x4cb)]()){if(!this[_0xc2a1ef(0xbda)](_0x1457ef))continue;const _0xa4251e=this[_0xc2a1ef(0x285)](_0x1457ef);this[_0xc2a1ef(0x33f)](_0xa4251e,_0xc2a1ef(0x3cf),!![],_0x1457ef['id']);}},Window_InBattleStatusStates[_0xabeb6b(0xc8)]['includeState']=function(_0x1c6f1b){const _0x234e7e=_0xabeb6b;if(!_0x1c6f1b)return![];if(_0x1c6f1b['name'][_0x234e7e(0xd3)]()==='')return![];if(_0x1c6f1b[_0x234e7e(0x6e8)][_0x234e7e(0x5d8)](_0x234e7e(0x751)))return![];if(_0x1c6f1b[_0x234e7e(0xf7)]<=0x0)return![];if(_0x1c6f1b[_0x234e7e(0xb14)])return![];return!![];},Window_InBattleStatusStates[_0xabeb6b(0xc8)]['makeStateName']=function(_0x5195b7){const _0x5830de=_0xabeb6b;let _0x233246=_0x5195b7['iconIndex'],_0x4c3b67=_0x5195b7['name'],_0x13da2f='0';return Imported[_0x5830de(0x707)]&&Imported[_0x5830de(0xa2b)]&&(_0x13da2f=String(ColorManager[_0x5830de(0x842)](_0x5195b7))),_0x13da2f['match'](/#(.*?)/gi)?_0x5830de(0x3c3)[_0x5830de(0x782)](_0x233246,_0x4c3b67,_0x13da2f):_0x5830de(0x372)[_0x5830de(0x782)](_0x233246,_0x4c3b67,_0x13da2f);},Window_InBattleStatusStates['prototype']['addBattlerBuffsDebuffs']=function(){const _0xf26704=_0xabeb6b;for(let _0x2e0d40=0x0;_0x2e0d40<0x8;_0x2e0d40++){const _0xabd10a=this[_0xf26704(0xa32)](_0x2e0d40);if(!_0xabd10a)continue;this[_0xf26704(0x33f)](_0xabd10a,_0xf26704(0xa6a),!![],_0x2e0d40);}},Window_InBattleStatusStates[_0xabeb6b(0xc8)]['makeBuffName']=function(_0xb7907a){const _0x2cf145=_0xabeb6b;if(!this['_battler'][_0x2cf145(0x873)](_0xb7907a)&&!this[_0x2cf145(0x2aa)]['isDebuffAffected'](_0xb7907a))return'';const _0x20beb5=Window_InBattleStatusStates['SETTINGS'];if(this['_battler'][_0x2cf145(0x873)](_0xb7907a)&&!_0x20beb5[_0x2cf145(0x87b)])return'';if(this[_0x2cf145(0x2aa)]['isDebuffAffected'](_0xb7907a)&&!_0x20beb5[_0x2cf145(0x38a)])return'';const _0x534c3c=this[_0x2cf145(0x2aa)][_0x2cf145(0x368)][_0xb7907a];let _0x2d683c=this['_battler'][_0x2cf145(0x420)](_0x534c3c,_0xb7907a),_0x211f56=TextManager[_0x2cf145(0x624)](_0xb7907a);_0x534c3c>0x0?_0x211f56=_0x20beb5[_0x2cf145(0xb33)]['format'](_0x211f56):_0x211f56=_0x20beb5['debuffNameFmt']['format'](_0x211f56);let _0x357df8=0x0;return Imported[_0x2cf145(0x707)]&&(_0x357df8=_0x534c3c>0x0?ColorManager[_0x2cf145(0x6cc)]():ColorManager['debuffColor']()),String(_0x357df8)['match'](/#(.*?)/gi)?_0x2cf145(0x3c3)[_0x2cf145(0x782)](_0x2d683c,_0x211f56,_0x357df8):'\x5cI[%1]\x5cC[%3]%2'[_0x2cf145(0x782)](_0x2d683c,_0x211f56,_0x357df8);},Window_InBattleStatusStates[_0xabeb6b(0xc8)][_0xabeb6b(0x1a4)]=function(){const _0x8f2091=_0xabeb6b;if(this[_0x8f2091(0xac2)][_0x8f2091(0x93a)]>0x0)return;const _0x4762fc=Window_InBattleStatusStates[_0x8f2091(0x7fa)],_0x6b5edd=_0x4762fc[_0x8f2091(0x2bc)],_0x267d48=_0x4762fc[_0x8f2091(0x822)],_0x4237f9=_0x8f2091(0x8c3)[_0x8f2091(0x782)](_0x6b5edd,_0x267d48);this[_0x8f2091(0x33f)](_0x4237f9,_0x8f2091(0x747));},Window_InBattleStatusStates[_0xabeb6b(0xc8)]['drawItem']=function(_0x5c2bbf){const _0xf0215c=_0xabeb6b,_0x3633ba=this[_0xf0215c(0xab0)](_0x5c2bbf);this[_0xf0215c(0x99d)](0xff),this[_0xf0215c(0x674)](this[_0xf0215c(0x76e)](_0x5c2bbf),_0x3633ba['x'],_0x3633ba['y']),this['drawTurnsRemaining'](_0x5c2bbf,_0x3633ba);},Window_InBattleStatusStates['prototype'][_0xabeb6b(0x88f)]=function(_0x4e8c5b,_0x5435c6){const _0x10613b=_0xabeb6b;if(!Imported[_0x10613b(0x707)])return;const _0x39b411=this['commandSymbol'](_0x4e8c5b),_0x1ef590=_0x5435c6['x']+0x2;if(_0x39b411===_0x10613b(0x3cf)){const _0x83c45a=$dataStates[this[_0x10613b(0xac2)][_0x4e8c5b]['ext']||0x0];this[_0x10613b(0x9f7)](this[_0x10613b(0x2aa)],_0x83c45a,_0x1ef590,_0x5435c6['y']),this['drawActorStateData'](this[_0x10613b(0x2aa)],_0x83c45a,_0x1ef590,_0x5435c6['y']);}else{if(_0x39b411===_0x10613b(0xa6a)){const _0x20e4d1=this[_0x10613b(0xac2)][_0x4e8c5b][_0x10613b(0x3b7)];this[_0x10613b(0x884)](this[_0x10613b(0x2aa)],_0x20e4d1,_0x1ef590,_0x5435c6['y']),this[_0x10613b(0x6d1)](this[_0x10613b(0x2aa)],_0x20e4d1,_0x1ef590,_0x5435c6['y']);}}},Window_InBattleStatusStates[_0xabeb6b(0xc8)]['updateHelp']=function(){const _0x2c815d=_0xabeb6b,_0x46c672=this[_0x2c815d(0xb49)]();let _0x43931d='';if(_0x46c672===_0x2c815d(0x325))_0x43931d=this[_0x2c815d(0x2aa)][_0x2c815d(0x5c7)]()[_0x2c815d(0x84f)];else{if(_0x46c672===_0x2c815d(0x3cf))_0x43931d=this[_0x2c815d(0x8d1)]();else{if(_0x46c672===_0x2c815d(0xa6a))_0x43931d=this[_0x2c815d(0x50a)]();else _0x46c672===_0x2c815d(0x747)&&(_0x43931d=Window_InBattleStatusStates[_0x2c815d(0x7fa)][_0x2c815d(0x52b)]);}}_0x43931d?this[_0x2c815d(0x80a)][_0x2c815d(0x936)](_0x43931d):this['_helpWindow']['clear']();},Window_InBattleStatusStates['prototype']['makeStateHelpText']=function(){const _0x164f1f=_0xabeb6b,_0x4bf9ee=Window_InBattleStatusStates[_0x164f1f(0x7fa)],_0x4f87ac=this[_0x164f1f(0x5d6)]();let _0x4b3e56='';const _0x52518c=$dataStates[_0x4f87ac]||null;if(_0x52518c){const _0xbd47d=_0x4bf9ee[_0x164f1f(0x478)];let _0x4f17a4=_0x52518c['statusDescription']||_0x52518c[_0x164f1f(0x84f)]||'';Imported[_0x164f1f(0x707)]&&(_0x4f17a4=_0x4f17a4['format'](this[_0x164f1f(0x2aa)]['getStateDisplay'](_0x4f87ac)));let _0x57ee32='passive';if(this[_0x164f1f(0x2aa)][_0x164f1f(0x4f2)](_0x4f87ac)){if(_0x52518c['autoRemovalTiming']===0x0)_0x57ee32=_0x164f1f(0xa1e);if(_0x52518c[_0x164f1f(0x55e)]===0x1)_0x57ee32=_0x164f1f(0x6a4);if(_0x52518c[_0x164f1f(0x55e)]===0x2)_0x57ee32=_0x164f1f(0x57c);}const _0x536378=this[_0x164f1f(0x2aa)][_0x164f1f(0x2f7)][_0x4f87ac]||0x0;let _0x341630=_0x164f1f(0xb82);Imported[_0x164f1f(0x707)]&&Imported['VisuMZ_1_MessageCore']&&(_0x341630=ColorManager[_0x164f1f(0x842)](_0x52518c),_0x341630[_0x164f1f(0xef)](/#(.*?)/gi)?_0x341630=_0x164f1f(0x9ea)[_0x164f1f(0x782)](_0x341630):_0x341630=_0x164f1f(0x790)[_0x164f1f(0x782)](_0x341630)),_0x4b3e56=_0xbd47d['format'](_0x4f17a4,this[_0x164f1f(0xa80)](_0x57ee32,_0x536378,_0x341630));}return _0x4b3e56;},Window_InBattleStatusStates[_0xabeb6b(0xc8)][_0xabeb6b(0x50a)]=function(){const _0x580f0e=_0xabeb6b,_0x1799ce=Window_InBattleStatusStates[_0x580f0e(0x7fa)],_0x254421=this['currentExt']();let _0x2ed418='';const _0x24e458=this[_0x580f0e(0x2aa)][_0x580f0e(0x873)](_0x254421),_0x4b1b4a=_0x24e458?_0x580f0e(0x8d9):'debuffHelpFmt',_0x404347=_0x1799ce[_0x4b1b4a];let _0x483d0d=_0x580f0e(0xb82);Imported[_0x580f0e(0x707)]&&Imported[_0x580f0e(0xa2b)]&&(_0x483d0d=_0x24e458?ColorManager['buffColor']():ColorManager[_0x580f0e(0x37d)](),_0x483d0d[_0x580f0e(0xef)](/#(.*?)/gi)?_0x483d0d=_0x580f0e(0x9ea)[_0x580f0e(0x782)](_0x483d0d):_0x483d0d=_0x580f0e(0x790)['format'](_0x483d0d));const _0x274fc8=this[_0x580f0e(0x2aa)][_0x580f0e(0x26b)][_0x254421]||0x0;return _0x2ed418=_0x404347[_0x580f0e(0x782)](TextManager[_0x580f0e(0x624)](_0x254421),Math[_0x580f0e(0x108)](this['_battler'][_0x580f0e(0xa40)](_0x254421)*0x64)+'%',_0x483d0d,this[_0x580f0e(0xa80)]('turns',_0x274fc8,_0x483d0d)),_0x2ed418;},Window_InBattleStatusStates[_0xabeb6b(0xc8)]['makeTurnsText']=function(_0x5979ec,_0x17fbfe,_0x409320){const _0x328e73=_0xabeb6b,_0x52577e=Window_InBattleStatusStates[_0x328e73(0x7fa)];let _0x59697e=_0x52577e['passiveText'];if(_0x5979ec===_0x328e73(0x6a4))_0x59697e=_0x52577e[_0x328e73(0xa6b)];if(_0x5979ec===_0x328e73(0x57c))_0x59697e=_0x52577e[_0x328e73(0x1ec)];if(_0x5979ec==='none')return'';return _0x59697e[_0x328e73(0x782)](_0x17fbfe,_0x409320);};